window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "cpom", "modulename": "cpom", "kind": "module", "doc": "<p><small>this toplevel page at src/cpom/__init__.py</small></p>\n\n<p>Documentation for the CPOM Software Package, hosted on GitHub at\n<a href=\"https://github.com/CPOM-Altimetry/cpom_software2\">github.com/CPOM-Altimetry/cpom_software2</a>.</p>\n\n<h1 id=\"installation\">Installation</h1>\n\n<h2 id=\"installation-of-the-cpom-software-package\">Installation of the CPOM Software Package</h2>\n\n<p>Note that the package has been tested on Linux and MacOS systems. Use on\nother operating systems is possible but may require additional install steps.</p>\n\n<p>Make sure you have <em>git</em> installed on your target system.</p>\n\n<p>Clone the git public repository in to a suitable directory on your system.\nThis will create a directory called <strong>/cpom_software2</strong> in your current directory.</p>\n\n<p>with https:\n<code>git clone https://github.com/CPOM-Altimetry/cpom_software2.git</code></p>\n\n<p>or with ssh:\n<code>git clone git@github.com:CPOM-Altimetry/cpom_software2.git</code></p>\n\n<p>or with the GitHub CLI:\n<code>gh repo clone CPOM-Altimetry/cpom_software2</code></p>\n\n<h2 id=\"shell-environment-setup\">Shell Environment Setup</h2>\n\n<p>The following shell environment variables need to be set to support package\noperations.</p>\n\n<p>In a bash shell this might be done by adding export lines to your \n$HOME/.bashrc or $HOME/.bash_profile file.</p>\n\n<ul>\n<li>Set the <em>CPOM_SOFTWARE_DIR</em> environment variable to the root of the cpom software package.</li>\n<li>Add $CPOM_SOFTWARE_DIR/src to <em>PYTHONPATH</em>.</li>\n<li>Add ${CPOM_SOFTWARE_DIR}/src/cpom/tools to the <em>PATH</em>.</li>\n<li>Set the shell's <em>ulimit -n</em> to allow enough file descriptors to be available for\nmulti-processing.</li>\n</ul>\n\n<p>An example environment setup is shown below (the path in the first line should be\nadapted for your specific directory path):</p>\n\n<pre><code>export CPOM_SOFTWARE_DIR=/Users/someuser/software/cpom_software2\nexport PYTHONPATH=$PYTHONPATH:$CPOM_SOFTWARE_DIR/src\nexport PATH=${CPOM_SOFTWARE_DIR}/src/cpom/tools:${PATH}\n# for multi-processing/shared mem support set ulimit\n# to make sure you have enough file descriptors available\nulimit -n 8192\n</code></pre>\n\n<h2 id=\"python-requirement\">Python Requirement</h2>\n\n<p>python v3.11 must be installed or available before proceeding.\nA recommended minimal method of installation of python 3.11 is using Miniconda.</p>\n\n<p>To install Python 3.11 using Miniconda, select the appropriate link for your operating system from:</p>\n\n<p><a href=\"https://docs.anaconda.com/free/miniconda/miniconda-other-installer-links/\">https://docs.anaconda.com/free/miniconda/miniconda-other-installer-links/</a></p>\n\n<p>For example, for <strong>Linux</strong> (select different installer for other operating systems),\ndownload the installer and install a minimal python 3.11 installation using:</p>\n\n<pre><code>wget https://repo.anaconda.com/miniconda/Miniconda3-py311_24.1.2-0-Linux-x86_64.sh\nchmod +x Miniconda3-py311_24.1.2-0-Linux-x86_64.sh\n./Miniconda3-py311_24.1.2-0-Linux-x86_64.sh\n\nDo you wish the installer to initialize Miniconda3\nby running conda init? [yes|no] yes\n</code></pre>\n\n<p>You may need to start a new shell to refresh your environment before\nchecking that python 3.11 is in your path.</p>\n\n<p>Check that python v3.11 is now available, by typing:</p>\n\n<pre><code>python -V\n</code></pre>\n\n<h2 id=\"virtual-environment-and-package-requirements\">Virtual Environment and Package Requirements</h2>\n\n<p>This project uses <em>poetry</em> (a dependency manager, see: <a href=\"https://python-poetry.org/\">https://python-poetry.org/</a>) to manage\npackage dependencies and virtual envs.</p>\n\n<p>First, you need to install <em>poetry</em> on your system using instructions from\n<a href=\"https://python-poetry.org/docs/#installation\">https://python-poetry.org/docs/#installation</a>. Normally this just requires running:</p>\n\n<p><code>curl -sSL https://install.python-poetry.org | python3 -</code></p>\n\n<p>You should also then ensure that poetry is in your path, such that the command</p>\n\n<p><code>poetry --version</code></p>\n\n<p>returns the poetry version number. You may need to modify your\nPATH variable in order to achieve this.</p>\n\n<p>To make sure poetry is setup to use Python 3.11 virtual env when in the CLEV2ER base directory</p>\n\n<pre><code>cd $CPOM_SOFTWARE_DIR\npoetry env use $(which python3.11)\n</code></pre>\n\n<h3 id=\"install-required-python-packages-using-poetry\">Install Required Python packages using Poetry</h3>\n\n<p>Run the following command to install python dependencies for this project\n(for info, it uses settings in pyproject.toml to know what to install)</p>\n\n<pre><code>cd $CPOM_SOFTWARE_DIR\npoetry install\n</code></pre>\n\n<h3 id=\"load-the-virtual-environment\">Load the Virtual Environment</h3>\n\n<p>Now you are all setup to go. Whenever you want to run any cpom software you\nmust first load the virtual environment using the <code>poetry shell</code> commands.</p>\n\n<pre><code>cd $CPOM_SOFTWARE_DIR\npoetry shell\n</code></pre>\n\n<h1 id=\"test-development\">Test Development</h1>\n\n<p>Each module should have an associated pytest unit or integration test. Place these in\na <strong>tests/</strong> directory inside your module directory. ie:</p>\n\n<pre><code>mymodule.py\ntests/test_mymodule.py\n</code></pre>\n\n<p>If your test accesses data outside the repository then you need to exclude\nit from running on GitHub Actions CI. To do this just include one of the following\nat the top of your test code:</p>\n\n<p><code>pytestmark = pytest.mark.requires_external_data</code></p>\n\n<p>or</p>\n\n<p><code>pytestmark = pytest.mark.non_core</code></p>\n\n<h1 id=\"documentation\">Documentation</h1>\n\n<p>Documentation is automatically generated from docstrings in the code. A few things to note:</p>\n\n<ul>\n<li>within each directory there should be a __init__.py file. The docstring in these files\nare displayed as the introduction page of that module or set of modules.</li>\n<li>the top level page (ie this page) is in <strong>src/cpom/__init__.py</strong></li>\n<li>you can display images within docstrings by putting the images in \n<strong>docs/images/someimage.png</strong> and then in the module's docstring put\n<code>![](/cpom_software2/images/someimage.png \"\")</code>. Note you should do a <code>git add docs/images</code>\nwithin your branch as well.</li>\n</ul>\n"}, {"fullname": "cpom.altimetry", "modulename": "cpom.altimetry", "kind": "module", "doc": "<h1 id=\"altimetry-related-directories\">Altimetry related directories</h1>\n\n<ul>\n<li><code>cpom.altimetry.missions</code>\n<ul>\n<li>code for the altimetry Mission class (stores info and \ngeneric functions for a range of altimetry missions)</li>\n</ul></li>\n<li><code>cpom.altimetry.projects</code>\n<ul>\n<li>contains sub-directories of code for specific projects (ESA or other)</li>\n</ul></li>\n<li><code>cpom.altimetry.tools</code>\n<ul>\n<li>contains executable tools for various tasks</li>\n</ul></li>\n</ul>\n"}, {"fullname": "cpom.altimetry.missions", "modulename": "cpom.altimetry.missions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.altimetry.projects", "modulename": "cpom.altimetry.projects", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.altimetry.tools", "modulename": "cpom.altimetry.tools", "kind": "module", "doc": "<h1 id=\"tools\">Tools</h1>\n\n<p>The following command line tools are available:</p>\n\n<h2 id=\"plot_mappy\">plot_map.py</h2>\n\n<p>Plot variables from NetCDF file(s) on a selectable cryosphere map.</p>\n"}, {"fullname": "cpom.altimetry.tools.plot_map", "modulename": "cpom.altimetry.tools.plot_map", "kind": "module", "doc": "<p>Tool to plot variables (including flags) from NetCDF file(s) on a selectable cryosphere map</p>\n\n<p>For full list of command line args:</p>\n\n<p><code>plot_map.py --help</code></p>\n\n<p>Most settings are configurable from the tool using the command line arguments, although the tool\nwill try and automatically identify default parameters and select an area to plot \n(from contained lat/lon values) from most altimetry formats. If not you can choose these from the\ncommand line.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>List all available area definitions (ie the areas you can select to plot your data on):</p>\n\n<p><code>plot_map.py --list_areas</code></p>\n\n<p>Plot a parameter <strong>elevation</strong> from a CryTEMPO netcdf file, and display in area \ndefinition <strong>antarctica_hs_is</strong> which is an Antarctic map with hillshading and a \ngrounded icesheet mask:</p>\n\n<p><code>plot_map.py -f  /cpdata/SATS/RA/CRY/Cryo-TEMPO/BASELINE-B/001/LAND_ICE/ANTARC/2010/07/CS_OFFL_SIR_TDP_LI_ANTARC_20100717T141004_20100717T141229_01_02644_B001.nc -p elevation -a antarctica_hs_is</code></p>\n\n<p><img src=\"/cpom_software2/images/plot_map_example1.png\" alt=\"my image\" title=\"my image\" /></p>\n\n<p>Plot all the netcdf files in the given directory. Automatically select the default\nparameter and area to plot.</p>\n\n<p><code>plot_map.py -d /cpdata/SATS/RA/CRY/Cryo-TEMPO/BASELINE-B/001/LAND_ICE/ANTARC/2010/07</code></p>\n\n<p><img src=\"/cpom_software2/images/plot_map_example2.png\" alt=\"my image\" title=\"my image\" /></p>\n\n<p>Plot a simulated grid of values at 0.01 deg separation over Lake Vostok, with\npoint size 1.0 and colormap set to viridis</p>\n\n<p><code>plot_map.py -a vostok -s 0.01 -ps 1 --cmap viridis</code></p>\n\n<p><img src=\"/cpom_software2/images/plot_map_example3.png\" alt=\"my image\" title=\"my image\" /></p>\n\n<p>Plot the instrument_mode parameter files in a named directory, and use the flag parameter settings\nshown to specify flag values, names and colours:</p>\n\n<p><code>plot_map.py -d /cpdata/SATS/RA/CRY/Cryo-TEMPO/BASELINE-B/001/LAND_ICE/ANTARC/2010/07     -p instrument_mode     --flag_params 1:LRM:blue/2:SAR:pink/3:SIN:red</code></p>\n\n<p><img src=\"/cpom_software2/images/plot_map_example4.png\" alt=\"my image\" title=\"my image\" /></p>\n"}, {"fullname": "cpom.altimetry.tools.plot_map.main", "modulename": "cpom.altimetry.tools.plot_map", "qualname": "main", "kind": "function", "doc": "<p>main function of tool</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.tests", "modulename": "cpom.altimetry.tools.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.altimetry.tools.tests.test_plot_map", "modulename": "cpom.altimetry.tools.tests.test_plot_map", "kind": "module", "doc": "<p>pytest for cpom.altimetry.tools.plot_map.py</p>\n"}, {"fullname": "cpom.altimetry.tools.tests.test_plot_map.test_plot_map", "modulename": "cpom.altimetry.tools.tests.test_plot_map", "qualname": "test_plot_map", "kind": "function", "doc": "<p>Test the <code>plot_map</code> function from <code>cpom.altimetry.tools.plot_map</code>\nwith multiple sets of arguments.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>capsys (pytest.CaptureFixture):</strong>  A pytest fixture to capture stdout and stderr.</li>\n<li><strong>tmpdir (pytest.TempPathFactory):</strong>  A pytest fixture that provides a temporary</li>\n<li>directory unique to the test.</li>\n<li><strong>test_args (list[str]):</strong>  A list of command-line arguments for the test.</li>\n<li><strong>expected_output (str):</strong>  The expected output to check for in the captured output.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If the expected output is not found in the captured output.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">capsys</span><span class=\"p\">:</span> <span class=\"n\">_pytest</span><span class=\"o\">.</span><span class=\"n\">capture</span><span class=\"o\">.</span><span class=\"n\">CaptureFixture</span>,</span><span class=\"param\">\t<span class=\"n\">tmpdir</span><span class=\"p\">:</span> <span class=\"n\">_pytest</span><span class=\"o\">.</span><span class=\"n\">tmpdir</span><span class=\"o\">.</span><span class=\"n\">TempPathFactory</span>,</span><span class=\"param\">\t<span class=\"n\">test_args</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">expected_output</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas", "modulename": "cpom.areas", "kind": "module", "doc": "<p>cpom.areas</p>\n\n<h1 id=\"cpom-area-definitions-and-polarplot-class\">CPOM Area Definitions and Polarplot class</h1>\n"}, {"fullname": "cpom.areas.area_plot", "modulename": "cpom.areas.area_plot", "kind": "module", "doc": "<p>cpom.areas.area_plot.py\nclass to plot areas defined in cpom.areas.definitions</p>\n\n<p>To do reminder:</p>\n\n<p>TODO: doc in __init__.py\nTODO: grid support\nTODO: vostok antarctic area still to be added\nTODO: arctic area</p>\n"}, {"fullname": "cpom.areas.area_plot.log", "modulename": "cpom.areas.area_plot", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.areas.area_plot (WARNING)&gt;"}, {"fullname": "cpom.areas.area_plot.get_unique_colors", "modulename": "cpom.areas.area_plot", "qualname": "get_unique_colors", "kind": "function", "doc": "<p>get a list of n unique colors for plotting flag data (when no colors are\n   provided, as sampled from the tab20 or tab10 colormap</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n (int):</strong>  number of colors required (&lt;= 20 will provide unique colors</li>\n<li>otherwise some repetition)</li>\n<li><strong>cmap_name_override (str):</strong>  override colormap name to use, Typical alternatives are\n\"tab10\", \"tab20b\", \"tab20c\", and \"Set1\", \"Set2\",\"Set3\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Tuple[float,float,float,float]]: list of color RGBA</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">cmap_name_override</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.calculate_mad", "modulename": "cpom.areas.area_plot", "qualname": "calculate_mad", "kind": "function", "doc": "<p>Calculate the MAD (Mean Absolute Deviation) of values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (np.ndarray):</strong>  values for which MAD is to be calculated</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>mad (float) : MAD value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Annotation", "modulename": "cpom.areas.area_plot", "qualname": "Annotation", "kind": "class", "doc": "<p>Data class for a single annotation in a polar plot.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>xpos (float):</strong>  The x-coordinate position of the annotation text in axis coordinates (0-1),\nrepresenting the percentage of the axis width.</li>\n<li><strong>ypos (float):</strong>  The y-coordinate position of the annotation text in axis coordinates (0-1),\nrepresenting the percentage of the axis height.</li>\n<li><strong>text (str):</strong>  The content of the annotation text.</li>\n<li><strong>bbox (dict | None):</strong>  An optional bounding box around the text. If provided, it should be a\ndictionary specifying the style of the box. Default is None, meaning no\nbox. Example format:\n    {\n        'boxstyle': 'round',  # Style of the box (e.g.,'round','square')\n        'facecolor': 'aliceblue',  # Background color of the box\n        'alpha': 1.0,  # Transparency of the box (0-1)\n        'edgecolor': 'lightgrey',  # Color of the box edge\n    }\nSee matplotlib Boxstyle documentation for more styles.</li>\n<li><strong>fontsize (int):</strong>  The font size of the text. Default is 12.</li>\n<li><strong>color (str):</strong>  The color of the text. Default is \"k\" (black).</li>\n<li><strong>fontweight (str):</strong>  The weight (thickness) of the font. Default is \"normal\".</li>\n</ul>\n"}, {"fullname": "cpom.areas.area_plot.Annotation.__init__", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xpos</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">ypos</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bbox</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fontsize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;k&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fontweight</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;normal&#39;</span></span>)</span>"}, {"fullname": "cpom.areas.area_plot.Annotation.xpos", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.xpos", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cpom.areas.area_plot.Annotation.ypos", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.ypos", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cpom.areas.area_plot.Annotation.text", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.text", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cpom.areas.area_plot.Annotation.bbox", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.bbox", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict | None", "default_value": "None"}, {"fullname": "cpom.areas.area_plot.Annotation.fontsize", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.fontsize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "12"}, {"fullname": "cpom.areas.area_plot.Annotation.color", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;k&#x27;"}, {"fullname": "cpom.areas.area_plot.Annotation.fontweight", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.fontweight", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;normal&#x27;"}, {"fullname": "cpom.areas.area_plot.Polarplot", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot", "kind": "class", "doc": "<p>class to create map plots of polar areas</p>\n"}, {"fullname": "cpom.areas.area_plot.Polarplot.__init__", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.__init__", "kind": "function", "doc": "<p>class inititialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>area (str):</strong>  area name as per cpom.areas.definitions</li>\n<li><strong>area_overrides (dict|None):</strong>  dictionary to override area dict definitions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">area</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">area_overrides</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.areas.area_plot.Polarplot.area", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.area", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.areas.area_plot.Polarplot.thisarea", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.thisarea", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.areas.area_plot.Polarplot.plot_points", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.plot_points", "kind": "function", "doc": "<p>function to plot one or more (lat,lon,val) datasets on polar maps</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*data_sets (dict, optional) :</strong>  data set dictionaries (you can have more than\none dataset plotted by providing dataset1_dict,dataset2_dict2,...)\nEach dictionary contains the (lats,lons,vals) for a data set, and\nthe optional tunable plot parameters for that data set only.\nEach data_set should consist of\n{\n    # Required key/vals:\n    \"lats\": np.array([]),\n    \"lons\": np.array([]),\n    \"vals\": np.array([]),\n    #-----------------------------------------------\n    # Optional, otherwise default values are used.\n    #-----------------------------------------------\n    \"units\": '', # units of vals\n    \"name\": \"unnamed\", # str name of vals. Used to label plot.\n                             # 'unnamed' is used if not provided.\n    \"apply_area_mask_to_data\": True, # bool, whether to apply the default area's\n                                    # data Mask to this data set\n    # --- flagging bad data for this data set, plotted in mini-map\n    \"fill_value\": 9999, # fill value in vals to be ignored or None\n    \"valid_range\": [min,max],# [min,max] or None. allowed vals range. flagged as\n                             # bad outside this range.\n                             # default is actual min,max of vals\n    \"minimap_val_scalefactor\": 1.,# (float) scale the default\n                                  # plot marker for bad data\n    # -- flag type data settings --------------------------------\n    \"flag_values\": [], # list of flag values. If used vals treated as flag data\n    \"flag_names\": [], # list of flag names\n    \"flag_colors\": [] # list of flag colors or colormap name to sample\n    # --- color map, color bar\n    \"cmap_name\": \"RdYlBu_r\", # colormap name to use for this dataset\n    \"cmap_over_color\": \"#A85754\" or None\n    \"cmap_under_color\": \"#3E4371\"  or None\n    \"cmap_extend\": \"both\" # 'neither','min', 'max','both'\n    \"min_plot_range\": None, # set the minimum range for the colorbar.\n                       # if not set min(vals) will be used\n    \"max_plot_range\": None, # set the maximum range for the colorbar\n    # --- point size, alpha\n    \"plot_size_scale_factor\": 1., # (float) scale the default plot marker\n    \"plot_alpha\": 1.0, # transparency of this dataset plot (0..1)\n}</li>\n<li><strong>use_default_annotation (bool):</strong>  if True display default dataset annotation else do not</li>\n<li><strong>annotation_list (list[Annotation]|None, optional):</strong>  list of Annotation objects to display</li>\n<li><strong>logo_image (,optional):</strong>  logo image to insert in plot as returned by\nplt.imread('someimagefile.png')</li>\n<li><strong>logo_position (list,optional) :</strong>  logo position as an axis rect list:\n[left, bottom, width, height] , each are 0..1</li>\n<li><strong>output_dir (str,optional):</strong>   output directory to save plots instead of displaying them.\nif output_file not specified, plot saved with name of 1st data_set and\narea: <output_dir>/param_<data_set['name']&gt;_<self.area>.png</li>\n<li><strong>output_file (str,optional):</strong>  optionally override default output plot .png filename.\nif output_dir specified, saved as <output_dir>/output_file\nif no output_dir than output_file should contain the full path</li>\n<li><strong>dpi (int,optional):</strong>  dpi to save image, default=85</li>\n<li><strong>transparent_background (bool, optional):</strong>  set to have transparent background when saved\nas png</li>\n<li><strong>map_only (bool):</strong>  plot just the map plot (+ colorbar). No histograms or other elements.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if data_set parameters (lat,lon,vals) do not have equal length</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">data_sets</span>,</span><span class=\"param\">\t<span class=\"n\">use_default_annotation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">annotation_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cpom</span><span class=\"o\">.</span><span class=\"n\">areas</span><span class=\"o\">.</span><span class=\"n\">area_plot</span><span class=\"o\">.</span><span class=\"n\">Annotation</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logo_image</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logo_position</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dpi</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">85</span>,</span><span class=\"param\">\t<span class=\"n\">transparent_background</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">map_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_stats", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_stats", "kind": "function", "doc": "<p>plot stats info (min,max,mean,std,MAD,nvals) of vals\n   positioned around colorbar axes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cbar (Axes):</strong>  colorbar axes instance</li>\n<li><strong>vals (np.ndarray):</strong>  values array (after Nan filtering) used to calculate and draw stats\ninfo</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cbar</span>, </span><span class=\"param\"><span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_minimap_bad", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_minimap_bad", "kind": "function", "doc": "<p>draw a minimap to show Nan, FV and out of range values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>percent_valid (float):</strong>  percent of valid data in area</li>\n<li><strong>nan_lats (np.ndarray):</strong>  latitude locations corresponding to Nan data</li>\n<li><strong>nan_lons (np.ndarray):</strong>  longitude locations corresponding to Nan data</li>\n<li><strong>percent_nan (float):</strong>  percent of Nan values in area</li>\n<li><strong>fv_lats (np.ndarray):</strong>  latitude locations corresponding to FV data</li>\n<li><strong>fv_lons (np.ndarray):</strong>  longitude locations corresponding to FV data</li>\n<li><strong>percent_fv (float):</strong>  percent of Fill value values in area</li>\n<li><strong>outside_lats (np.ndarray):</strong>  latitude locations corresponding to out of range data</li>\n<li><strong>outside_lons (np.ndarray):</strong>  longitude locations corresponding to out of range data</li>\n<li><strong>percent_outside (float):</strong>  percent of out of range values in area</li>\n<li><strong>dataset_params (dict):</strong>  data set parameters</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">percent_valid</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">nan_lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">nan_lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">percent_nan</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">fv_lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">fv_lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">percent_fv</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">outside_lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">outside_lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">percent_outside</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_minimap", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_minimap", "kind": "function", "doc": "<p>draw a minimap to show Nan, FV and out of range values</p>\n\n<p>Args:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_latitude_vs_vals_plot", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_latitude_vs_vals_plot", "kind": "function", "doc": "<p>plot latitude vs vals</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fig (Figure):</strong>  plot figure</li>\n<li><strong>vals (np.ndarray):</strong>  values to be plotted</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values in degrees</li>\n<li><strong>varname (str):</strong>  name of data set</li>\n<li><strong>units (str):</strong>  units of data set</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fig</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>,</span><span class=\"param\">\t<span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">varname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_histograms", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_histograms", "kind": "function", "doc": "<p>draw two histograms of plot range and full range</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fig (Figure):</strong>  plot figure</li>\n<li><strong>vals (np.ndarray):</strong>  values to be histogrammed</li>\n<li><strong>min_plot_range (float):</strong>  minimum plot range</li>\n<li><strong>max_plot_range (float):</strong>  maximum plot range</li>\n<li><strong>varunits (str):</strong>  units of vals</li>\n<li><strong>cmap (_type_):</strong>  colormap instance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fig</span>,</span><span class=\"param\">\t<span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">min_plot_range</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">max_plot_range</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">varunits</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_mapscale_bar", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_mapscale_bar", "kind": "function", "doc": "<p>draw the map scale bar in km</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxis):</strong>  the main map plot axis</li>\n<li><strong>dataprj ():</strong>  the data projection</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">dataprj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_colorbar", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_colorbar", "kind": "function", "doc": "<p>draw the colorbar</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataset (dict):</strong>  the data set dict</li>\n<li><strong>fig (Figure):</strong>  the plot figure</li>\n<li><strong>scatter (_type_):</strong>  _description_</li>\n<li><strong>varname (str):</strong>  name of data set</li>\n<li><strong>varunits (str):</strong>  units of data set</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>colorbar_axes(Axes): Axes instance for the colorbar</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">scatter</span>, </span><span class=\"param\"><span class=\"n\">varname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">varunits</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.plot_flag_data", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.plot_flag_data", "kind": "function", "doc": "<p>plot flag data</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fig (Figure) :</strong>  the plot figure</li>\n<li><strong>ax (GeoAxesSubplot):</strong>  the main plot axis</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>vals (np.ndarray):</strong>  data containing flag values to plot</li>\n<li><strong>data_set (dict):</strong>  the current data set</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">vals</span>, </span><span class=\"param\"><span class=\"n\">data_set</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.plot_data", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.plot_data", "kind": "function", "doc": "<p>plot lat,lon,vals, data on map</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxesSubplot):</strong>  the main plot axis</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>vals (np.ndarray):</strong>  values to plot</li>\n<li><strong>cmap_info:</strong>  (dict): colormap info</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">cmap_info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">plot_size_scale_factor</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">plot_alpha</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_gridlines", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_gridlines", "kind": "function", "doc": "<p>draw latitude and longitude grid lines on maps</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxesSubplot):</strong>  cartopy axis</li>\n<li><strong>show_gridlines (bool):</strong> </li>\n<li><strong>gridline_color (str):</strong>  color of gridlines</li>\n<li><strong>circle (_type_):</strong>  _description_</li>\n<li><strong>draw_gridlabels (bool, optional):</strong>  _description_. Defaults to True.</li>\n<li><strong>gridlabel_color (str) :</strong>  color of grid labels</li>\n<li><strong>inner_gridlabel_color (str) :</strong>  color of inner grid labels</li>\n<li><strong>longitude_lines (List[float]|None, optional):</strong>  longitude positions for grid lines.</li>\n<li><strong>latitude_lines (List[float]|None, optional):</strong>  latitude positions for grid lines.</li>\n<li><strong>zorder (int, optional):</strong>  vertical order. Defaults to 10.</li>\n<li><strong>for_minimap (bool, optional):</strong>  if used for mini-map. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">show_gridlines</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">gridline_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">circle</span>,</span><span class=\"param\">\t<span class=\"n\">draw_gridlabels</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">gridlabel_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">inner_gridlabel_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">longitude_lines</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latitude_lines</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zorder</span><span class=\"o\">=</span><span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">for_minimap</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_coastlines", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_coastlines", "kind": "function", "doc": "<p>draw coastlines over map</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxesSubplot):</strong>  matplotlib Axis</li>\n<li><strong>dataprj (_type_):</strong>  current cartopy crs</li>\n<li><strong>coastline_color (str):</strong>  coastline color to use</li>\n<li><strong>draw_coastlines (bool):</strong>   draw coastline or not</li>\n<li><strong>use_cartopy_coastline (str):</strong>  'no','low','medium','high'.</li>\n<li><strong>use_antarctica_medium_coastline (bool):</strong>  use antarctic coastline (including iceshelves)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">dataprj</span>,</span><span class=\"param\">\t<span class=\"n\">coastline_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">draw_coastlines</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_cartopy_coastline</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">use_antarctica_medium_coastline</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_area_polygon_mask", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_area_polygon_mask", "kind": "function", "doc": "<p>if area has a data mask defined by one or more polygons, draw these on map</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxesSubplot):</strong>  cartopy axis</li>\n<li><strong>override_mask_display (bool):</strong>  if set to True (show polygon mask) or False (do not show\npolygon mask), overrides default for area</li>\n<li><strong>override_mask_color (bool):</strong>  set to a color string to override default polygon mask color\nfor area</li>\n<li><strong>dataprj (_type_):</strong>  crs returned by self.setup_projection_and_extent()</li>\n<li><strong>fill (bool, optional):</strong>  fill polygon if True. Defaults to False.</li>\n<li><strong>linestyle (str, optional):</strong>  line style to use for polygon edges. Defaults to \"-\".</li>\n<li><strong>linecolor (str, optional):</strong>  line color to use for polygon edges. Defaults to \"red\".</li>\n<li><strong>linewidth (int, optional):</strong>  line width to use for polygon edges. Defaults to 2.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">override_mask_display</span>,</span><span class=\"param\">\t<span class=\"n\">override_mask_color</span>,</span><span class=\"param\">\t<span class=\"n\">dataprj</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">linestyle</span><span class=\"o\">=</span><span class=\"s1\">&#39;-&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linecolor</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.setup_projection_and_extent", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.setup_projection_and_extent", "kind": "function", "doc": "<p>Setup projection and extent for current Area</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>axis_position (List, optional):</strong>  [left,bottom,width,height]. Defaults to None.</li>\n<li><strong>global_view (bool, optional):</strong>  _description_. Defaults to False.</li>\n<li><strong>draw_axis_frame (bool, optional):</strong>  _description_. Defaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>cartopy_geo_axis, data_projection_crs, circle</p>\n  \n  <p>if area has a circular border returns the circle</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">axis_position</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">global_view</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">draw_axis_frame</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas", "modulename": "cpom.areas.areas", "kind": "module", "doc": "<p>cpom.areas.areas.py: Area class to define areas for polar plotting</p>\n"}, {"fullname": "cpom.areas.areas.log", "modulename": "cpom.areas.areas", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.areas.areas (WARNING)&gt;"}, {"fullname": "cpom.areas.areas.list_all_area_definition_names", "modulename": "cpom.areas.areas", "qualname": "list_all_area_definition_names", "kind": "function", "doc": "<p>return a list of all area definition names and some additional\ninfo on each.</p>\n\n<p>Raises:</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.list_all_area_definition_names_only", "modulename": "cpom.areas.areas", "qualname": "list_all_area_definition_names_only", "kind": "function", "doc": "<p>return a list of all area definition names (only the names)</p>\n\n<p>Raises:</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.Area", "modulename": "cpom.areas.areas", "qualname": "Area", "kind": "class", "doc": "<p>class to define polar areas for plotting etc</p>\n"}, {"fullname": "cpom.areas.areas.Area.__init__", "modulename": "cpom.areas.areas", "qualname": "Area.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  area name. Must be in all_areas</li>\n<li><strong>overrides (dict|None):</strong>  dictionary to override any parameters in area definition dicts</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">overrides</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.areas.areas.Area.name", "modulename": "cpom.areas.areas", "qualname": "Area.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.areas.areas.Area.mask", "modulename": "cpom.areas.areas", "qualname": "Area.mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[cpom.masks.masks.Mask]"}, {"fullname": "cpom.areas.areas.Area.load_area", "modulename": "cpom.areas.areas", "qualname": "Area.load_area", "kind": "function", "doc": "<p>Load area settings for current area name</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">overrides</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.Area.latlon_to_xy", "modulename": "cpom.areas.areas", "qualname": "Area.latlon_to_xy", "kind": "function", "doc": "<p>convert latitude and longitude to x,y in area's projection</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray|float|list):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray|float|list):</strong>  longitude values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(np.ndarray,np.ndarray): x,y</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.Area.xy_to_latlon", "modulename": "cpom.areas.areas", "qualname": "Area.xy_to_latlon", "kind": "function", "doc": "<p>convert from x,y to latitide, longitiude in area's projection</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x coordinates</li>\n<li><strong>y (np.ndarray):</strong>  y coordinates</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(np.ndarray,np.ndarray): latitude values, longitude values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.Area.inside_xy_extent", "modulename": "cpom.areas.areas", "qualname": "Area.inside_xy_extent", "kind": "function", "doc": "<p>filter points based on x,y extent of area</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  latitude values (degs N)</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values (deg E)</li>\n<li><strong>inputs_are_xy (bool):</strong>  if True treat inputs as cartesian: x=lats, y=lons</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(lats_inside, lons_inside, x_inside, y_inside, indices_inside, n_inside):\n  lats_inside (np.ndarray): lat values inside area\n  lons_inside (np.ndarray): lon values inside area\n  x_inside (np.ndarray): projected x coords inside area\n  y_inside (np.ndarray): projected y coords inside area\n  indices_inside (np.ndarray): indices of original lats,lons that are inside\n  n_inside (int): number of original lats, lons that were inside</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.Area.inside_latlon_bounds", "modulename": "cpom.areas.areas", "qualname": "Area.inside_latlon_bounds", "kind": "function", "doc": "<p>find if input latitude and longitude locations are inside area's lat/lon extent\n   bounds</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  array of latitude values (degs N)</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude values (degs E)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bounded_lats|None, bounded_lons|None, bounded_indices|None, bounded_indices.size):</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.Area.inside_mask", "modulename": "cpom.areas.areas", "qualname": "Area.inside_mask", "kind": "function", "doc": "<p>Find indices of x,y coords inside the area's data mask (if there is one).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x coordinates in areas's projection</li>\n<li><strong>y (np.ndarray):</strong>  y coordinates in areas's projection</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>indices_in_maskarea (np.ndarray) : indices inside mask or empty np.ndarray\n  n_inside (int) : number of points inside mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.definitions", "modulename": "cpom.areas.definitions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.areas.definitions.antarctica", "modulename": "cpom.areas.definitions.antarctica", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.antarctica.area_definition", "modulename": "cpom.areas.definitions.antarctica", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Antarctica&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: True, &#x27;specify_by_bounding_lat&#x27;: True, &#x27;bounding_lat&#x27;: -63.15, &#x27;specify_by_centre&#x27;: False, &#x27;centre_lon&#x27;: 0.0, &#x27;centre_lat&#x27;: -90.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 6600, &#x27;height_km&#x27;: 6100, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: -62.0, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: &#x27;&#x27;, &#x27;basin_numbers&#x27;: [], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [-0.02, 0.1, 0.74, 0.74], &#x27;simple_axes&#x27;: [0.081, 0.1, 0.83, 0.83], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;basic_land&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;low&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: True, &#x27;use_cartopy_coastline&#x27;: &#x27;no&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.31, 0.88), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.43, 0.97), &#x27;mask_long_name_position&#x27;: (0.26, 0.86), &#x27;mask_long_name_position_simple&#x27;: (0.36, 0.95), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.04, 0.9), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.9), &#x27;stats_position_x_offset&#x27;: 0, &#x27;stats_position_y_offset&#x27;: 0, &#x27;stats_position_x_offset_simple&#x27;: -0.13, &#x27;stats_position_y_offset_simple&#x27;: 0, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.08, 0.05, 0.55, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.22, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: range(0, 380, 20), &#x27;latitude_gridlines&#x27;: [-82, -78, -74, -70, -66, -88], &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: -58.3, &#x27;labels_at_top&#x27;: False, &#x27;labels_at_bottom&#x27;: False, &#x27;labels_at_left&#x27;: False, &#x27;labels_at_right&#x27;: False, &#x27;show_scalebar&#x27;: True, &#x27;mapscale&#x27;: [-179.9, -65.0, 0.0, -90.0, 1000, &#x27;black&#x27;, 70], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [-50, -70], &#x27;bad_data_longitude_lines&#x27;: [0, 60, 120, 180, -120, -60], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (1.38, 1.1), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.antarctica_basic", "modulename": "cpom.areas.definitions.antarctica_basic", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_basic.area_definition", "modulename": "cpom.areas.definitions.antarctica_basic", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;antarctica&#x27;, &#x27;background_image&#x27;: &#x27;basic_land&#x27;, &#x27;mapscale&#x27;: [-178.0, -65.0, 0.0, -90.0, 1000, &#x27;grey&#x27;, 70], &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;inner_gridlabel_color&#x27;: &#x27;darkgrey&#x27;}"}, {"fullname": "cpom.areas.definitions.antarctica_fi", "modulename": "cpom.areas.definitions.antarctica_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>Data mask: floating ice from bedmachine v2</strong></p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_fi.area_definition", "modulename": "cpom.areas.definitions.antarctica_fi", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Antarctica [floating ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;antarctica&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [3], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.antarctica_hs", "modulename": "cpom.areas.definitions.antarctica_hs", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>background_image: hillshade</strong></p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_hs.area_definition", "modulename": "cpom.areas.definitions.antarctica_hs", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;antarctica&#x27;, &#x27;background_image&#x27;: [&#x27;ibcso_bathymetry&#x27;, &#x27;hillshade&#x27;], &#x27;background_image_alpha&#x27;: [0.14, 0.18], &#x27;background_color&#x27;: &#x27;white&#x27;}"}, {"fullname": "cpom.areas.definitions.antarctica_hs_fi", "modulename": "cpom.areas.definitions.antarctica_hs_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>background_image: hillshade</strong>\n<strong>Data mask: floating ice from bedmachine v2</strong></p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_hs_fi.area_definition", "modulename": "cpom.areas.definitions.antarctica_hs_fi", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Antarctica [floating ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;antarctica_hs&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [3], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.antarctica_hs_is", "modulename": "cpom.areas.definitions.antarctica_hs_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>background_image: hillshade</strong>\n<strong>Data mask: grounded ice from bedmachine v2</strong></p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_hs_is.area_definition", "modulename": "cpom.areas.definitions.antarctica_hs_is", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Antarctica [grounded ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;antarctica_hs&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [2, 4], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.antarctica_is", "modulename": "cpom.areas.definitions.antarctica_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>Data mask: grounded ice from bedmachine v2</strong></p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_is.area_definition", "modulename": "cpom.areas.definitions.antarctica_is", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Antarctica [grounded ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;antarctica&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;basin_numbers&#x27;: [2, 4], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.arctic", "modulename": "cpom.areas.definitions.arctic", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.arctic.area_definition", "modulename": "cpom.areas.definitions.arctic", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Arctic&#x27;, &#x27;hemisphere&#x27;: &#x27;north&#x27;, &#x27;epsg_number&#x27;: 3413, &#x27;round&#x27;: True, &#x27;specify_by_bounding_lat&#x27;: True, &#x27;bounding_lat&#x27;: 59.0, &#x27;specify_by_centre&#x27;: False, &#x27;centre_lon&#x27;: -45.0, &#x27;centre_lat&#x27;: 90.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: -45.0, &#x27;width_km&#x27;: 6200, &#x27;height_km&#x27;: 6200, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: 59.0, &#x27;maxlat&#x27;: 90.0, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: None, &#x27;masktype&#x27;: None, &#x27;basin_numbers&#x27;: None, &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [-0.03, 0.11, 0.76, 0.76], &#x27;simple_axes&#x27;: [0.081, 0.1, 0.83, 0.83], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;basic_land&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;medium&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: False, &#x27;use_cartopy_coastline&#x27;: &#x27;medium&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.33, 0.91), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.47, 0.965), &#x27;mask_long_name_position&#x27;: (0.28, 0.89), &#x27;mask_long_name_position_simple&#x27;: (0.4, 0.945), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.04, 0.9), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.9), &#x27;stats_position_x_offset&#x27;: 0, &#x27;stats_position_y_offset&#x27;: 0, &#x27;stats_position_x_offset_simple&#x27;: -0.13, &#x27;stats_position_y_offset_simple&#x27;: 0, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.08, 0.05, 0.55, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.22, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: range(0, 380, 20), &#x27;latitude_gridlines&#x27;: [60, 70, 80], &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: 57.5, &#x27;labels_at_top&#x27;: False, &#x27;labels_at_bottom&#x27;: False, &#x27;labels_at_left&#x27;: False, &#x27;labels_at_right&#x27;: False, &#x27;show_scalebar&#x27;: True, &#x27;mapscale&#x27;: [-179.9, -65.0, 0.0, -90.0, 1000, &#x27;black&#x27;, 70], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [-50, -70], &#x27;bad_data_longitude_lines&#x27;: [0, 60, 120, 180, -120, -60], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (1.38, 1.1), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.arctic_cpy", "modulename": "cpom.areas.definitions.arctic_cpy", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: arctic\n<strong>Data mask: floating ice from bedmachine v3</strong></p>\n"}, {"fullname": "cpom.areas.definitions.arctic_cpy.area_definition", "modulename": "cpom.areas.definitions.arctic_cpy", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;arctic&#x27;, &#x27;background_image&#x27;: &#x27;natural_earth_faded&#x27;}"}, {"fullname": "cpom.areas.definitions.global", "modulename": "cpom.areas.definitions.global", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.global.area_definition", "modulename": "cpom.areas.definitions.global", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Global (Mercator)&#x27;, &#x27;hemisphere&#x27;: &#x27;both&#x27;, &#x27;epsg_number&#x27;: 3395, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: True, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: False, &#x27;centre_lon&#x27;: -45.0, &#x27;centre_lat&#x27;: 90.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: 15.77, &#x27;width_km&#x27;: 6200, &#x27;height_km&#x27;: 6200, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: 90.0, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: None, &#x27;masktype&#x27;: None, &#x27;basin_numbers&#x27;: None, &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [0.015, 0.2, 0.62, 0.62], &#x27;simple_axes&#x27;: [0.041, 0.1, 0.92, 0.92], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;basic_land&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;medium&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: False, &#x27;use_cartopy_coastline&#x27;: &#x27;medium&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.3, 0.73), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.47, 0.965), &#x27;mask_long_name_position&#x27;: (0.28, 0.89), &#x27;mask_long_name_position_simple&#x27;: (0.4, 0.945), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.04, 0.9), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.9), &#x27;stats_position_x_offset&#x27;: 0, &#x27;stats_position_y_offset&#x27;: -0.2, &#x27;stats_position_x_offset_simple&#x27;: -0.13, &#x27;stats_position_y_offset_simple&#x27;: 0, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.08, 0.25, 0.55, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.22, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: range(0, 380, 20), &#x27;latitude_gridlines&#x27;: range(-80, 90, 10), &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: 57.5, &#x27;labels_at_top&#x27;: True, &#x27;labels_at_bottom&#x27;: True, &#x27;labels_at_left&#x27;: True, &#x27;labels_at_right&#x27;: True, &#x27;show_scalebar&#x27;: False, &#x27;mapscale&#x27;: [0, -65.0, 0.0, -90.0, 1000, &#x27;black&#x27;, 70], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [-50, -70], &#x27;bad_data_longitude_lines&#x27;: [0, 60, 120, 180, -120, -60], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (1.38, 1.1), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.greenland", "modulename": "cpom.areas.definitions.greenland", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.greenland.area_definition", "modulename": "cpom.areas.definitions.greenland", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Greenland&#x27;, &#x27;hemisphere&#x27;: &#x27;north&#x27;, &#x27;epsg_number&#x27;: 3413, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: -41.75, &#x27;centre_lat&#x27;: 71.5, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 1540, &#x27;height_km&#x27;: 2740, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 285.0, &#x27;maxlon&#x27;: 350.0, &#x27;minlat&#x27;: 59.0, &#x27;maxlat&#x27;: 85.0, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: None, &#x27;masktype&#x27;: None, &#x27;basin_numbers&#x27;: None, &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [0.03, 0.05, 0.8, 0.83], &#x27;simple_axes&#x27;: [0.2, 0.04, 0.8, 0.9], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;basic_land&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;low&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: False, &#x27;use_cartopy_coastline&#x27;: &#x27;medium&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.39, 0.91), &#x27;area_long_name_position_simple&#x27;: (0.5, 0.97), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;mask_long_name_position&#x27;: (0.32, 0.89), &#x27;mask_long_name_position_simple&#x27;: (0.48, 0.95), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.02, 0.8), &#x27;varname_annotation_position_xy_simple&#x27;: (0.06, 0.8), &#x27;stats_position_x_offset&#x27;: 0, &#x27;stats_position_y_offset&#x27;: 0, &#x27;stats_position_x_offset_simple&#x27;: 0, &#x27;stats_position_y_offset_simple&#x27;: 0, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;lower right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;vertical&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.07, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.13, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.08, 0.05, 0.55, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.08, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: range(-90, 20, 10), &#x27;latitude_gridlines&#x27;: [60, 65, 70, 75, 80], &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;black&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: -58.3, &#x27;labels_at_top&#x27;: False, &#x27;labels_at_bottom&#x27;: True, &#x27;labels_at_left&#x27;: False, &#x27;labels_at_right&#x27;: True, &#x27;show_scalebar&#x27;: True, &#x27;mapscale&#x27;: [-35, 60, -40.0, 70.0, 400, &#x27;black&#x27;, 30], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [50, 60, 70, 80], &#x27;bad_data_longitude_lines&#x27;: [-20, -40, -60], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (1.94, 1.0), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.greenland_fi", "modulename": "cpom.areas.definitions.greenland_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<strong>Data mask: floating ice from bedmachine v3</strong></p>\n"}, {"fullname": "cpom.areas.definitions.greenland_fi.area_definition", "modulename": "cpom.areas.definitions.greenland_fi", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Greenland [floating ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;greenland&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;greenland_bedmachine_v3_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [3], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.greenland_hs", "modulename": "cpom.areas.definitions.greenland_hs", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<strong>background_image: hillshade</strong></p>\n"}, {"fullname": "cpom.areas.definitions.greenland_hs.area_definition", "modulename": "cpom.areas.definitions.greenland_hs", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;greenland&#x27;, &#x27;background_image&#x27;: [&#x27;ibcao_bathymetry&#x27;, &#x27;hillshade&#x27;], &#x27;background_image_alpha&#x27;: [0.14, 0.18], &#x27;background_color&#x27;: &#x27;white&#x27;}"}, {"fullname": "cpom.areas.definitions.greenland_hs_fi", "modulename": "cpom.areas.definitions.greenland_hs_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<em>*mask: greenland_bedmachine_v3_grid_mask[3] == floating ice *</em></p>\n"}, {"fullname": "cpom.areas.definitions.greenland_hs_fi.area_definition", "modulename": "cpom.areas.definitions.greenland_hs_fi", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Greenland [floating ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;greenland_hs&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;greenland_bedmachine_v3_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [3], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.greenland_hs_is", "modulename": "cpom.areas.definitions.greenland_hs_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<strong>mask: greenland_bedmachine_v3_grid_mask[2] == grounded ice sheet</strong></p>\n"}, {"fullname": "cpom.areas.definitions.greenland_hs_is.area_definition", "modulename": "cpom.areas.definitions.greenland_hs_is", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Greenland [grounded ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;greenland_hs&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;greenland_bedmachine_v3_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [2], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.greenland_is", "modulename": "cpom.areas.definitions.greenland_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<strong>Data mask: grounded ice from bedmachine v3</strong></p>\n"}, {"fullname": "cpom.areas.definitions.greenland_is.area_definition", "modulename": "cpom.areas.definitions.greenland_is", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Greenland [grounded ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;greenland&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;greenland_bedmachine_v3_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [2], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.vostok", "modulename": "cpom.areas.definitions.vostok", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.vostok.area_definition", "modulename": "cpom.areas.definitions.vostok", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Lake Vostok, E. Antarctica&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: -63.15, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: 105.0, &#x27;centre_lat&#x27;: -77.2, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 400, &#x27;height_km&#x27;: 380, &#x27;min_elevation&#x27;: 3478.0, &#x27;max_elevation&#x27;: 3529.0, &#x27;minlon&#x27;: 100.0, &#x27;maxlon&#x27;: 107.0, &#x27;minlat&#x27;: -78.7, &#x27;maxlat&#x27;: -74.0, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;basin_numbers&#x27;: [4], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [0.0, 0.16, 0.67, 0.67], &#x27;simple_axes&#x27;: [0.09, 0.14, 0.76, 0.76], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;moa&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;high&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: False, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: False, &#x27;use_cartopy_coastline&#x27;: &#x27;no&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.29, 0.89), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.36, 0.92), &#x27;mask_long_name_position&#x27;: (0.26, 0.86), &#x27;mask_long_name_position_simple&#x27;: (0.36, 0.9), &#x27;mask_long_name_fontsize&#x27;: 10, &#x27;varname_annotation_position_xy&#x27;: (0.04, 0.9), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.91), &#x27;position_stats_manually&#x27;: True, &#x27;nvals_position&#x27;: (0.0, 0.06), &#x27;min_position&#x27;: (0.0, 0.04), &#x27;max_position&#x27;: (0.0, 0.02), &#x27;mean_position&#x27;: (0.2, 0.06), &#x27;median_position&#x27;: (0.2, 0.04), &#x27;mad_position&#x27;: (0.4, 0.06), &#x27;stdev_position&#x27;: (0.4, 0.04), &#x27;stats_position_x_offset&#x27;: 0, &#x27;stats_position_y_offset&#x27;: 0, &#x27;stats_position_x_offset_simple&#x27;: -0.13, &#x27;stats_position_y_offset_simple&#x27;: 0, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.08, 0.05, 0.55, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.22, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: range(96, 114, 2), &#x27;latitude_gridlines&#x27;: [-79.0, -78.5, -78.0, -77.5, -77.0, -76.5, -76.0, -75.5], &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: -58.3, &#x27;labels_at_top&#x27;: True, &#x27;labels_at_bottom&#x27;: False, &#x27;labels_at_left&#x27;: True, &#x27;labels_at_right&#x27;: False, &#x27;show_scalebar&#x27;: True, &#x27;mapscale&#x27;: [111, -76.8, 106, -77.5, 100, &#x27;white&#x27;, 6], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.705, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.86, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.75, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.69, 0.7, 0.25, 0.25], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [-50, -70], &#x27;bad_data_longitude_lines&#x27;: [0, 60, 120, 180, -120, -60], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (0.75, 0.2), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.tests", "modulename": "cpom.areas.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.areas.tests.test_areas", "modulename": "cpom.areas.tests.test_areas", "kind": "module", "doc": "<p>pytests for clev2er.utils.areas.areas.py</p>\n"}, {"fullname": "cpom.areas.tests.test_areas.pytestmark", "modulename": "cpom.areas.tests.test_areas", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;requires_external_data&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.areas.tests.test_areas.test_bad_area_name", "modulename": "cpom.areas.tests.test_areas", "qualname": "test_bad_area_name", "kind": "function", "doc": "<p>pytest to check for handling of invalid area names</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.tests.test_areas.test_good_area_name", "modulename": "cpom.areas.tests.test_areas", "qualname": "test_good_area_name", "kind": "function", "doc": "<p>pytest to check for handling of valid area names</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.backgrounds", "modulename": "cpom.backgrounds", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.backgrounds.backgrounds", "modulename": "cpom.backgrounds.backgrounds", "kind": "module", "doc": "<p>Class to manage background images for polar plotting</p>\n"}, {"fullname": "cpom.backgrounds.backgrounds.log", "modulename": "cpom.backgrounds.backgrounds", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.backgrounds.backgrounds (WARNING)&gt;"}, {"fullname": "cpom.backgrounds.backgrounds.all_backgrounds", "modulename": "cpom.backgrounds.backgrounds", "qualname": "all_backgrounds", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;basic_land&#x27;: [&#x27;antarctica_is&#x27;], &#x27;cartopy_stock&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;cartopy_stock_ocean&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;arcgis_shaded_relief&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;bluemarble&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;natural_earth_cbh&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;natural_earth_cbh_oceanmasked&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;natural_earth_cbh_ocean&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;natural_earth_gray&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;natural_earth1&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;stamen&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;natural_earth_faded&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;moa&#x27;: [&#x27;antarctica_is&#x27;, &#x27;vostok&#x27;], &#x27;cpom_dem&#x27;: [&#x27;antarctica_is&#x27;], &#x27;awi_gis_dem&#x27;: [&#x27;greenland&#x27;], &#x27;arcticdem_1km&#x27;: [&#x27;arctic&#x27;], &#x27;rema_dem_1km&#x27;: [&#x27;antarctica_is&#x27;], &#x27;grn_s1_mosaic&#x27;: [&#x27;greenland&#x27;], &#x27;hillshade&#x27;: [&#x27;antarctica_is&#x27;, &#x27;greenland&#x27;], &#x27;ant_iceshelves&#x27;: [&#x27;antarctica_is&#x27;], &#x27;ibcso_bathymetry&#x27;: [&#x27;antarctica_is&#x27;], &#x27;ibcao_bathymetry&#x27;: [&#x27;arctic&#x27;]}"}, {"fullname": "cpom.backgrounds.backgrounds.all_background_resolutions", "modulename": "cpom.backgrounds.backgrounds", "qualname": "all_background_resolutions", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;low&#x27;, &#x27;medium&#x27;, &#x27;high&#x27;, &#x27;vhigh&#x27;, &#x27;vvhigh&#x27;]"}, {"fullname": "cpom.backgrounds.backgrounds.Background", "modulename": "cpom.backgrounds.backgrounds", "qualname": "Background", "kind": "class", "doc": "<p>class to handle background images</p>\n"}, {"fullname": "cpom.backgrounds.backgrounds.Background.__init__", "modulename": "cpom.backgrounds.backgrounds", "qualname": "Background.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  background name</li>\n<li><strong>area (str):</strong>  area name from cpom.areas.areas</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">area</span></span>)</span>"}, {"fullname": "cpom.backgrounds.backgrounds.Background.name", "modulename": "cpom.backgrounds.backgrounds", "qualname": "Background.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.backgrounds.backgrounds.Background.moa_image", "modulename": "cpom.backgrounds.backgrounds", "qualname": "Background.moa_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.backgrounds.backgrounds.Background.moa_zimage", "modulename": "cpom.backgrounds.backgrounds", "qualname": "Background.moa_zimage", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.backgrounds.backgrounds.Background.load", "modulename": "cpom.backgrounds.backgrounds", "qualname": "Background.load", "kind": "function", "doc": "<p>param: ax : axis\nparam: dataprj : cartopy coordinate reference system (crs)\nparam: background: replace default background image (thisarea.background_image) for plot\nwith one of the available backgrounds</p>\n\n<p>cartopy_stock : stock image for Cartopy, uses a downgraded natural earth image.\nOnly one resolution\ncartopy_stock_ocean : stock image for Cartopy with land blanked out in a single colour.\nOnly one resolution\narcgis_shaded_relief : resolution (low, medium, default is high) : : ArcGIS World Shaded\nRelief tiles\ngoogle_satellite : resolution (low, medium, high, vhigh, vvhigh (default)\nbluemarble : resolution (low, medium, high) : NASA Blue Marble world image\nnatural_earth_cbh : resolution (low, medium, default is high): Cross Blended Hypso with\nShaded Relief and Water\n<a href=\"https://www.naturalearthdata.com/downloads/50m-raster-data/50m-cross-blend-hypso/\">https://www.naturalearthdata.com/downloads/50m-raster-data/50m-cross-blend-hypso/</a>\nnatural_earth_cbh_oceanmasked : resolution (low, medium, default is high) : as for\nnatural_earth_cbh, but with oceans set to white\nnatural_earth_cbh_ocean : resolution (low, medium, high)\nnatural_earth_gray : resolution (low, medium, high):  Gray Earth with Shaded Relief,\nHypsography, and Ocean Bottom :\n<a href=\"https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/raster/GRAY_50M_SR_OB.zip\">https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/raster/GRAY_50M_SR_OB.zip</a>\nnatural_earth1 : resolution (low, medium, default is high): Natural Earth I with Shaded\nRelief and Water :\n<a href=\"https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/raster/NE1_50M_SR_W.zip\">https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/raster/NE1_50M_SR_W.zip</a>\nstamen : resolution (low, medium, default is high):terrain-background\n<a href=\"http://maps.stamen.com/terrain-background/#12/37.7706/-122.3782\">http://maps.stamen.com/terrain-background/#12/37.7706/-122.3782</a>\nnatural_earth_faded\nbasic_land : resolution (low, medium, high) : basic ocean and land plot\nmoa : MODIS Mosaic of Antarctica 2008-2009 (MOA2009) Image Map at 750m resolution,\ngray scale\ncpom_dem : CPOM Antarctic DEM at 1km resolution, gray scale\nhillshade : hillshade_params={\"azimuth\": f,\u201dpitch\": f,\u201ddem\": \u201cstr\u201d,\u201dalpha\": f}\nant_iceshelves\nibcso_bathymetry\nibcao_bathymetry\nawi_gis_dem : Greenland DEM from AWI 2014\ngrn_s1_mosaic : resolution (low, medium, high, vhigh)\narcticdem_1km :  ArcticDEM at 1km resolution\nrema_dem_1km : REMA Antarctic DEM at 1km resolution\n        '\nparam: resolution : 'low', 'medium','high','vhigh','vvhigh', if None,\nself.thisarea.background_image_resolution is used\nalpha:  set the background transparency (alpha), 0..1. If None,\nself.thisarea.background_image_alpha is used</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span>,</span><span class=\"param\">\t<span class=\"n\">dataprj</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_features</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">hillshade_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zorder</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.backgrounds.tests", "modulename": "cpom.backgrounds.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.backgrounds.tests.test_backgrounds", "modulename": "cpom.backgrounds.tests.test_backgrounds", "kind": "module", "doc": "<p>pytest tests for cpom.backgrounds</p>\n"}, {"fullname": "cpom.backgrounds.tests.test_backgrounds.log", "modulename": "cpom.backgrounds.tests.test_backgrounds", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.backgrounds.tests.test_backgrounds (INFO)&gt;"}, {"fullname": "cpom.backgrounds.tests.test_backgrounds.pytestmark", "modulename": "cpom.backgrounds.tests.test_backgrounds", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;non_core&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.backgrounds.tests.test_backgrounds.test_backgrounds", "modulename": "cpom.backgrounds.tests.test_backgrounds", "qualname": "test_backgrounds", "kind": "function", "doc": "<p>test purpose: for each background, plot background in one or more test areas\nas specified in  cpom.backgrounds.backgrounds.all_backgrounds which is a dict\ncontaining background name as key, and a list of relevant areas to test</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">background_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tmp_path_factory</span><span class=\"p\">:</span> <span class=\"n\">_pytest</span><span class=\"o\">.</span><span class=\"n\">tmpdir</span><span class=\"o\">.</span><span class=\"n\">TempPathFactory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems", "modulename": "cpom.dems", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems", "modulename": "cpom.dems.dems", "kind": "module", "doc": "<p>cpom.dems.dems.py</p>\n\n<p>DEM class to read and interpolate DEMs</p>\n"}, {"fullname": "cpom.dems.dems.log", "modulename": "cpom.dems.dems", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.dems.dems (WARNING)&gt;"}, {"fullname": "cpom.dems.dems.dem_list", "modulename": "cpom.dems.dems", "qualname": "dem_list", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;awi_ant_1km&#x27;, &#x27;awi_grn_1km&#x27;, &#x27;awi_ant_1km_grounded&#x27;, &#x27;awi_ant_1km_floating&#x27;, &#x27;rema_ant_1km&#x27;, &#x27;rema_ant_1km_zarr&#x27;, &#x27;rema_ant_1km_v2&#x27;, &#x27;rema_ant_1km_v2_zarr&#x27;, &#x27;rema_ant_200m&#x27;, &#x27;rema_ant_200m_zarr&#x27;, &#x27;rema_gapless_100m&#x27;, &#x27;rema_gapless_100m_zarr&#x27;, &#x27;rema_gapless_1km&#x27;, &#x27;rema_gapless_1km_zarr&#x27;, &#x27;arcticdem_1km&#x27;, &#x27;arcticdem_1km_zarr&#x27;, &#x27;arcticdem_1km_v4.1&#x27;, &#x27;arcticdem_1km_greenland_v4.1&#x27;, &#x27;arcticdem_1km_greenland_v4.1_zarr&#x27;, &#x27;arcticdem_100m_greenland&#x27;, &#x27;arcticdem_100m_greenland_v4.1&#x27;, &#x27;arcticdem_100m_greenland_v4.1_zarr&#x27;]"}, {"fullname": "cpom.dems.dems.Dem", "modulename": "cpom.dems.dems", "qualname": "Dem", "kind": "class", "doc": "<p>class to load and interpolate Polar DEMs</p>\n"}, {"fullname": "cpom.dems.dems.Dem.__init__", "modulename": "cpom.dems.dems", "qualname": "Dem.__init__", "kind": "function", "doc": "<p>class initialization function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  DEM name id, must be in global dem_list</li>\n<li><strong>filled (bool, optional):</strong>  Use filled version of DEM if True. Defaults to True.</li>\n<li><strong>config (dict, optional):</strong>  configuration dictionary, defaults to None</li>\n<li><strong>dem_dir (str, optional):</strong>  path of directory containing DEM. Defaults to None</li>\n<li><strong>store_in_shared_memory (bool, optional):</strong>  stores/accesses zdem array in SharedMemory</li>\n<li><strong>thislog (logging.Logger|None, optional):</strong>  attach to a different log instance</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  when name not in global dem_list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dem_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">store_in_shared_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.dems.dems.Dem.name", "modulename": "cpom.dems.dems", "qualname": "Dem.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.crs_wgs", "modulename": "cpom.dems.dems", "qualname": "Dem.crs_wgs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.config", "modulename": "cpom.dems.dems", "qualname": "Dem.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.dem_dir", "modulename": "cpom.dems.dems", "qualname": "Dem.dem_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.filled", "modulename": "cpom.dems.dems", "qualname": "Dem.filled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.reference_year", "modulename": "cpom.dems.dems", "qualname": "Dem.reference_year", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.xdem", "modulename": "cpom.dems.dems", "qualname": "Dem.xdem", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.ydem", "modulename": "cpom.dems.dems", "qualname": "Dem.ydem", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.zdem", "modulename": "cpom.dems.dems", "qualname": "Dem.zdem", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.zdem_flip", "modulename": "cpom.dems.dems", "qualname": "Dem.zdem_flip", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.mindemx", "modulename": "cpom.dems.dems", "qualname": "Dem.mindemx", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.mindemy", "modulename": "cpom.dems.dems", "qualname": "Dem.mindemy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.binsize", "modulename": "cpom.dems.dems", "qualname": "Dem.binsize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.store_in_shared_memory", "modulename": "cpom.dems.dems", "qualname": "Dem.store_in_shared_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.shape", "modulename": "cpom.dems.dems", "qualname": "Dem.shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.dtype", "modulename": "cpom.dems.dems", "qualname": "Dem.dtype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.shared_mem", "modulename": "cpom.dems.dems", "qualname": "Dem.shared_mem", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cpom.dems.dems.Dem.shared_mem_child", "modulename": "cpom.dems.dems", "qualname": "Dem.shared_mem_child", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.npz_type", "modulename": "cpom.dems.dems", "qualname": "Dem.npz_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.zarr_type", "modulename": "cpom.dems.dems", "qualname": "Dem.zarr_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.get_geotiff_extent", "modulename": "cpom.dems.dems", "qualname": "Dem.get_geotiff_extent", "kind": "function", "doc": "<p>Get info from GeoTIFF on its extent</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path of GeoTIFF file</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  _description_</li>\n<li><strong>IOError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(int,int,int,int,int,int,int): width,height,top_left,top_right,bottom_left,\n  bottom_right,pixel_width</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.get_filename", "modulename": "cpom.dems.dems", "qualname": "Dem.get_filename", "kind": "function", "doc": "<p>Find the path of the DEM file from dir and file names :\nFor the directory, it is chosen in order of preference:\na) self.config[\"dem_dirs\"][self.name], or\nb) supplied self.dem_dir, or\nc) default_dir\nThe file name is:\nfilename: is self.filled use filled_filename</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>default_dir (str):</strong>  default dir to find DEM file names</li>\n<li><strong>filename (str):</strong>  file name of DEM (not filled)</li>\n<li><strong>filled_filename (str):</strong>  file name of DEM (not filled)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str : path of DEM file</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>OSError :</strong>  directory or file not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filled_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.clean_up", "modulename": "cpom.dems.dems", "qualname": "Dem.clean_up", "kind": "function", "doc": "<p>Free up, close or release any shared memory or other resources associated\nwith DEM</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.load_npz", "modulename": "cpom.dems.dems", "qualname": "Dem.load_npz", "kind": "function", "doc": "<p>Load DEM from npz format file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>npz_file (str):</strong>  path of npz file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">npz_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.load_zarr", "modulename": "cpom.dems.dems", "qualname": "Dem.load_zarr", "kind": "function", "doc": "<p>Load a .zarr file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>demfile (str):</strong>  path of .zarr file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">demfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.load_geotiff", "modulename": "cpom.dems.dems", "qualname": "Dem.load_geotiff", "kind": "function", "doc": "<p>Load a GeoTIFF file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>demfile (str):</strong>  path of GeoTIFF</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">demfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.load", "modulename": "cpom.dems.dems", "qualname": "Dem.load", "kind": "function", "doc": "<p>load the DEM</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: DEM loaded ok (True), failed (False)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.get_segment", "modulename": "cpom.dems.dems", "qualname": "Dem.get_segment", "kind": "function", "doc": "<p>return a cropped segment of the DEM, flattened or as a grid</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>segment_bounds (List):</strong>  [(minx,maxx),(miny,maxy)]</li>\n<li><strong>grid_xy (bool, optional):</strong>  return segment as a grid. Defaults to True.</li>\n<li><strong>flatten (bool, optional):</strong>  return segment as flattened list. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[np.ndarray, np.ndarray, np.ndarray]: (xdem,ydem,zdem)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">segment_bounds</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">grid_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flatten</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.chunked_interpolation", "modulename": "cpom.dems.dems", "qualname": "Dem.chunked_interpolation", "kind": "function", "doc": "<p>Interpolate DEM in chunks to handle large datasets efficiently.</p>\n\n<p>This function performs interpolation on a DEM stored in a Zarr array by\nextracting relevant chunks and creating a sub-grid for interpolation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Array of x coordinates in the DEM's projection (in meters).</li>\n<li><strong>y (np.ndarray):</strong>  Array of y coordinates in the DEM's projection (in meters).</li>\n<li><strong>myydem (np.ndarray):</strong>  Flipped y coordinates corresponding to the DEM grid.</li>\n<li><strong>xdem (np.ndarray):</strong>  x coordinates corresponding to the DEM grid.</li>\n<li><strong>method (str):</strong>  Interpolation method to use ('linear', 'nearest', etc.).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Interpolated DEM elevation values at the specified coordinates.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">myydem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xdem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.interp_dem", "modulename": "cpom.dems.dems", "qualname": "Dem.interp_dem", "kind": "function", "doc": "<p>Interpolate DEM to return elevation values corresponding to\n   cartesian x,y in DEM's projection or lat,lon values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x cartesian coordinates in the DEM's projection in m, or lat values</li>\n<li><strong>y (np.ndarray):</strong>  x cartesian coordinates in the DEM's projection in m, or lon values</li>\n<li><strong>method (str, optional):</strong>  linear, nearest, splinef2d. Defaults to \"linear\".</li>\n<li><strong>xy_is_latlon (bool, optional):</strong>  if True, x,y are lat, lon values. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: interpolated dem elevation values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;linear&#39;</span>, </span><span class=\"param\"><span class=\"n\">xy_is_latlon</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.gaussian_smooth", "modulename": "cpom.dems.dems", "qualname": "Dem.gaussian_smooth", "kind": "function", "doc": "<p>perform a gaussian smooth on the current loaded DEM\nsigma : degree of smoothing, def=1.0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.hillshade", "modulename": "cpom.dems.dems", "qualname": "Dem.hillshade", "kind": "function", "doc": "<p>Convert the DEM 'z_dem' values to a hillshade value between 0..255\nazimuth: angle in degrees (0..360)\npitch : angle in degrees (0..90)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">azimuth</span><span class=\"o\">=</span><span class=\"mi\">225</span>, </span><span class=\"param\"><span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"mi\">45</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.tests", "modulename": "cpom.dems.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.tests.test_dems", "modulename": "cpom.dems.tests.test_dems", "kind": "module", "doc": "<p>pytests for Dem class</p>\n"}, {"fullname": "cpom.dems.tests.test_dems.pytestmark", "modulename": "cpom.dems.tests.test_dems", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;requires_external_data&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.dems.tests.test_dems.log", "modulename": "cpom.dems.tests.test_dems", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.dems.tests.test_dems (WARNING)&gt;"}, {"fullname": "cpom.dems.tests.test_dems.test_dems", "modulename": "cpom.dems.tests.test_dems", "qualname": "test_dems", "kind": "function", "doc": "<p>load DEMs and test interpolated elevations to tolerance of 1m</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dem_name (str):</strong>  _description_</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>elevs (np.ndarray:</strong>  expected elevation values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dem_name</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">elevs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.tests.test_dems.test_dems_zarr", "modulename": "cpom.dems.tests.test_dems", "qualname": "test_dems_zarr", "kind": "function", "doc": "<p>load Zarr format DEMs and test interpolated elevations to tolerance of 1m</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dem_name_zarr (str):</strong>  _description_</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>elevs (np.ndarray:</strong>  expected elevation values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dem_name_zarr</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">elevs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.tests.test_dems.test_compare_dems_zarr_and_tiff", "modulename": "cpom.dems.tests.test_dems", "qualname": "test_compare_dems_zarr_and_tiff", "kind": "function", "doc": "<p>Compare zarr and tiff DEMs to a tolerance of 0.001m</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dem_name (str):</strong>  name of Dem object using Tiff format</li>\n<li><strong>dem_name_zarr (str):</strong>  name of Dem object using Zarr format</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>elevs (np.ndarray:</strong>  expected elevation values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dem_name</span>, </span><span class=\"param\"><span class=\"n\">dem_name_zarr</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks", "modulename": "cpom.masks", "kind": "module", "doc": "<p>cpom.masks</p>\n\n<h1 id=\"class-to-support-area-masks\">class to support area Masks</h1>\n"}, {"fullname": "cpom.masks.masks", "modulename": "cpom.masks.masks", "kind": "module", "doc": "<p>Class for area masking</p>\n"}, {"fullname": "cpom.masks.masks.log", "modulename": "cpom.masks.masks", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.masks.masks (WARNING)&gt;"}, {"fullname": "cpom.masks.masks.mask_list", "modulename": "cpom.masks.masks", "qualname": "mask_list", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;greenland_area_xylimits_mask&#x27;, &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;greenland_bedmachine_v3_grid_mask&#x27;, &#x27;antarctica_iceandland_dilated_10km_grid_mask&#x27;, &#x27;greenland_iceandland_dilated_10km_grid_mask&#x27;, &#x27;antarctic_grounded_and_floating_2km_grid_mask&#x27;, &#x27;greenland_icesheet_2km_grid_mask&#x27;, &#x27;antarctic_icesheet_2km_grid_mask_rignot2016&#x27;, &#x27;greenland_icesheet_2km_grid_mask_rignot2016&#x27;, &#x27;greenland_icesheet_2km_grid_mask_mouginot2019&#x27;]"}, {"fullname": "cpom.masks.masks.Mask", "modulename": "cpom.masks.masks", "qualname": "Mask", "kind": "class", "doc": "<p>class to handle area masking</p>\n"}, {"fullname": "cpom.masks.masks.Mask.__init__", "modulename": "cpom.masks.masks", "qualname": "Mask.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_name (str):</strong>  mask name, must be in global mask_list</li>\n<li><strong>basin_numbers (list[int], optional):</strong>  list of grid values to select from grid masks\ndef=None</li>\n<li><strong>mask_path (str, optional):</strong>  override default path of mask data file</li>\n<li><strong>store_in_shared_memory (bool, optional):</strong>  stores/access mask array in SharedMemory</li>\n<li><strong>thislog (logging.Logger|None, optional):</strong>  attach to a different log instance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mask_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mask_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">store_in_shared_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.masks.masks.Mask.nomask", "modulename": "cpom.masks.masks", "qualname": "Mask.nomask", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.mask_name", "modulename": "cpom.masks.masks", "qualname": "Mask.mask_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.mask_long_name", "modulename": "cpom.masks.masks", "qualname": "Mask.mask_long_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.mask_grid", "modulename": "cpom.masks.masks", "qualname": "Mask.mask_grid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cpom.masks.masks.Mask.basin_numbers", "modulename": "cpom.masks.masks", "qualname": "Mask.basin_numbers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.store_in_shared_memory", "modulename": "cpom.masks.masks", "qualname": "Mask.store_in_shared_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.shared_mem", "modulename": "cpom.masks.masks", "qualname": "Mask.shared_mem", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cpom.masks.masks.Mask.shared_mem_child", "modulename": "cpom.masks.masks", "qualname": "Mask.shared_mem_child", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.polygons", "modulename": "cpom.masks.masks", "qualname": "Mask.polygons", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.polygons_lon", "modulename": "cpom.masks.masks", "qualname": "Mask.polygons_lon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.polygons_lat", "modulename": "cpom.masks.masks", "qualname": "Mask.polygons_lat", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.polygon", "modulename": "cpom.masks.masks", "qualname": "Mask.polygon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.polygon_lon", "modulename": "cpom.masks.masks", "qualname": "Mask.polygon_lon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.polygon_lat", "modulename": "cpom.masks.masks", "qualname": "Mask.polygon_lat", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.mask_type", "modulename": "cpom.masks.masks", "qualname": "Mask.mask_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.crs_wgs", "modulename": "cpom.masks.masks", "qualname": "Mask.crs_wgs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.xy_to_lonlat_transformer", "modulename": "cpom.masks.masks", "qualname": "Mask.xy_to_lonlat_transformer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.lonlat_to_xy_transformer", "modulename": "cpom.masks.masks", "qualname": "Mask.lonlat_to_xy_transformer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.load_netcdf_mask", "modulename": "cpom.masks.masks", "qualname": "Mask.load_netcdf_mask", "kind": "function", "doc": "<p>load mask array from netcdf grid masks</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_file (str) :</strong>  path of netcdf mask file</li>\n<li><strong>flip (bool, optional):</strong>  _description_. Defaults to True.</li>\n<li><strong>nc_mask_var (str):</strong>  variable name in netcdf file containing mask data, def='mask'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">flip</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">nc_mask_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mask&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.masks.Mask.load_npz_mask", "modulename": "cpom.masks.masks", "qualname": "Mask.load_npz_mask", "kind": "function", "doc": "<p>load mask array from npz grid masks</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_file (str) :</strong>  path of npz mask file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.masks.Mask.points_inside", "modulename": "cpom.masks.masks", "qualname": "Mask.points_inside", "kind": "function", "doc": "<p>Given a list of lat,lon or x,y points, find the points that are inside the current mask</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray|list[float]):</strong>  list of latitude points</li>\n<li><strong>lons (np.ndarray|list[float]):</strong>  list of longitude points</li>\n<li><strong>basin_numbers (list[int,], optional):</strong>  list of basin numbers. Defaults to None.</li>\n<li><strong>inputs_are_xy (bool, optional):</strong>  lats, lons are already transformed to x,y.\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>inmask(np.ndarray) : boolean array same size as input list, indicating whether\n  inputs points are inside (True) or outside (False) mask\n  n_inside (int) : number inside mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.masks.Mask.grid_mask_values", "modulename": "cpom.masks.masks", "qualname": "Mask.grid_mask_values", "kind": "function", "doc": "<p>Return the grid mask value at each input lats, lons interpolated grid location</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  array of latitude (N) values in degrees</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude (E) values in degrees</li>\n<li><strong>inputs_are_xy (bool):</strong>  inputs are x,y values (m) instead of latitude, longitude values</li>\n<li><strong>unknown_value (int):</strong>  value returned for locations outside mask, or where mask\ngrid includes an unclassified value (unknown_value will be\nsubstituted)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>mask_values (np.ndarray): grid mask value at each input lats, lons interpolated\n                       grid location or np.NaN if outside area</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">unknown_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.masks.Mask.latlon_to_xy", "modulename": "cpom.masks.masks", "qualname": "Mask.latlon_to_xy", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lats</strong>:  latitude points in degs</li>\n<li><strong>lons</strong>:  longitude points in degrees E</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>x,y in polar stereo projection of mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.masks.Mask.clean_up", "modulename": "cpom.masks.masks", "qualname": "Mask.clean_up", "kind": "function", "doc": "<p>Free up, close or release any shared memory or other resources associated\nwith mask</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.tests", "modulename": "cpom.masks.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.tests.test_masks", "modulename": "cpom.masks.tests.test_masks", "kind": "module", "doc": "<p>pytests for masks.py: Mask class</p>\n"}, {"fullname": "cpom.masks.tests.test_masks.pytestmark", "modulename": "cpom.masks.tests.test_masks", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;requires_external_data&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.masks.tests.test_masks.test_mask_points_inside", "modulename": "cpom.masks.tests.test_masks", "qualname": "test_mask_points_inside", "kind": "function", "doc": "<p>test of Mask.points_inside()</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_name (str):</strong>  name of Mask</li>\n<li><strong>indices_inside (list[int]):</strong>  list of indices inside mask, or empty list []</li>\n<li><strong>num_inside (int):</strong>  number of points inside mask</li>\n<li><strong>lats (_type_):</strong>  _description_</li>\n<li><strong>lons (_type_):</strong>  _description_</li>\n<li><strong>grid_values (_type_):</strong>  _description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask_name</span>, </span><span class=\"param\"><span class=\"n\">indices_inside</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">grid_values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.tests.test_masks.test_mask_grid_mask_values", "modulename": "cpom.masks.tests.test_masks", "qualname": "test_mask_grid_mask_values", "kind": "function", "doc": "<p>test of Mask.grid_mask_values()</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_name (str):</strong>  mask name</li>\n<li><strong>lats (np.ndarray):</strong>  array of latitude N values in degs</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude E values in degs</li>\n<li><strong>expected_surface_type (list[int or nan]):</strong>  list of expected surface type values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask_name</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">expected_surface_type</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.tests.test_masks.test_mask_loading", "modulename": "cpom.masks.tests.test_masks", "qualname": "test_mask_loading", "kind": "function", "doc": "<p>test loading mask file using non-default path</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();