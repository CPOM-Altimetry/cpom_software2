window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "cpom", "modulename": "cpom", "kind": "module", "doc": "<p>Automated documentation for the CPOM Software Package, hosted on GitHub at\n<a href=\"https://github.com/CPOM-Altimetry/cpom_software2\">github.com/CPOM-Altimetry/cpom_software2</a>.</p>\n\n<h1 id=\"installation\">Installation</h1>\n\n<h2 id=\"installation-of-the-cpom-software-package\">Installation of the CPOM Software Package</h2>\n\n<p>Note that the package has been tested on Linux and MacOS systems. Use on\nother operating systems is possible but may require additional install steps.</p>\n\n<p>Make sure you have <em>git</em> installed on your target system.</p>\n\n<p>Clone the git public repository in to a suitable directory on your system.\nThis will create a directory called <strong>/cpom_software2</strong> in your current directory.</p>\n\n<p>with https:\n<code>git clone https://github.com/CPOM-Altimetry/cpom_software2.git</code></p>\n\n<p>or with ssh:\n<code>git clone git@github.com:CPOM-Altimetry/cpom_software2.git</code></p>\n\n<p>or with the GitHub CLI:\n<code>gh repo clone CPOM-Altimetry/cpom_software2</code></p>\n\n<h2 id=\"quick-setup\">Quick Setup</h2>\n\n<p>This quick setup runs a script to do all the setup work.\nIt is recommended in most cases (tested on macos, linux)</p>\n\n<p>Run the install script:</p>\n\n<pre><code>cd cpom_software2\n./install.sh\n</code></pre>\n\n<p>This will install </p>\n\n<ul>\n<li>python 3.12</li>\n<li>poetry</li>\n<li>project packages (using poetry)</li>\n<li>create a file ./setup_env.sh which is used to setup the correct environment variables</li>\n</ul>\n\n<h3 id=\"load-the-virtual-environment\">Load the Virtual Environment</h3>\n\n<p>Now you are all setup to go. Whenever you want to run any cpom software tools you\nmust first activate the virtual environment as follows:</p>\n\n<pre><code>cd $CPOM_SOFTWARE_DIR\nsource activate.sh\n</code></pre>\n\n<p>or the identical</p>\n\n<pre><code>. activate.sh\n</code></pre>\n\n<h1 id=\"tool-list\">Tool List</h1>\n\n<p>This section provides a list of current command line tools available in the\ncpom software v2. This is in addition to in-code usage of the cpom v2 modules.</p>\n\n<ul>\n<li><p><strong>plot_map.py</strong>\ngeneric program to plot parameter(s) from netcdf files(s) on cryosphere maps.\nWorks with any netcdf file(s) containing latitude, longitude and parameter data,\nbut also has knowledge of most common altimetry formats to self discover lat,lon names. \nContains command line options for many of the cpom Polarplot.plot_points() class function.\nSee <code>cpom.altimetry.tools.plot_map</code> for all options.</p></li>\n<li><p><strong>find_files_in_area.py</strong> \nidentify netcdf files within a directory (or recursive sub-dir) containing lat,lon \nlocations within a cpom area mask or within a radius of a specified lat,lon point. \nFor example you could use it to list CS2 L1b files passing over the Greenland ice \nsheet for validation purposes. Optionally plots the tracks as well. \nFor all the many search options see:\n<code>cpom.altimetry.tools.find_files_in_area</code> </p></li>\n</ul>\n\n<h1 id=\"development\">Development</h1>\n\n<h2 id=\"development-process\">Development Process</h2>\n\n<p>This section details the main development processes to contribute to the CPOM software.</p>\n\n<ul>\n<li><p>Create a new feature branch</p>\n\n<pre><code>git checkout -b yourinitials_featurename\n</code></pre></li>\n<li><p>Create new local commits as you develop your feature</p>\n\n<pre><code>git commit -a -m \"commit description\"\n</code></pre>\n\n<p>During the git commit the automated code checks (lint, mypy, ruff, etc) should run \n(using the pre-installed <strong>pre-commit</strong> tool). These must pass in order for the \ncommit to succeed. \nIf these checks do not run then your <strong>pre-commit</strong> setup (during installation) is not correct.</p></li>\n<li><p>push your branch to GitHub</p>\n\n<pre><code>git push\n</code></pre></li>\n<li><p>Create a <strong>Pull Request (PR)</strong> on GitHub for your new branch.</p>\n\n<p>This just starts a dialog on your new feature. You can continue to develop the feature with \nadditional commits and pushes.</p>\n\n<p>This will also automatically run the <strong>GitHub Actions</strong> tests on your full branch. \nThis runs the static code checks (as per pre-commit and also all the pytests in the full branch). \nThe success or failure (including reasons) will be reported in the PR page.</p></li>\n<li><p>Finally, once your feature is fully tested request a review on GitHub in your Pull Request page.</p></li>\n<li><p>Once the review is passed, the feature will be merged in to the main branch.</p></li>\n</ul>\n\n<h2 id=\"test-development\">Test Development</h2>\n\n<p>Each module should have an associated pytest unit or integration test. Place these in\na <strong>tests/</strong> directory inside your module directory. ie:</p>\n\n<pre><code>mymodule.py\ntests/test_mymodule.py\n</code></pre>\n\n<p>If your test accesses data outside the repository then you need to exclude\nit from running on GitHub Actions CI. To do this just include one of the following\nat the top of your test code:</p>\n\n<p><code>pytestmark = pytest.mark.requires_external_data</code></p>\n\n<p>or</p>\n\n<p><code>pytestmark = pytest.mark.non_core</code></p>\n\n<h1 id=\"automatic-documentation\">Automatic Documentation</h1>\n\n<p>Documentation is automatically generated to this page \n<a href=\"https://cpom-altimetry.github.io/cpom_software2\">https://cpom-altimetry.github.io/cpom_software2</a> \nfrom docstrings in the code when the <strong>main</strong> branch is updated on GitHub. \nA few things to note:</p>\n\n<ul>\n<li>docstrings should use Markdown syntax for basic formatting. See \n<a href=\"https://www.markdownguide.org/basic-syntax\">markdownguide.org/basic-syntax</a>.</li>\n<li>within each directory there should be a __init__.py file. The docstring in these files\nare displayed as the introduction page of that module or set of modules.</li>\n<li>the top level page (ie this page) is in <strong>src/cpom/__init__.py</strong></li>\n<li>you can display images within docstrings by putting the images in \n<strong>docs/images/</strong>some_image.png and then in the module's docstring put\n<code>![](/cpom_software2/images/some_image.png \"\")</code>. Note you should do a <code>git add docs/images</code>\nwithin your branch as well so that the image is included. See the docstring example in\n<code>cpom.altimetry.tools.plot_map</code></li>\n<li>you can create diagrams using <strong>mermaid</strong> syntax within the docstring. \nSee this \n<a href=\"https://github.blog/developer-skills/github/include-diagrams-markdown-files-mermaid/\">link</a>.</li>\n<li><strong>documentation is only included in the web page when the main branch is updated</strong> so\nyou won't see any update when you modify a separate branch. Your docstrings will only be\nprocessed after a successful pull request to the main branch.</li>\n<li>further info on how auto-documentation works from docstrings and more advanced syntax\nat the <strong>pdoc</strong> documentation: <a href=\"https://pdoc.dev/docs/pdoc.html#what-is-pdoc\">https://pdoc.dev/docs/pdoc.html#what-is-pdoc</a></li>\n</ul>\n"}, {"fullname": "cpom.altimetry", "modulename": "cpom.altimetry", "kind": "module", "doc": "<h1 id=\"altimetry-related-directories\">Altimetry related directories</h1>\n\n<ul>\n<li><code>cpom.altimetry.missions</code>\n<ul>\n<li>code for the altimetry Mission class (stores info and \ngeneric functions for a range of altimetry missions)</li>\n</ul></li>\n<li><code>cpom.altimetry.projects</code>\n<ul>\n<li>contains sub-directories of code for specific projects (ESA or other)</li>\n</ul></li>\n<li><code>cpom.altimetry.tools</code>\n<ul>\n<li>contains executable tools for various tasks</li>\n</ul></li>\n</ul>\n"}, {"fullname": "cpom.altimetry.geolocation", "modulename": "cpom.altimetry.geolocation", "kind": "module", "doc": "<h1 id=\"geolocation-functions\">Geolocation functions</h1>\n"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer", "modulename": "cpom.altimetry.geolocation.geolocate_roemer", "kind": "module", "doc": "<p>cpom.altimetry.geolocation.geolocate_roemer.py</p>\n\n<h1 id=\"purpose\">Purpose</h1>\n\n<p>Slope correction/geolocation function using an adapted Roemer method \nfrom :\nRoemer, S., Legr\u00e9sy, B., Horwath, M., and Dietrich, R.: Refined\nanalysis of radar altimetry data applied to the region of the\nsubglacial Lake Vostok/Antarctica, Remote Sens. Environ., 106,\n269\u2013284, <a href=\"https://doi.org/10.1016/j.rse.2006.02.026\">https://doi.org/10.1016/j.rse.2006.02.026</a>, 2007.</p>\n\n<p>Adaption by A.Muir, M.McMillan, Q.Huang (CPOM), includes a two stage POCA location, \nperformed by minimizing the range to the satellite from DEM points located within firstly\na circular area around the nadir location of radius equal to half the beam width, \nand then within the pulse limited footprint around the initial POCA\nat a finer resampled DEM resolution.</p>\n\n<p>Next the calculated POCA's range to satellite is checked to see if it is\nwithin the range window (configurably trimmed). If not the slope\ncorrection is failed.</p>\n\n<p>Finally the slope correction and height is calculated from</p>\n\n<p>height[i] = altitudes[i]\n                    - (geo_corrected_tracker_range[i] + retracker_correction[i])\n                    + slope_correction[i]</p>\n\n<h1 id=\"main-function\">Main function</h1>\n\n<p>geolocate_roemer()</p>\n"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer.log", "modulename": "cpom.altimetry.geolocation.geolocate_roemer", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.altimetry.geolocation.geolocate_roemer (WARNING)&gt;"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer.EARTH_RADIUS", "modulename": "cpom.altimetry.geolocation.geolocate_roemer", "qualname": "EARTH_RADIUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "6378137.0"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer.calculate_distances3d", "modulename": "cpom.altimetry.geolocation.geolocate_roemer", "qualname": "calculate_distances3d", "kind": "function", "doc": "<p>calculates the distances between a  refernce cartesian point (x1,y1,z1) in 3d space\nand a list of other points : x2[],y2[],z2[]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x1_coord (float):</strong>  x coordinate of ref point</li>\n<li><strong>y1_coord (float):</strong>  y coordinate of ref point</li>\n<li><strong>z1_coord (float):</strong>  z coordinate of ref point</li>\n<li><strong>x2_array (np.ndarray):</strong>  list of x coordinates</li>\n<li><strong>y2_array (np.ndarray):</strong>  list of y coordinates</li>\n<li><strong>z2_array (np.ndarray):</strong>  list of z coordinates</li>\n<li><strong>squared_only (bool) :</strong>  if True, only calculate the squares of diffs and not sqrt\nthis will be faster, but doesn't give actual distances</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[float]: list of distances between points x1,y1,z1 and x2[],y2[],z2[]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x1_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y1_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">z1_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">x2_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">y2_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">z2_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">squared_only</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer.calculate_distances2d", "modulename": "cpom.altimetry.geolocation.geolocate_roemer", "qualname": "calculate_distances2d", "kind": "function", "doc": "<p>calculates the distances between a  refernce cartesian point (x1,y1) in 2d space\nand a list of other points : x2[],y2[]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x1_coord (float):</strong>  x coordinate of ref point</li>\n<li><strong>y1_coord (float):</strong>  y coordinate of ref point</li>\n<li><strong>x2_array (np.ndarray):</strong>  list of x coordinates</li>\n<li><strong>y2_array (np.ndarray):</strong>  list of y coordinates</li>\n<li><strong>squared_only (bool) :</strong>  if True, only calculate the squares of diffs and not sqrt\nthis will be faster, but doesn't give actual distances</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: list of distances between points x1,y1,z1 and x2[],y2[]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x1_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y1_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">x2_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y2_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">squared_only</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer.find_poca", "modulename": "cpom.altimetry.geolocation.geolocate_roemer", "qualname": "find_poca", "kind": "function", "doc": "<p>Function that finds the POCA using method similar to Roemer et al. (2007)\n   Finds the point with the shortest range to the satellite in the DEM segment and\n   computes the slope correction to height\n   Adapted from original : CLS (python) of McMillan (Matlab) code</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>zdem (np.ndarray):</strong>  DEM height values</li>\n<li><strong>xdem (np.ndarray):</strong>  x locations of DEM in polar stereo coordinates (m)</li>\n<li><strong>ydem (np.ndarray):</strong>  y locations of DEM in polar stereo coordinates (m)</li>\n<li><strong>nadir_x (float):</strong>  x location of nadir in polar stereo coordinates (m)</li>\n<li><strong>nadir_y (float):</strong>  y location of nadir in polar stereo coordinates (m)</li>\n<li><strong>alt_pt (float):</strong>  altitude at nadir (m)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(float,float,float,float,float,bool): poca_x, poca_y, poca_z, slope_correction_to_height,\n  range_to_satellite_of_poca,\n  flg_success</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">zdem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xdem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">ydem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">nadir_x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">nadir_y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">alt_pt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer.datetime2year", "modulename": "cpom.altimetry.geolocation.geolocate_roemer", "qualname": "datetime2year", "kind": "function", "doc": "<p>calculate decimal year from datetime</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date_dt (datetime):</strong>  datetime obj to process</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: decimal year</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">date_dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer.geolocate_roemer", "modulename": "cpom.altimetry.geolocation.geolocate_roemer", "qualname": "geolocate_roemer", "kind": "function", "doc": "<p>Geolocate CS2 LRM measurements using an adapted Roemer (Roemer et al, 2007) method</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  NetCDF Dataset of L1b file</li>\n<li><strong>thisdem (Dem):</strong>  Dem object used for Roemer correction</li>\n<li><strong>thisdem_fine (Dem):</strong>  Dem object used for fine Roemer correction (maybe same obj as thisdem)</li>\n<li><strong>config (dict):</strong>  config dictionary containing\n\"roemer_geolocation\": {\n    \"fine_grid_sampling\": 10, # DEM sampling of second stage\n    \"max_poca_reloc_distance\": 6600, # meters. Max distance from nadir allowed\n    \"median_filter\": False, # apply a median filter to DEM area of interest around nadir\n    \"median_filter_width\": 7,\n    \"reject_outside_range_window\": True, # reject POCA is outside trimmed range window\n    \"range_window_lower_trim\": 0, # meters\n    \"range_window_upper_trim\": 0, # meters\n    \"use_sliding_window\": False, # sliding window method is much slower.\n                                 # Needs further testing to see if it improves results\n}\n\"instrument\": {\n    \"across_track_beam_width\": 15000, # meters\n    \"pulse_limited_footprint_size\": 1600, # meters\n}</li>\n<li><strong>surface_type_20_ku (np.ndarray):</strong>  surface type for track, where 1 == grounded_ice</li>\n<li><strong>geo_corrected_tracker_range (np.ndarray) :</strong>  geo-corrected tracker range (NOT retracked)</li>\n<li><strong>retracker_correction (np.ndarray) :</strong>  retracker correction to range (m)</li>\n<li><strong>points_to_include (np.ndarray) :</strong>  boolean array of points to include (False == reject)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(np.ndarray, np.ndarray, np.ndarray, np.ndarray, np.ndarray):\n  (height_20_ku, lat_poca_20_ku, lon_poca_20_ku, slope_ok, relocation_distance)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">altitudes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">thisdem</span><span class=\"p\">:</span> <span class=\"n\">cpom</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">Dem</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">thisdem_fine</span><span class=\"p\">:</span> <span class=\"n\">cpom</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">Dem</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">surface_type_20_ku</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">geo_corrected_tracker_range</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">retracker_correction</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">points_to_include</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer_sar", "modulename": "cpom.altimetry.geolocation.geolocate_roemer_sar", "kind": "module", "doc": "<p>cpom.altimetry.geolocation.geolocate_roemer_sar.py</p>\n\n<h1 id=\"purpose\">Purpose</h1>\n\n<p>Slope correction/geolocation function for SAR using an adapted Roemer method\nfrom :\nRoemer, S., Legr\u00e9sy, B., Horwath, M., and Dietrich, R.: Refined\nanalysis of radar altimetry data applied to the region of the\nsubglacial Lake Vostok/Antarctica, Remote Sens. Environ., 106,\n269\u2013284, <a href=\"https://doi.org/10.1016/j.rse.2006.02.026\">https://doi.org/10.1016/j.rse.2006.02.026</a>, 2007.</p>\n\n<p>Adaption by A.Muir, M.McMillan, Q.Huang (CPOM), includes a two stage POCA location,\nperformed by minimizing the range to the satellite from DEM points located within firstly\nan across track rectangular area (multi-looked Doppler footprint) centered on the nadir\nlocation of width equal to the beam width,\nand then within the pulse doppler limited footprint around the initial POCA\nat a finer resampled DEM resolution.</p>\n\n<p>Next the calculated POCA's range to satellite is checked to see if it is\nwithin the range window (configurably trimmed). If not the slope\ncorrection is failed.</p>\n\n<p>Finally the slope correction and height is calculated from</p>\n\n<p>height[i] = altitudes[i]\n                    - (geo_corrected_tracker_range[i] + retracker_correction[i])\n                    + slope_correction[i]</p>\n\n<h1 id=\"main-function\">Main function</h1>\n\n<p>geolocate_roemeri_sar()</p>\n"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer_sar.log", "modulename": "cpom.altimetry.geolocation.geolocate_roemer_sar", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.altimetry.geolocation.geolocate_roemer_sar (WARNING)&gt;"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer_sar.EARTH_RADIUS", "modulename": "cpom.altimetry.geolocation.geolocate_roemer_sar", "qualname": "EARTH_RADIUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "6378137.0"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer_sar.find_poca", "modulename": "cpom.altimetry.geolocation.geolocate_roemer_sar", "qualname": "find_poca", "kind": "function", "doc": "<p>Function that finds the POCA using method similar to Roemer et al. (2007)\n   Finds the point with the shortest range to the satellite in the DEM segment and\n   computes the slope correction to height\n   Adapted from original : CLS (python) of McMillan (Matlab) code</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>zdem (np.ndarray):</strong>  DEM height values</li>\n<li><strong>xdem (np.ndarray):</strong>  x locations of DEM in polar stereo coordinates (m)</li>\n<li><strong>ydem (np.ndarray):</strong>  y locations of DEM in polar stereo coordinates (m)</li>\n<li><strong>nadir_x (float):</strong>  x location of nadir in polar stereo coordinates (m)</li>\n<li><strong>nadir_y (float):</strong>  y location of nadir in polar stereo coordinates (m)</li>\n<li><strong>alt_pt (float):</strong>  altitude at nadir (m)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(float,float,float,float,float,bool): poca_x, poca_y, poca_z, slope_correction_to_height,\n  range_to_satellite_of_poca,\n  flg_success</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">zdem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xdem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">ydem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">nadir_x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">nadir_y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">alt_pt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer_sar.datetime2year", "modulename": "cpom.altimetry.geolocation.geolocate_roemer_sar", "qualname": "datetime2year", "kind": "function", "doc": "<p>calculate decimal year from datetime</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date_dt (datetime):</strong>  datetime obj to process</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: decimal year</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">date_dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.geolocation.geolocate_roemer_sar.geolocate_roemer_sar", "modulename": "cpom.altimetry.geolocation.geolocate_roemer_sar", "qualname": "geolocate_roemer_sar", "kind": "function", "doc": "<p>Geolocate SAR measurements using an adapted Roemer (Roemer et al, 2007) method</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  NetCDF Dataset of L1b file</li>\n<li><strong>thisdem (Dem):</strong>  Dem object used for Roemer correction</li>\n<li><strong>thisdem_fine (Dem):</strong>  Dem object used for fine Roemer correction (maybe same obj as thisdem)</li>\n<li><strong>config (dict):</strong>  config dictionary containing\n\"roemer_geolocation\": {\n    \"fine_grid_sampling\": 10, # DEM sampling of second stage\n    \"max_poca_reloc_distance\": 6600, # meters. Max distance from nadir allowed\n    \"reject_outside_range_window\": True, # reject POCA is outside trimmed range window\n    \"range_window_lower_trim\": 0, # meters\n    \"range_window_upper_trim\": 0, # meters\n}\n\"instrument\": {\n    \"across_track_beam_width\": 15000, # meters\n    \"pulse_limited_footprint_size\": 1600, # meters\n    \"across_track_doppler_footprint_width\": 1600, # meters\n}</li>\n<li><strong>geo_corrected_tracker_range (np.ndarray) :</strong>  geo-corrected tracker range (NOT retracked)</li>\n<li><strong>points_to_include (np.ndarray) :</strong>  boolean array of points to include (False == reject)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(np.ndarray, np.ndarray, np.ndarray, np.ndarray, np.ndarray):\n  (slope_correction, lat_poca, lon_poca, slope_ok, relocation_distance)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">altitudes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">thisdem</span><span class=\"p\">:</span> <span class=\"n\">cpom</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">Dem</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">thisdem_fine</span><span class=\"p\">:</span> <span class=\"n\">cpom</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">dems</span><span class=\"o\">.</span><span class=\"n\">Dem</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">geo_corrected_tracker_range</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">points_to_include</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.geolocation.get_heading", "modulename": "cpom.altimetry.geolocation.get_heading", "kind": "module", "doc": "<h1 id=\"cpomaltimetrygeolocationget_headingpy\">cpom.altimetry.geolocation.get_heading.py</h1>\n\n<p>utility functions for slope correction\nget_heading()       :   Function to get heading angles from [x1,y1,x2,y2,..]\n                        (requires at least 2 records)</p>\n"}, {"fullname": "cpom.altimetry.geolocation.get_heading.get_heading", "modulename": "cpom.altimetry.geolocation.get_heading", "qualname": "get_heading", "kind": "function", "doc": "<p>Function to get track headings (requires at least 2 records)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x_locs (List[float]):</strong>  list of nadir x locations</li>\n<li><strong>y_locs (List[float]):</strong>  list of nadir y locations</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>headings (np.ndarray) : list of heading angles in degrees (0..360)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_locs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">y_locs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.geolocation.tests", "modulename": "cpom.altimetry.geolocation.tests", "kind": "module", "doc": "<h1 id=\"pytest-functions-for-geolocation\">pytest functions for geolocation</h1>\n"}, {"fullname": "cpom.altimetry.geolocation.tests.test_geolocate_roemer", "modulename": "cpom.altimetry.geolocation.tests.test_geolocate_roemer", "kind": "module", "doc": "<p>cpom.altimetry.geolocation.tests.test_geolocate_roemer.py</p>\n\n<h1 id=\"pytest-functions-for-geolocate_roemerpy\">pytest functions for geolocate_roemer.py</h1>\n"}, {"fullname": "cpom.altimetry.geolocation.tests.test_geolocate_roemer.log", "modulename": "cpom.altimetry.geolocation.tests.test_geolocate_roemer", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.altimetry.geolocation.tests.test_geolocate_roemer (WARNING)&gt;"}, {"fullname": "cpom.altimetry.geolocation.tests.test_geolocate_roemer.pytestmark", "modulename": "cpom.altimetry.geolocation.tests.test_geolocate_roemer", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;requires_external_data&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.altimetry.geolocation.tests.test_geolocate_roemer.test_geolocate_roemer", "modulename": "cpom.altimetry.geolocation.tests.test_geolocate_roemer", "qualname": "test_geolocate_roemer", "kind": "function", "doc": "<p>pytest function for geolocate_roemer()</p>\n\n<p>This function inputs 3 nadir locations from a CS2 L1b track over Greenland\n(CS_LTA__SIR_LRM_1B_20200930T235609_20200930T235758_E001.nc) and checks that the\ncalculated POCA location is as expected when compared to those calculated by\nCryoTEMPO Baseline-D.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.geolocation.tests.test_geolocate_roemer_sar", "modulename": "cpom.altimetry.geolocation.tests.test_geolocate_roemer_sar", "kind": "module", "doc": "<p>cpom.altimetry.geolocation.tests.test_geolocate_roemer_sar.py</p>\n\n<h1 id=\"pytest-functions-for-geolocate_roemer_sarpy\">pytest functions for geolocate_roemer_sar.py</h1>\n"}, {"fullname": "cpom.altimetry.geolocation.tests.test_geolocate_roemer_sar.log", "modulename": "cpom.altimetry.geolocation.tests.test_geolocate_roemer_sar", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.altimetry.geolocation.tests.test_geolocate_roemer_sar (WARNING)&gt;"}, {"fullname": "cpom.altimetry.geolocation.tests.test_geolocate_roemer_sar.pytestmark", "modulename": "cpom.altimetry.geolocation.tests.test_geolocate_roemer_sar", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;requires_external_data&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.altimetry.geolocation.tests.test_geolocate_roemer_sar.test_geolocate_roemer_sar", "modulename": "cpom.altimetry.geolocation.tests.test_geolocate_roemer_sar", "qualname": "test_geolocate_roemer_sar", "kind": "function", "doc": "<p>pytest function for geolocate_roemer_sar()</p>\n\n<p>This function inputs 3 nadir locations from a CS2 L1b track over Greenland\n(CS_LTA__SIR_LRM_1B_20200930T235609_20200930T235758_E001.nc) and checks that the\ncalculated POCA location is as expected when compared to those calculated by\nCryoTEMPO Baseline-D.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.geolocation.tests.test_get_heading", "modulename": "cpom.altimetry.geolocation.tests.test_get_heading", "kind": "module", "doc": "<p>pytest of cpom.altimetry.geolocation.get_heading.py</p>\n"}, {"fullname": "cpom.altimetry.geolocation.tests.test_get_heading.test_get_heading", "modulename": "cpom.altimetry.geolocation.tests.test_get_heading", "qualname": "test_get_heading", "kind": "function", "doc": "<p>test get_heading() function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.missions", "modulename": "cpom.altimetry.missions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.altimetry.projects", "modulename": "cpom.altimetry.projects", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.altimetry.projects.cryotempo_li", "modulename": "cpom.altimetry.projects.cryotempo_li", "kind": "module", "doc": "<h1 id=\"cryotempo-land-ice-project\">CryoTEMPO Land Ice Project</h1>\n"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty", "kind": "module", "doc": "<h1 id=\"uncertainty-code-for-cryotempo-li\">Uncertainty code for CryoTEMPO LI</h1>\n"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_bilinear_fit", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_bilinear_fit", "kind": "module", "doc": "<p>Converts 2d uncertainty table to a bilinear model fit</p>\n"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_bilinear_fit.load_table_from_pickle", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_bilinear_fit", "qualname": "load_table_from_pickle", "kind": "function", "doc": "<p>Load the binned table from a Pickle file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_bilinear_fit.save_table_as_pickle", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_bilinear_fit", "qualname": "save_table_as_pickle", "kind": "function", "doc": "<p>Save the binned table as a Pickle file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>binned_table (pd.DataFrame):</strong>  The binned median absolute elevation difference table.</li>\n<li><strong>filename (str):</strong>  The path to the file where the table will be saved.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">binned_table</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_bilinear_fit.main", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_bilinear_fit", "qualname": "main", "kind": "function", "doc": "<p>main function for tool</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty", "kind": "module", "doc": "<p>cryotempo_2d_uncertainty</p>\n\n<p>Purpose: Calculate a 2D uncertainty table using  slope &amp; roughness bins\nat 0.1 degree steps from 0 to 2 degrees, and m</p>\n\n<p>Slope &amp; Roughness interpolated from\nAIS:\nSlopes(\"rema_100m_900ws_slopes_zarr\") or Slopes(\"cpom_ant_2018_1km_slopes\")\nRoughness(\"rema_100m_900ws_roughness_zarr\")\nGrn:\nSlopes(\"arcticdem_100m_900ws_slopes_zarr\")\nRoughness(\"arcticdem_100m_900ws_roughness_zarr\")</p>\n\n<p>Input is dh values, lat, lon from CS2-IS2 differences npz files, for example:\n[cs2_minus_is2_gt2lgt2r_p2p_diffs_antarctica_icesheets.npz\n[cs2_minus_is2_gt2lgt2r_p2p_diffs_greenland.npz</p>\n\n<p>example usage: \npython cryotempo_2d_uncertainty.py -a -m median     -dh_file ~/downloads/cs2_minus_is2_gt2lgt2r_p2p_diffs_antarctica_icesheets.npz\npython cryotempo_2d_uncertainty.py -g -m median     -dh_file ~/downloads/cs2_minus_is2_gt2lgt2r_p2p_diffs_greenland.npz</p>\n"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty.calculate_binned_median", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty", "qualname": "calculate_binned_median", "kind": "function", "doc": "<p>Calculate the median absolute elevation differences within slope and roughness bins.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delta_elevation (np.ndarray):</strong>  Array of elevation differences between\ntwo measurement techniques.</li>\n<li><strong>slope (np.ndarray):</strong>  Array of surface slopes in meters.</li>\n<li><strong>roughness (np.ndarray):</strong>  Array of surface roughness values in meters.</li>\n<li><strong>slope_bins (np.ndarray):</strong>  Bins to categorize slope values.</li>\n<li><strong>roughness_bins (np.ndarray):</strong>  Bins to categorize roughness values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: A pivot table where rows correspond to slope bins, columns to roughness bins,\n                and values to the median absolute elevation difference within each bin.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">delta_elevation</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">slope</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">slope_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty.calculate_binned_mad", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty", "qualname": "calculate_binned_mad", "kind": "function", "doc": "<p>Calculate the median absolute deviation (MAD) of elevation differences within slope\n  and roughness bins.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delta_elevation (np.ndarray):</strong>  Array of elevation differences between two measurement\ntechniques.</li>\n<li><strong>slope (np.ndarray):</strong>  Array of surface slopes in meters.</li>\n<li><strong>roughness (np.ndarray):</strong>  Array of surface roughness values in meters.</li>\n<li><strong>slope_bins (np.ndarray):</strong>  Bins to categorize slope values.</li>\n<li><strong>roughness_bins (np.ndarray):</strong>  Bins to categorize roughness values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: A pivot table where rows correspond to slope bins, columns to roughness bins,\n                and values to the MAD of the elevation differences within each bin.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">delta_elevation</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">slope</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">slope_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty.interpolate_missing_values_with_nearest_neighbour", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty", "qualname": "interpolate_missing_values_with_nearest_neighbour", "kind": "function", "doc": "<p>Interpolate missing values in the binned median table using bilinear and\nnearest-neighbor interpolation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>binned_median_pivot (pd.DataFrame):</strong>  A pivot table of binned median absolute</li>\n<li>elevation differences.</li>\n<li><strong>slope_bins (np.ndarray):</strong>  Bins to categorize slope values.</li>\n<li><strong>roughness_bins (np.ndarray):</strong>  Bins to categorize roughness values.</li>\n<li><strong>secondary_fill (bool):</strong>  perform a second fill</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: The pivot table with missing values interpolated.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">binned_median_pivot</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">slope_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">secondary_fill</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty.get_binned_values", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty", "qualname": "get_binned_values", "kind": "function", "doc": "<p>Retrieve the median absolute elevation difference for arrays of slope and roughness values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slope_values (np.ndarray):</strong>  Array of slope values for which to retrieve median differences.</li>\n<li><strong>roughness_values (np.ndarray):</strong>  Array of roughness values for which to retrieve\nmedian differences.</li>\n<li><strong>binned_table (pd.DataFrame):</strong>  A pivot table of binned median absolute elevation differences.</li>\n<li><strong>slope_bins (np.ndarray):</strong>  Bins to categorize slope values.</li>\n<li><strong>roughness_bins (np.ndarray):</strong>  Bins to categorize roughness values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: An array of median absolute elevation differences corresponding to the\n              input slope and roughness pairs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">slope_values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">binned_table</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">slope_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty.calc_2d_uncertainty_table", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty", "qualname": "calc_2d_uncertainty_table", "kind": "function", "doc": "<p>Main function to calculate the 2D uncertainty table with interpolated missing values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delta_elevation (np.ndarray):</strong>  Array of elevation differences between two\nmeasurement techniques.</li>\n<li><strong>slope (np.ndarray):</strong>  Array of surface slopes in meters.</li>\n<li><strong>roughness (np.ndarray):</strong>  Array of surface roughness values in meters.</li>\n<li><strong>method (str):</strong>  Method to calculate the uncertainty ('median' or 'mad'). Default is 'median'</li>\n<li><strong>fill (bool):</strong>  Whether to fill missing values using bilinear interpolation.</li>\n<li><strong>secondary_fill (bool):</strong>  Whether to use nearest neighbor fill if bilinear\ninterpolation leaves NaNs.</li>\n<li><strong>slope_bins (np.ndarray):</strong>  Bins to categorize slope values.</li>\n<li><strong>roughness_bins (np.ndarray):</strong>  Bins to categorize roughness values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: A pivot table where rows correspond to slope bins, columns to roughness bins,\n                and values to the interpolated uncertainty metric within each bin.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">delta_elevation</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">slope</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">slope_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_bins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;median&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">secondary_fill</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty.save_table_as_pickle", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty", "qualname": "save_table_as_pickle", "kind": "function", "doc": "<p>Save the binned table as a Pickle file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>binned_table (pd.DataFrame):</strong>  The binned median absolute elevation difference table.</li>\n<li><strong>filename (str):</strong>  The path to the file where the table will be saved.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">binned_table</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty.load_table_from_pickle", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty", "qualname": "load_table_from_pickle", "kind": "function", "doc": "<p>Load the binned table from a Pickle file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  The path to the file from which the table will be loaded.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: The binned median absolute elevation difference table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty.main", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.cryotempo_2d_uncertainty", "qualname": "main", "kind": "function", "doc": "<p>main function for command line tool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.plot_2d_uncertainty_map", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.plot_2d_uncertainty_map", "kind": "module", "doc": "<p>Plot an Antarctic or Greenland map of 2d uncertainty using the \n2d uncertainty LUT, slope and roughness, at a grid of lat/lon points</p>\n"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.plot_2d_uncertainty_map.slope_bins", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.plot_2d_uncertainty_map", "qualname": "slope_bins", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,\n       1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. ])"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.plot_2d_uncertainty_map.roughness_bins", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.plot_2d_uncertainty_map", "qualname": "roughness_bins", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,\n       1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. ])"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.plot_2d_uncertainty_map.load_table_from_pickle", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.plot_2d_uncertainty_map", "qualname": "load_table_from_pickle", "kind": "function", "doc": "<p>Load the binned table from a Pickle file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  The path to the file from which the table will be loaded.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: The binned median absolute elevation difference table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.plot_2d_uncertainty_map.get_binned_values", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.plot_2d_uncertainty_map", "qualname": "get_binned_values", "kind": "function", "doc": "<p>Retrieve the median absolute elevation difference for arrays of slope and roughness values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slope_values (np.ndarray):</strong>  Array of slope values for which to retrieve median differences.</li>\n<li><strong>roughness_values (np.ndarray):</strong>  Array of roughness values for which to retrieve\nmedian differences.</li>\n<li><strong>binned_table (pd.DataFrame):</strong>  A pivot table of binned median absolute elevation differences.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: An array of median absolute elevation differences corresponding to the input\n              slope and roughness pairs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">slope_values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">binned_table</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.cryotempo_li.uncertainty.plot_2d_uncertainty_map.main", "modulename": "cpom.altimetry.projects.cryotempo_li.uncertainty.plot_2d_uncertainty_map", "qualname": "main", "kind": "function", "doc": "<p>main function for tool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.projects.eocis", "modulename": "cpom.altimetry.projects.eocis", "kind": "module", "doc": "<h1 id=\"cpomaltimetryprojectseocis\">cpom.altimetry.projects.eocis</h1>\n\n<p>Code related to the UK EOCIS project</p>\n"}, {"fullname": "cpom.altimetry.projects.eocis.landice", "modulename": "cpom.altimetry.projects.eocis.landice", "kind": "module", "doc": "<h1 id=\"cpomaltimetryprojectseocislandice\">cpom.altimetry.projects.eocis.landice</h1>\n\n<p>Code related to the UK EOCIS project, <strong>land ice</strong></p>\n"}, {"fullname": "cpom.altimetry.projects.eocis.landice.plot_dhdt", "modulename": "cpom.altimetry.projects.eocis.landice.plot_dhdt", "kind": "module", "doc": "<p>cpom.altimetry.projects.eocis.landice.plot_dhdt.py</p>\n\n<h1 id=\"purpose\">Purpose</h1>\n\n<p>Plot EOCIS dh/dt products</p>\n\n<h1 id=\"example\">Example</h1>\n\n<p>plot_dhdt.py -f     ~/Sites/landice_portal/test_data/        EOCIS-AIS-L3C-SEC-MULTIMISSION-5KM-5YEAR-MEANS-199101-199601-fv1.nc           -o /tmp</p>\n"}, {"fullname": "cpom.altimetry.projects.eocis.landice.plot_dhdt.main", "modulename": "cpom.altimetry.projects.eocis.landice.plot_dhdt", "qualname": "main", "kind": "function", "doc": "<p>main function for tool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools", "modulename": "cpom.altimetry.tools", "kind": "module", "doc": "<h1 id=\"tools\">Tools</h1>\n\n<p>The following command line tools are available:</p>\n\n<h2 id=\"plot_mappy\">plot_map.py</h2>\n\n<p>Plot variables from NetCDF file(s) on a selectable cryosphere map.</p>\n\n<p>Further details at <code>cpom.altimetry.tools.plot_map</code></p>\n\n<h2 id=\"find_files_in_areapy\">find_files_in_area.py</h2>\n\n<p>Tool to to find files within a specified directory (and default is to search recursive sub-dirs) \nthat contain lat/lon locations within a CPOM Area's\nmask or within a radius (km) of a specified lat,lon point. Optionally plot tracks \nin area map. </p>\n\n<h2 id=\"nc_valspy\">nc_vals.py</h2>\n\n<p>Tool which prints netcdf parameters. A bit like ncdump but with more options\nand allows single parameters to be printed more easily.</p>\n\n<p>Further details at <code>cpom.altimetry.tools.find_files_in_area</code></p>\n"}, {"fullname": "cpom.altimetry.tools.find_files_in_area", "modulename": "cpom.altimetry.tools.find_files_in_area", "kind": "module", "doc": "<p>cpom.altimetry.tools.find_files_in_area.py</p>\n\n<h1 id=\"purpose\">Purpose</h1>\n\n<p>Tool to to find files within a specified directory (and default is to search recursive sub-dirs) \nthat contain lat/lon locations within a CPOM Area's\nmask or within a radius (km) of a specified lat,lon point. Optionally plot tracks \nin area map. </p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>For full list of command line options: </p>\n\n<pre><code>find_files_in_area.py -h\n</code></pre>\n\n<p>example of finding a list of files in /some_dir and its sub-directories that\npass over the Greenland ice sheet, printing just the list of files: </p>\n\n<pre><code>find_files_in_area.py -d /some_dir -a greenland_is -fo\n</code></pre>\n\n<p>example of finding a list of files in /some_dir and its sub-directories that\npass over the Antarctica ice sheet, also plotting the first 20 found files\non a map: </p>\n\n<pre><code>find_files_in_area.py -d /some_dir -a antarctica_is -p\n</code></pre>\n"}, {"fullname": "cpom.altimetry.tools.find_files_in_area.RED", "modulename": "cpom.altimetry.tools.find_files_in_area", "qualname": "RED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[0;31m&#x27;"}, {"fullname": "cpom.altimetry.tools.find_files_in_area.BLUE", "modulename": "cpom.altimetry.tools.find_files_in_area", "qualname": "BLUE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[0;34m&#x27;"}, {"fullname": "cpom.altimetry.tools.find_files_in_area.BLACK_BOLD", "modulename": "cpom.altimetry.tools.find_files_in_area", "qualname": "BLACK_BOLD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[1;30m&#x27;"}, {"fullname": "cpom.altimetry.tools.find_files_in_area.ORANGE", "modulename": "cpom.altimetry.tools.find_files_in_area", "qualname": "ORANGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[38;5;208m&#x27;"}, {"fullname": "cpom.altimetry.tools.find_files_in_area.NC", "modulename": "cpom.altimetry.tools.find_files_in_area", "qualname": "NC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[0m&#x27;"}, {"fullname": "cpom.altimetry.tools.find_files_in_area.find_nc_files", "modulename": "cpom.altimetry.tools.find_files_in_area", "qualname": "find_nc_files", "kind": "function", "doc": "<p>Find .nc or .NC files in the specified directory.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>directory (str):</strong>  The directory to search for .nc files.</li>\n<li><strong>recursive (bool):</strong>  If True, search recursively in subdirectories.</li>\n<li><strong>max_files (int|None):</strong>  if not None, limit number of files read to this number</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of found .nc or .NC files with their full paths.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">recursive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">max_files</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.find_files_in_area.get_default_latlon_names", "modulename": "cpom.altimetry.tools.find_files_in_area", "qualname": "get_default_latlon_names", "kind": "function", "doc": "<p>Get a default latitude and longitude names to plot from filename</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  path of NetCDF file</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(str,str) : latname, lonname</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.find_files_in_area.get_variable", "modulename": "cpom.altimetry.tools.find_files_in_area", "qualname": "get_variable", "kind": "function", "doc": "<p>Retrieve variable from NetCDF file, handling groups if necessary.</p>\n\n<p>This function navigates through groups in a NetCDF file to retrieve the specified variable.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nc (Dataset):</strong>  The NetCDF dataset object.</li>\n<li><strong>nc_var_path (str):</strong>  The path to the variable within the NetCDF file,\nwith groups separated by '/'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Variable: The retrieved NetCDF variable.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SystemExit:</strong>  If the variable or group is not found in the NetCDF file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">nc</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">nc_var_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Variable</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.find_files_in_area.haversine", "modulename": "cpom.altimetry.tools.find_files_in_area", "qualname": "haversine", "kind": "function", "doc": "<p>Calculate the great-circle distance between two points on the Earth.</p>\n\n<p>Parameters:\nlat1, lon1: Latitude and longitude of point 1 in degrees.\nlat2, lon2: Latitude and longitude of point 2 in degrees.</p>\n\n<p>Returns:\nDistance in meters.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lat1</span>, </span><span class=\"param\"><span class=\"n\">lon1</span>, </span><span class=\"param\"><span class=\"n\">lat2</span>, </span><span class=\"param\"><span class=\"n\">lon2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.find_files_in_area.is_within_distance", "modulename": "cpom.altimetry.tools.find_files_in_area", "qualname": "is_within_distance", "kind": "function", "doc": "<p>Return True if any of (lats, lons) are within distance from (target_lat, target_lon),\nwhere distance is in meters, else return False.</p>\n\n<p>Parameters:\nlats (np.ndarray): Array of latitudes.\nlons (np.ndarray): Array of longitudes.\ntarget_lat (float): Target latitude.\ntarget_lon (float): Target longitude.\ndistance (float): Distance threshold in km.</p>\n\n<p>Returns:\nbool: True if any point is within the distance, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">target_lat</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">target_lon</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.find_files_in_area.main", "modulename": "cpom.altimetry.tools.find_files_in_area", "qualname": "main", "kind": "function", "doc": "<p>main function of tool</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.nc_vals", "modulename": "cpom.altimetry.tools.nc_vals", "kind": "module", "doc": "<p>cpom.altimetry.tools.nc_vals.py</p>\n\n<p>Tool to print out NetCDF values with more control than ncdump.</p>\n\n<p>By default it prints scaled values (scale_factor, add_offset) unless disabled with <code>-r</code>.</p>\n\n<h1 id=\"command-line-options\">Command Line Options</h1>\n\n<p>-h, --help              Show this help message and exit\n  -d, --describe          Print only the specified parameter definition and attributes (like ncdump)\n  -g, --global-atts       Print only global attributes from the file\n  -p PARAM, --param PARAM Parameter path (e.g., data/ku/power_noise_floor)\n  -plt, --plot            Plot parameter\n  -r, --raw               Print raw values without applying scale_factor or add_offset\n  -s, --show_every_index  Print every value with its index (one per line)\n  -n PRECISION, --precision PRECISION\n                          Number of decimal places to print for float values</p>\n\n<h1 id=\"example\">Example</h1>\n\n<pre><code>nc_vals.py -s -p data/ku/power_noise_floor yourfile.nc\n</code></pre>\n"}, {"fullname": "cpom.altimetry.tools.nc_vals.print_variable_description", "modulename": "cpom.altimetry.tools.nc_vals", "qualname": "print_variable_description", "kind": "function", "doc": "<p>Print the NetCDF variable's group, type, dimensions, and attributes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>var:</strong>  The NetCDF variable object.</li>\n<li><strong>varname:</strong>  The name of the variable (leaf name only).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Variable</span>, </span><span class=\"param\"><span class=\"n\">varname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.nc_vals.parse_args", "modulename": "cpom.altimetry.tools.nc_vals", "qualname": "parse_args", "kind": "function", "doc": "<p>Parse command-line arguments.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>argparse.Namespace: Parsed CLI arguments.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">Namespace</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.nc_vals.get_variable", "modulename": "cpom.altimetry.tools.nc_vals", "qualname": "get_variable", "kind": "function", "doc": "<p>Retrieve a variable from the dataset given a path.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataset:</strong>  The open NetCDF dataset.</li>\n<li><strong>var_path:</strong>  Slash-separated variable path (e.g., data/ku/var).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The NetCDF variable object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  If the group or variable is not found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">var_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Variable</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.nc_vals.get_variable2", "modulename": "cpom.altimetry.tools.nc_vals", "qualname": "get_variable2", "kind": "function", "doc": "<p>Retrieve a variable from the dataset given a path, along with its units if available.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataset:</strong>  The open NetCDF dataset.</li>\n<li><strong>var_path:</strong>  Slash-separated variable path (e.g., data/ku/var).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple containing:\n      - The NetCDF variable object.\n      - The units of the variable if present, else None.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  If the group or variable is not found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">var_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Variable</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.nc_vals.apply_scaling", "modulename": "cpom.altimetry.tools.nc_vals", "qualname": "apply_scaling", "kind": "function", "doc": "<p>Apply scale_factor and add_offset to data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>var:</strong>  The NetCDF variable.</li>\n<li><strong>data:</strong>  The data array (possibly masked).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Scaled NumPy array.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Variable</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.nc_vals.is_float_dtype", "modulename": "cpom.altimetry.tools.nc_vals", "qualname": "is_float_dtype", "kind": "function", "doc": "<p>Check if dtype is floating-point.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dtype:</strong>  NumPy data type.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if float, else False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.nc_vals.print_indexed", "modulename": "cpom.altimetry.tools.nc_vals", "qualname": "print_indexed", "kind": "function", "doc": "<p>Print each value with its index. Masked values are shown as '--FV--'.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  Data array (masked or regular).</li>\n<li><strong>precision:</strong>  Decimal precision for float values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">precision</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.nc_vals.print_global_attributes", "modulename": "cpom.altimetry.tools.nc_vals", "qualname": "print_global_attributes", "kind": "function", "doc": "<p>Print global attributes of the dataset.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataset:</strong>  The open NetCDF dataset.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.nc_vals.plot_var", "modulename": "cpom.altimetry.tools.nc_vals", "qualname": "plot_var", "kind": "function", "doc": "<p>plot netcdf parameter array</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>arr (np.ndarray):</strong>  netcdf parameter array</li>\n<li><strong>name (str):</strong>  name of netcdf parameter</li>\n<li><strong>units (str):</strong>  units of netcdf parameter</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.nc_vals.main", "modulename": "cpom.altimetry.tools.nc_vals", "qualname": "main", "kind": "function", "doc": "<p>Main function to drive CLI behavior.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_3dmap", "modulename": "cpom.altimetry.tools.plot_3dmap", "kind": "module", "doc": "<p>cpom.altimetry.tools.plot_3dmap.py</p>\n\n<h1 id=\"purpose\">Purpose</h1>\n\n<p>Tool to display (lat,lon,values) from one or more generic NetCDF files (containing latitude,\nlongitude and value data of any sort and naming) on an interactive  3d DEM map \nin a browser window. Will optionally recursively search a directory for netcdf files (optionally\nmatching a pattern). It is assumed that netcdf files matched are of the same type.</p>\n\n<p><strong>Note</strong> : this tool requires a graphics card or GPU on the system it is run on\nand displays within the current default browser. So, will not work on headless\nservers with no graphics cards or GPUs installed. Tested on a MacbookPro.</p>\n\n<p>For full list of command line args:</p>\n\n<p><code>plot_3dmap.py --help</code></p>\n\n<p>Most settings are configurable from the tool using the command line arguments, although the tool\nwill try and automatically identify default parameters and select an area to plot \n(from contained lat/lon values) from most altimetry formats. If not you can choose these from the\ncommand line.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>List all available 3D area definitions (ie the areas you can select to plot your data on):</p>\n\n<p><code>plot_3dmap.py --list_areas</code></p>\n\n<p>Plot a parameter <strong>elevation</strong> from a CryTEMPO netcdf file, and display in area \ndefinition <strong>vostok</strong>. \nUse colormap RdYlBu to display elevation values between 3400m and 3500m range. </p>\n\n<p><code>plot_3dmap.py -f CS_OFFL_SIR_TDP_LI_ANTARC_20200911T023800_20200911T024631_18_12333_D001.nc     -a vostok -p elevation -c cmap:RdYlBu -pr 3400:3500</code></p>\n\n<p>Plot parameters <strong>elevation</strong> and <strong>backscatter</strong> from a CryTEMPO netcdf file, and display in area \ndefinition <strong>vostok</strong>. \nUse colormap RdYlBu to display <strong>elevation</strong> values between 3400m and 3500m range. \nUse colormap Viridis to display <strong>backscatter</strong> values between default ranges. \nRaise both parameters above the surface by 1m and 50m respectively\nSet the point size to be 6 and 10 respectively</p>\n\n<p><code>plot_3dmap.py -f CS_OFFL_SIR_TDP_LI_ANTARC_20200911T023800_20200911T024631_18_12333_D001.nc     -a vostok -p elevation -c cmap:RdYlBu,cmap:viridis -pr 3400:3500, -re 1,50 -ps 6,10</code></p>\n\n<h2 id=\"issues\">Issues</h2>\n\n<p>Odd display issues with some DEM Zarr resolutions. For example using\n'rema_gapless_100m_zarr' with area vostok_600km. Seems to display ok when\nno parameters loaded, but incorrectly with them. 'rema_ant_1km_zarr' works\nfine. Needs further investigation.</p>\n"}, {"fullname": "cpom.altimetry.tools.plot_3dmap.RED", "modulename": "cpom.altimetry.tools.plot_3dmap", "qualname": "RED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[0;31m&#x27;"}, {"fullname": "cpom.altimetry.tools.plot_3dmap.BLUE", "modulename": "cpom.altimetry.tools.plot_3dmap", "qualname": "BLUE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[0;34m&#x27;"}, {"fullname": "cpom.altimetry.tools.plot_3dmap.BLACK_BOLD", "modulename": "cpom.altimetry.tools.plot_3dmap", "qualname": "BLACK_BOLD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[1;30m&#x27;"}, {"fullname": "cpom.altimetry.tools.plot_3dmap.ORANGE", "modulename": "cpom.altimetry.tools.plot_3dmap", "qualname": "ORANGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[38;5;208m&#x27;"}, {"fullname": "cpom.altimetry.tools.plot_3dmap.NC", "modulename": "cpom.altimetry.tools.plot_3dmap", "qualname": "NC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[0m&#x27;"}, {"fullname": "cpom.altimetry.tools.plot_3dmap.setup_logging", "modulename": "cpom.altimetry.tools.plot_3dmap", "qualname": "setup_logging", "kind": "function", "doc": "<p>Setup logging handlers</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_3dmap.get_variable", "modulename": "cpom.altimetry.tools.plot_3dmap", "qualname": "get_variable", "kind": "function", "doc": "<p>Retrieve variable from NetCDF file, handling groups if necessary.</p>\n\n<p>This function navigates through groups in a NetCDF file to retrieve the specified variable.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nc (Dataset):</strong>  The NetCDF dataset object.</li>\n<li><strong>nc_var_path (str):</strong>  The path to the variable within the NetCDF file,\nwith groups separated by '/'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Variable: The retrieved NetCDF variable.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SystemExit:</strong>  If the variable or group is not found in the NetCDF file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">nc</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">nc_var_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Variable</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_3dmap.get_default_param", "modulename": "cpom.altimetry.tools.plot_3dmap", "qualname": "get_default_param", "kind": "function", "doc": "<p>Get a default parameter to plot from known file types</p>\n\n<p>Supported types:\nCryo-TEMPO Land Ice: file name starts with CS_OFFL_SIR_TDP_LI\nCryo-TEMPO Sea Ice: file name starts with CS_OFFL_SIR_TDP_SI</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  path of NetCDF file</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str,str: parameter name or '' if not found,units or '' if not found</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_3dmap.get_default_latlon_names", "modulename": "cpom.altimetry.tools.plot_3dmap", "qualname": "get_default_latlon_names", "kind": "function", "doc": "<p>Get a default latitude and longitude names to plot from filename</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  path of NetCDF file</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(str,str) : latname, lonname or (\"\",\"\") if not found</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_3dmap.get_default_area", "modulename": "cpom.altimetry.tools.plot_3dmap", "qualname": "get_default_area", "kind": "function", "doc": "<p>select a default area definition based on latitude</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lat (float):</strong>  latitude in degs</li>\n<li><strong>filename (str):</strong>  file name</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: cpom area definition name</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lat</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_3dmap.find_nc_files", "modulename": "cpom.altimetry.tools.plot_3dmap", "qualname": "find_nc_files", "kind": "function", "doc": "<p>Find .nc or .NC files in the specified directory.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>directory (str):</strong>  The directory to search for .nc files.</li>\n<li><strong>recursive (bool):</strong>  If True, search recursively in subdirectories.</li>\n<li><strong>max_files (int|None):</strong>  if not None, limit number of files read to this number</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of found .nc or .NC files with their full paths.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">recursive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">max_files</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_3dmap.main", "modulename": "cpom.altimetry.tools.plot_3dmap", "qualname": "main", "kind": "function", "doc": "<p>main function of 3d plotting tool</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_dhdt_from_npz", "modulename": "cpom.altimetry.tools.plot_dhdt_from_npz", "kind": "module", "doc": "<p>plot dhdt.npz files from CPOM sec processing (not a finished tool)</p>\n\n<p>using black background\nto highlight missing areas of the grid</p>\n\n<p>Note, just supports greenland and antarctica grid areas at the moment.\nDoesn't read the dhdt.info file</p>\n\n<p>Need to edit dataset name string, plot range</p>\n"}, {"fullname": "cpom.altimetry.tools.plot_dhdt_from_npz.main", "modulename": "cpom.altimetry.tools.plot_dhdt_from_npz", "qualname": "main", "kind": "function", "doc": "<p>main function of tool</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_map", "modulename": "cpom.altimetry.tools.plot_map", "kind": "module", "doc": "<p>Tool to plot variables (including flags) from NetCDF file(s) on a selectable cryosphere map</p>\n\n<p>For full list of command line args:</p>\n\n<p><code>plot_map.py --help</code></p>\n\n<p>Most settings are configurable from the tool using the command line arguments, although the tool\nwill try and automatically identify default parameters and select an area to plot \n(from contained lat/lon values) from most altimetry formats. If not you can choose these from the\ncommand line.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>List all available area definitions (ie the areas you can select to plot your data on):</p>\n\n<p><code>plot_map.py --list_areas</code></p>\n\n<p>Plot a parameter <strong>elevation</strong> from a CryTEMPO netcdf file, and display in area \ndefinition <strong>antarctica_hs_is</strong> which is an Antarctic map with hillshading and a \ngrounded icesheet mask:</p>\n\n<p><code>plot_map.py -f  /cpdata/SATS/RA/CRY/Cryo-TEMPO/BASELINE-B/001/LAND_ICE/ANTARC/2010/07/CS_OFFL_SIR_TDP_LI_ANTARC_20100717T141004_20100717T141229_01_02644_B001.nc -p elevation -a antarctica_hs_is</code></p>\n\n<p><img src=\"/cpom_software2/images/plot_map_example1.png\" alt=\"my image\" title=\"my image\" /></p>\n\n<p>Plot all the netcdf files in the given directory. Automatically select the default\nparameter and area to plot.</p>\n\n<p><code>plot_map.py -d /cpdata/SATS/RA/CRY/Cryo-TEMPO/BASELINE-B/001/LAND_ICE/ANTARC/2010/07</code></p>\n\n<p><img src=\"/cpom_software2/images/plot_map_example2.png\" alt=\"my image\" title=\"my image\" /></p>\n\n<p>Plot a simulated grid of values at 0.01 deg separation over Lake Vostok, with\npoint size 1.0 and colormap set to viridis</p>\n\n<p><code>plot_map.py -a vostok -s 0.01 -ps 1 --cmap viridis</code></p>\n\n<p><img src=\"/cpom_software2/images/plot_map_example3.png\" alt=\"my image\" title=\"my image\" /></p>\n\n<p>Plot the instrument_mode parameter files in a named directory, and use the flag parameter settings\nshown to specify flag values, names and colours:</p>\n\n<p><code>plot_map.py -d /cpdata/SATS/RA/CRY/Cryo-TEMPO/BASELINE-B/001/LAND_ICE/ANTARC/2010/07     -p instrument_mode     --flag_params 1:LRM:blue/2:SAR:pink/3:SIN:red</code></p>\n\n<p><img src=\"/cpom_software2/images/plot_map_example4.png\" alt=\"my image\" title=\"my image\" /></p>\n"}, {"fullname": "cpom.altimetry.tools.plot_map.main", "modulename": "cpom.altimetry.tools.plot_map", "qualname": "main", "kind": "function", "doc": "<p>main function of tool</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_waveforms", "modulename": "cpom.altimetry.tools.plot_waveforms", "kind": "module", "doc": "<p>cpom.altimetry.tools.plot_waveforms.py</p>\n\n<h1 id=\"tool-to-plot-altimetry-waveforms-directly-supports\">Tool to plot altimetry waveforms. Directly supports:</h1>\n\n<p>CRISTAL L1b\nCS2 L1b</p>\n\n<ul>\n<li>any NetCDF file that has selectable latitude, longitude and waveform parameters</li>\n</ul>\n"}, {"fullname": "cpom.altimetry.tools.plot_waveforms.get_scaled_font_size", "modulename": "cpom.altimetry.tools.plot_waveforms", "qualname": "get_scaled_font_size", "kind": "function", "doc": "<p>Calculate a dynamically scaled font size based on the length of the file name.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_name (str):</strong>  The file name to scale the font size for.</li>\n<li><strong>max_len (int, optional):</strong>  The maximum length for scaling. Defaults to 50.</li>\n<li><strong>base_size (int, optional):</strong>  The base font size. Defaults to 16.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The calculated font size.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">max_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>, </span><span class=\"param\"><span class=\"n\">base_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">16</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_waveforms.get_projection_and_extent", "modulename": "cpom.altimetry.tools.plot_waveforms", "qualname": "get_projection_and_extent", "kind": "function", "doc": "<p>Determine the appropriate Cartopy projection and extent based on latitude.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lat (float):</strong>  The latitude to determine the projection for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[ccrs.Projection, list[float] | None]: The Cartopy projection and the extent.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lat</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">crs</span><span class=\"o\">.</span><span class=\"n\">Projection</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_waveforms.update_map", "modulename": "cpom.altimetry.tools.plot_waveforms", "qualname": "update_map", "kind": "function", "doc": "<p>Update the map with the track and the current location.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (plt.Axes):</strong>  The map axis to update.</li>\n<li><strong>current_lat (float):</strong>  The current latitude of the waveform.</li>\n<li><strong>current_lon (float):</strong>  The current longitude of the waveform.</li>\n<li><strong>latitudes (np.ndarray):</strong>  Array of latitude values for the track.</li>\n<li><strong>longitudes (np.ndarray):</strong>  Array of longitude values for the track.</li>\n<li><strong>extent (list[float] | None, optional):</strong>  The extent for the map projection. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">current_lat</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">current_lon</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">latitudes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">longitudes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">extent</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_waveforms.update_plot", "modulename": "cpom.altimetry.tools.plot_waveforms", "qualname": "update_plot", "kind": "function", "doc": "<p>Update the waveform and map plots.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index (int):</strong>  The current index of the waveform.</li>\n<li><strong>ax_waveform (plt.Axes):</strong>  The waveform plot axis.</li>\n<li><strong>ax_map (plt.Axes):</strong>  The map plot axis.</li>\n<li><strong>waveforms (np.ndarray):</strong>  Array of waveform data.</li>\n<li><strong>latitudes (np.ndarray):</strong>  Array of latitude values.</li>\n<li><strong>longitudes (np.ndarray):</strong>  Array of longitude values.</li>\n<li><strong>file_name (str):</strong>  The name of the file being displayed.</li>\n<li><strong>wf_name (str):</strong>  name of the waveform parameter being plotted</li>\n<li><strong>fig (plt.Figure):</strong>  The figure object for the plot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ax_waveform</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">ax_map</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">waveforms</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">latitudes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">longitudes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">wf_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">fig</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_waveforms.get_default_parameter_names", "modulename": "cpom.altimetry.tools.plot_waveforms", "qualname": "get_default_parameter_names", "kind": "function", "doc": "<p>Get default parameter names for specific file types if not provided.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_name (str):</strong>  The name of the file being processed.</li>\n<li><strong>waveform_parameter_name (str | None):</strong>  The waveform parameter name.</li>\n<li><strong>latname (str | None):</strong>  The latitude parameter name.</li>\n<li><strong>lonname (str | None):</strong>  The longitude parameter name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[str, str, str,str]: The waveform parameter name,\n  latitude name,longitude name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">waveform_parameter_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latname</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lonname</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_waveforms.get_scale_factor", "modulename": "cpom.altimetry.tools.plot_waveforms", "qualname": "get_scale_factor", "kind": "function", "doc": "<p>retrieve an array of scale factors to convert waveform counts to Watts\nThis is mission dependant</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nc (Dataset):</strong> netcdf dataset</li>\n<li><strong>file_name (str):</strong>  file name</li>\n<li><strong>wf_name (str):</strong>  name of waveform parameter</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">nc</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">wf_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">waveforms</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_waveforms.get_variable", "modulename": "cpom.altimetry.tools.plot_waveforms", "qualname": "get_variable", "kind": "function", "doc": "<p>Retrieve variable from NetCDF file, handling groups if necessary.</p>\n\n<p>This function navigates through groups in a NetCDF file to retrieve the specified variable.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nc (Dataset):</strong>  The NetCDF dataset object.</li>\n<li><strong>nc_var_path (str):</strong>  The path to the variable within the NetCDF file,\nwith groups separated by '/'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Variable: The retrieved NetCDF variable.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SystemExit:</strong>  If the variable or group is not found in the NetCDF file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">nc</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">nc_var_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Variable</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.plot_waveforms.main", "modulename": "cpom.altimetry.tools.plot_waveforms", "qualname": "main", "kind": "function", "doc": "<p>Main function to parse arguments and plot waveforms.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>args (list[str]):</strong>  List of command-line arguments passed to the script.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cmd_args</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.tests", "modulename": "cpom.altimetry.tools.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.altimetry.tools.tests.test_find_files_in_area", "modulename": "cpom.altimetry.tools.tests.test_find_files_in_area", "kind": "module", "doc": "<p>pytest for cpom.altimetry.tools.find_files_in_area.py</p>\n"}, {"fullname": "cpom.altimetry.tools.tests.test_find_files_in_area.pytestmark", "modulename": "cpom.altimetry.tools.tests.test_find_files_in_area", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;requires_external_data&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.altimetry.tools.tests.test_find_files_in_area.test_find_files_in_area", "modulename": "cpom.altimetry.tools.tests.test_find_files_in_area", "qualname": "test_find_files_in_area", "kind": "function", "doc": "<p>Test the <code>plot_map</code> function from <code>cpom.altimetry.tools.plot_map</code>\nwith multiple sets of arguments.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>capsys (pytest.CaptureFixture):</strong>  A pytest fixture to capture stdout and stderr.</li>\n<li>directory unique to the test.</li>\n<li><strong>test_args (list[str]):</strong>  A list of command-line arguments for the test.</li>\n<li><strong>expected_output (str):</strong>  The expected output to check for in the captured output.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If the expected output is not found in the captured output.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">capsys</span><span class=\"p\">:</span> <span class=\"n\">_pytest</span><span class=\"o\">.</span><span class=\"n\">capture</span><span class=\"o\">.</span><span class=\"n\">CaptureFixture</span>,</span><span class=\"param\">\t<span class=\"n\">test_args</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">expected_output</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.altimetry.tools.tests.test_plot_map", "modulename": "cpom.altimetry.tools.tests.test_plot_map", "kind": "module", "doc": "<p>pytest for cpom.altimetry.tools.plot_map.py</p>\n"}, {"fullname": "cpom.altimetry.tools.tests.test_plot_map.test_plot_map", "modulename": "cpom.altimetry.tools.tests.test_plot_map", "qualname": "test_plot_map", "kind": "function", "doc": "<p>Test the <code>plot_map</code> function from <code>cpom.altimetry.tools.plot_map</code>\nwith multiple sets of arguments.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>capsys (pytest.CaptureFixture):</strong>  A pytest fixture to capture stdout and stderr.</li>\n<li><strong>tmpdir (pytest.TempPathFactory):</strong>  A pytest fixture that provides a temporary</li>\n<li>directory unique to the test.</li>\n<li><strong>test_args (list[str]):</strong>  A list of command-line arguments for the test.</li>\n<li><strong>expected_output (str):</strong>  The expected output to check for in the captured output.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If the expected output is not found in the captured output.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">capsys</span><span class=\"p\">:</span> <span class=\"n\">_pytest</span><span class=\"o\">.</span><span class=\"n\">capture</span><span class=\"o\">.</span><span class=\"n\">CaptureFixture</span>,</span><span class=\"param\">\t<span class=\"n\">tmpdir</span><span class=\"p\">:</span> <span class=\"n\">_pytest</span><span class=\"o\">.</span><span class=\"n\">tmpdir</span><span class=\"o\">.</span><span class=\"n\">TempPathFactory</span>,</span><span class=\"param\">\t<span class=\"n\">test_args</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">expected_output</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas", "modulename": "cpom.areas", "kind": "module", "doc": "<p>cpom.areas</p>\n\n<h1 id=\"cpom-area-definitions-and-polarplot-class\">CPOM Area Definitions and Polarplot class</h1>\n\n<h2 id=\"definitions\">definitions</h2>\n\n<p>contain standard area definition files used by the Polarplot class and related tools \nsuch as plot_map.py. Each area definition is stored in a separate <area_name>.py file.</p>\n\n<h2 id=\"areaspy\">areas.py</h2>\n\n<p>contains code to handle the area definitions</p>\n\n<h2 id=\"area_plotpy\">area_plot.py</h2>\n\n<p>contains the Polarplot class. The main external function of the Polarplot class\nis <strong>plot_points()</strong>:</p>\n\n<p><code>cpom.areas.area_plot.Polarplot.plot_points</code></p>\n\n<p>The purpose of Polarplot('some_area_name').plot_points() is to plot latitude, longitude, \nand values on predefined area maps. plot_points() takes one or more dataset dictionaries as input, \ncontaining the lat,lon,values and associated parameters. For a full list of the data set options\nsee <code>cpom.areas.area_plot.Polarplot.plot_points</code>.</p>\n\n<h3 id=\"example-1-plot-two-data-sets-on-a-basic-map-of-antarctica\">Example 1 : plot two data sets on a basic map of Antarctica</h3>\n\n<p>The following example plots 2 data sets on a basic map of Antarctica. </p>\n\n<ul>\n<li>The first dataset has a valid range set which will only plots vals within this range.</li>\n<li>The second dataset is plotted using the viridis colormap \n(the first uses the default colormap).</li>\n</ul>\n\n<p><strong>Note</strong> that the ancillary plots (histograms, etc) only apply to the first data set plotted.\nThe top right map shows the locations of the invalid points (since we set a valid_range there\nare some points that have invalid values between 5 and 10).</p>\n\n<p>You can scale the size of the points plotted in the main and ancillary maps using\ndataset parameters. For example to make the point size larger you might use:\n (\"plot_size_scale_factor\":10, and \"minimap_val_scalefactor\": 10,). Default point size\n is 1.0. Note that it is not a linear scale, so some experimentation is required.</p>\n\n<pre><code>import numpy as np\nfrom cpom.areas.area_plot import Polarplot\n\ndataset1={\n    \"lats\": np.linspace(-80,-70,100), # example 100 latitude values between -80N and -70N\n    \"lons\": np.linspace(0,5,100),     # example 100 longitude values between 0 and 5 degs E.\n    \"vals\": np.linspace(0,10,100),    # example 100 data values between 0 and 10.\n    \"units\": 'm',\n    \"name\": 'test_param',\n    \"valid_range\": [0,5],\n}\n\ndataset2={\n    \"lats\": np.linspace(-80,-70,100),\n    \"lons\": np.linspace(20,25,100),\n    \"vals\": np.linspace(0,10,100),\n    \"name\": 'test_param',\n    \"cmap_name\": 'viridis',\n}\n\nPolarplot('antarctica').plot_points(dataset1,dataset2)\n\n</code></pre>\n\n<p><img src=\"/cpom_software2/images/plot_points_example1.jpg\" alt=\"my image\" title=\"my image\" /></p>\n\n<h3 id=\"example-2-map-only-no-histograms-hill-shaded-antarctic-map\">Example 2: Map only (no histograms), hill shaded Antarctic map</h3>\n\n<p>In this example we plot a single dataset, add the map_only=True option to plot_points() \nto remove the default histograms,\nand we change the map area definition name to antarctica_hs. antarctica_hs is\nan area definition that applies a hill shaded DEM background and adds some\nbathymetry to the ocean.</p>\n\n<pre><code>import numpy as np\nfrom cpom.areas.area_plot import Polarplot\n\ndataset1={\n    \"lats\": np.linspace(-80,-70,100), # example 100 latitude values between -80N and -70N\n    \"lons\": np.linspace(0,5,100),     # example 100 longitude values between 0 and 5 degs E.\n    \"vals\": np.linspace(0,10,100),    # example 100 data values between 0 and 10.\n    \"name\": 'test_param',\n    \"valid_range\": [0,5],\n}\n\nPolarplot('antarctica_hs').plot_points(dataset1,map_only=True)\n</code></pre>\n\n<p><img src=\"/cpom_software2/images/plot_points_example2.jpg\" alt=\"my image\" title=\"my image\" /></p>\n\n<h3 id=\"example-3-save-the-plot-to-a-file-tmpgreenlandpng\">Example 3: Save the plot to a file /tmp/greenland.png</h3>\n\n<p>In this case the plot of Greenland will not be displayed but will be saved to a png file.</p>\n\n<pre><code>import numpy as np\nfrom cpom.areas.area_plot import Polarplot\n\ndataset1={\n    \"lats\": np.linspace(80,50,100), # example 100 latitude values between -80N and -70N\n    \"lons\": np.linspace(300,340,100),     # example 100 longitude values between 0 and 5 degs E.\n    \"vals\": np.linspace(0,10,100),    # example 100 data values between 0 and 10.\n}\n\nPolarplot('greenland_hs').plot_points(dataset1,output_file='/tmp/greenland.png')\n</code></pre>\n\n<p><img src=\"/cpom_software2/images/plot_points_example3.jpg\" alt=\"my image\" title=\"my image\" /></p>\n"}, {"fullname": "cpom.areas.area_plot", "modulename": "cpom.areas.area_plot", "kind": "module", "doc": "<p>cpom.areas.area_plot.py\nclass to plot areas defined in cpom.areas.definitions</p>\n\n<p>To do reminder:</p>\n\n<p>TODO: grid support</p>\n"}, {"fullname": "cpom.areas.area_plot.log", "modulename": "cpom.areas.area_plot", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.areas.area_plot (WARNING)&gt;"}, {"fullname": "cpom.areas.area_plot.get_unique_colors", "modulename": "cpom.areas.area_plot", "qualname": "get_unique_colors", "kind": "function", "doc": "<p>Get a list of n unique colors for plotting flag data (when no colors are\n   provided), as sampled from the tab20 or tab10 colormap.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n (int):</strong>  Number of colors required (&lt;= 20 will provide unique colors,\notherwise some repetition).</li>\n<li><strong>cmap_name_override (str | None):</strong>  Override colormap name to use. Typical alternatives are\n\"tab10\", \"tab20b\", \"tab20c\", \"Set1\", \"Set2\", \"Set3\".</li>\n<li><strong>as_hex (bool):</strong>  If True, returns colors as hex strings. If False, returns RGBA tuples.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str | Tuple[float, float, float, float]]: List of colors as hex strings or RGBA tuples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cmap_name_override</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">as_hex</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.calculate_mad", "modulename": "cpom.areas.area_plot", "qualname": "calculate_mad", "kind": "function", "doc": "<p>Calculate the MAD (Mean Absolute Deviation) of values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (np.ndarray):</strong>  values for which MAD is to be calculated</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>mad (float) : MAD value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Annotation", "modulename": "cpom.areas.area_plot", "qualname": "Annotation", "kind": "class", "doc": "<p>Data class for a single annotation in a polar plot.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>xpos (float):</strong>  The x-coordinate position of the annotation text in axis coordinates (0-1),\nrepresenting the percentage of the axis width.</li>\n<li><strong>ypos (float):</strong>  The y-coordinate position of the annotation text in axis coordinates (0-1),\nrepresenting the percentage of the axis height.</li>\n<li><strong>text (str):</strong>  The content of the annotation text.</li>\n<li><strong>bbox (dict | None):</strong>  An optional bounding box around the text. If provided, it should be a\ndictionary specifying the style of the box. Default is None, meaning no\nbox. Example format:\n    {\n        'boxstyle': 'round',  # Style of the box (e.g.,'round','square')\n        'facecolor': 'aliceblue',  # Background color of the box\n        'alpha': 1.0,  # Transparency of the box (0-1)\n        'edgecolor': 'lightgrey',  # Color of the box edge\n    }\nSee matplotlib Boxstyle documentation for more styles.</li>\n<li><strong>fontsize (int):</strong>  The font size of the text. Default is 12.</li>\n<li><strong>color (str):</strong>  The color of the text. Default is \"k\" (black).</li>\n<li><strong>fontweight (str):</strong>  The weight (thickness) of the font. Default is \"normal\".</li>\n</ul>\n"}, {"fullname": "cpom.areas.area_plot.Annotation.__init__", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xpos</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">ypos</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bbox</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fontsize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;k&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fontweight</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;normal&#39;</span></span>)</span>"}, {"fullname": "cpom.areas.area_plot.Annotation.xpos", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.xpos", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cpom.areas.area_plot.Annotation.ypos", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.ypos", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cpom.areas.area_plot.Annotation.text", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.text", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cpom.areas.area_plot.Annotation.bbox", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.bbox", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict | None", "default_value": "None"}, {"fullname": "cpom.areas.area_plot.Annotation.fontsize", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.fontsize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "12"}, {"fullname": "cpom.areas.area_plot.Annotation.color", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;k&#x27;"}, {"fullname": "cpom.areas.area_plot.Annotation.fontweight", "modulename": "cpom.areas.area_plot", "qualname": "Annotation.fontweight", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;normal&#x27;"}, {"fullname": "cpom.areas.area_plot.Polarplot", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot", "kind": "class", "doc": "<p>class to create map plots of polar areas</p>\n"}, {"fullname": "cpom.areas.area_plot.Polarplot.__init__", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.__init__", "kind": "function", "doc": "<p>class inititialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>area (str):</strong>  area name as per cpom.areas.definitions</li>\n<li><strong>area_overrides (dict|None):</strong>  dictionary to override area dict definitions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">area</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">area_overrides</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">area_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.areas.area_plot.Polarplot.area", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.area", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.areas.area_plot.Polarplot.thisarea", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.thisarea", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.areas.area_plot.Polarplot.plot_points", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.plot_points", "kind": "function", "doc": "<p>Plot one or more (lat, lon, val) datasets on polar maps.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><p><code>*data_sets</code> (dict, optional):\nOne or more dataset dictionaries. Each dictionary must include the (lats, lons, vals)\nfor a dataset and optional tunable plot parameters. Structure:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">{</span>\n    <span class=\"s2\">&quot;lats&quot;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([]),</span>             <span class=\"c1\"># Required: Latitude values</span>\n    <span class=\"s2\">&quot;lons&quot;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([]),</span>             <span class=\"c1\"># Required: Longitude values</span>\n    <span class=\"s2\">&quot;vals&quot;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([]),</span>             <span class=\"c1\"># Required: Data values</span>\n    <span class=\"s2\">&quot;units&quot;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>                      <span class=\"c1\"># Optional: Units of `vals`</span>\n    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;unnamed&quot;</span><span class=\"p\">,</span>                <span class=\"c1\"># Optional: Name of dataset</span>\n    <span class=\"s2\">&quot;apply_area_mask_to_data&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># Optional: Apply area mask to data</span>\n    <span class=\"s2\">&quot;fill_value&quot;</span><span class=\"p\">:</span> <span class=\"mi\">9999</span><span class=\"p\">,</span>               <span class=\"c1\"># Optional: Fill value to ignore in `vals`</span>\n    <span class=\"s2\">&quot;valid_range&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">min</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"p\">],</span>        <span class=\"c1\"># Optional: Valid range for `vals`</span>\n    <span class=\"s2\">&quot;minimap_val_scalefactor&quot;</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>   <span class=\"c1\"># Optional: Scale factor for bad data marker</span>\n    <span class=\"s2\">&quot;flag_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>                <span class=\"c1\"># Optional: List of flag values</span>\n    <span class=\"s2\">&quot;flag_names&quot;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>                 <span class=\"c1\"># Optional: List of flag names</span>\n    <span class=\"s2\">&quot;flag_colors&quot;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>                <span class=\"c1\"># Optional: Colors for flags or colormap</span>\n    <span class=\"s2\">&quot;cmap_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;RdYlBu_r&quot;</span><span class=\"p\">,</span>          <span class=\"c1\"># Optional: Colormap name</span>\n    <span class=\"s2\">&quot;cmap_over_color&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#A85754&quot;</span><span class=\"p\">,</span>     <span class=\"c1\"># Optional: Over color for colormap</span>\n    <span class=\"s2\">&quot;cmap_under_color&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#3E4371&quot;</span><span class=\"p\">,</span>    <span class=\"c1\"># Optional: Under color for colormap</span>\n    <span class=\"s2\">&quot;cmap_extend&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;both&quot;</span><span class=\"p\">,</span>            <span class=\"c1\"># Optional: Extend colormap</span>\n    <span class=\"s2\">&quot;min_plot_range&quot;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>           <span class=\"c1\"># Optional: Min range for colorbar</span>\n    <span class=\"s2\">&quot;max_plot_range&quot;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>           <span class=\"c1\"># Optional: Max range for colorbar</span>\n    <span class=\"s2\">&quot;plot_size_scale_factor&quot;</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>    <span class=\"c1\"># Optional: Marker size scale factor</span>\n    <span class=\"s2\">&quot;plot_alpha&quot;</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>                <span class=\"c1\"># Optional: Marker transparency (0 to 1)</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div></li>\n\n<li><p><code>use_default_annotation</code> (bool, optional, default: <code>True</code>):\nDisplay default dataset annotations if <code>True</code>.</p></li>\n<li><p><code>annotation_list</code> (list[Annotation] | None, optional):\nList of <code>Annotation</code> objects to display.</p></li>\n<li><p><code>logo_image</code> (optional):\nLogo image to insert into the plot, as returned by <code>plt.imread('someimagefile.png')</code>.</p></li>\n<li><p><code>logo_position</code> (tuple[float, float, float, float] | None, optional):\nLogo position as an axis rectangle <code>[left, bottom, width, height]</code> (values 0\u20131).</p></li>\n<li><p><code>output_dir</code> (str, optional, default: <code>\"\"</code>):\nDirectory to save plots. If <code>output_file</code> is not specified, the default filename is:</p>\n\n<pre><code>&lt;output_dir&gt;/param_&lt;data_set['name']&gt;_&lt;self.area&gt;.png\n</code></pre></li>\n<li><p><code>output_file</code> (str, optional, default: <code>\"\"</code>):\nOverride the default output filename. If <code>output_dir</code> is specified, the file is saved as:</p>\n\n<pre><code>&lt;output_dir&gt;/output_file\n</code></pre></li>\n<li><p><code>dpi</code> (int, optional, default: <code>85</code>):\nDPI for saving the image.</p></li>\n<li><p><code>transparent_background</code> (bool, optional, default: <code>False</code>):\nSet to <code>True</code> for a transparent PNG background.</p></li>\n<li><p><code>map_only</code> (bool, optional, default: <code>False</code>):\nPlot only the map and colorbar, without histograms or other elements.</p></li>\n</ul>\n\n<h3 id=\"raises\">Raises</h3>\n\n<ul>\n<li><code>ValueError</code>:\nRaised if <code>lat</code>, <code>lon</code>, and <code>vals</code> in a dataset do not have equal lengths.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">data_sets</span>,</span><span class=\"param\">\t<span class=\"n\">use_default_annotation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">annotation_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cpom</span><span class=\"o\">.</span><span class=\"n\">areas</span><span class=\"o\">.</span><span class=\"n\">area_plot</span><span class=\"o\">.</span><span class=\"n\">Annotation</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logo_image</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logo_position</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dpi</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">85</span>,</span><span class=\"param\">\t<span class=\"n\">transparent_background</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">map_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.gen_plot_points_figure_coordinates", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.gen_plot_points_figure_coordinates", "kind": "function", "doc": "<p>generate plot figure coordinates (ie png image coordinates) from input x,y in area\nprojection coordinates. Purpose is for generating html image maps</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (ndarray[float]):</strong>  x coordinates in current area projection</li>\n<li><strong>y (ndarray[float]):</strong>  y coordinates in current area projection</li>\n<li><strong>figure_dpi (float):</strong>  dpi of figure</li>\n<li><strong>figsize (tuple, optional):</strong>  figure size in inches. Defaults to (12, 10).</li>\n<li><strong>draw_axis_frame (bool, optional):</strong>  Defaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>_type_: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">figure_dpi</span>, </span><span class=\"param\"><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">draw_axis_frame</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_stats", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_stats", "kind": "function", "doc": "<p>plot stats info (min,max,mean,std,MAD,nvals) of vals\n   positioned around colorbar axes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cbar (Axes):</strong>  colorbar axes instance</li>\n<li><strong>vals (np.ndarray):</strong>  values array (after Nan filtering) used to calculate and draw stats\ninfo</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cbar</span>, </span><span class=\"param\"><span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_minimap_bad", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_minimap_bad", "kind": "function", "doc": "<p>draw a minimap to show Nan, FV and out of range values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>percent_valid (float):</strong>  percent of valid data in area</li>\n<li><strong>nan_lats (np.ndarray):</strong>  latitude locations corresponding to Nan data</li>\n<li><strong>nan_lons (np.ndarray):</strong>  longitude locations corresponding to Nan data</li>\n<li><strong>percent_nan (float):</strong>  percent of Nan values in area</li>\n<li><strong>fv_lats (np.ndarray):</strong>  latitude locations corresponding to FV data</li>\n<li><strong>fv_lons (np.ndarray):</strong>  longitude locations corresponding to FV data</li>\n<li><strong>percent_fv (float):</strong>  percent of Fill value values in area</li>\n<li><strong>outside_lats (np.ndarray):</strong>  latitude locations corresponding to out of range data</li>\n<li><strong>outside_lons (np.ndarray):</strong>  longitude locations corresponding to out of range data</li>\n<li><strong>percent_outside (float):</strong>  percent of out of range values in area</li>\n<li><strong>dataset_params (dict):</strong>  data set parameters</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">percent_valid</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">nan_lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">nan_lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">percent_nan</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">fv_lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">fv_lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">percent_fv</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">outside_lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">outside_lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">percent_outside</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_minimap", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_minimap", "kind": "function", "doc": "<p>draw a minimap to show area coverage</p>\n\n<p>Args:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_latitude_vs_vals_plot", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_latitude_vs_vals_plot", "kind": "function", "doc": "<p>plot latitude vs vals</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fig (Figure):</strong>  plot figure</li>\n<li><strong>vals (np.ndarray):</strong>  values to be plotted</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values in degrees</li>\n<li><strong>varname (str):</strong>  name of data set</li>\n<li><strong>units (str):</strong>  units of data set</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fig</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>,</span><span class=\"param\">\t<span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">varname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_histograms", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_histograms", "kind": "function", "doc": "<p>draw two histograms of plot range and full range</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fig (Figure):</strong>  plot figure</li>\n<li><strong>vals (np.ndarray):</strong>  values to be histogrammed</li>\n<li><strong>min_plot_range (float):</strong>  minimum plot range</li>\n<li><strong>max_plot_range (float):</strong>  maximum plot range</li>\n<li><strong>varunits (str):</strong>  units of vals</li>\n<li><strong>cmap (_type_):</strong>  colormap instance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fig</span>,</span><span class=\"param\">\t<span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">min_plot_range</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">max_plot_range</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">varunits</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_mapscale_bar", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_mapscale_bar", "kind": "function", "doc": "<p>draw the map scale bar in km</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxis):</strong>  the main map plot axis</li>\n<li><strong>dataprj ():</strong>  the data projection</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">dataprj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_colorbar", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_colorbar", "kind": "function", "doc": "<p>draw the colorbar</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataset (dict):</strong>  the data set dict</li>\n<li><strong>fig (Figure):</strong>  the plot figure</li>\n<li><strong>scatter (_type_):</strong>  _description_</li>\n<li><strong>varname (str):</strong>  name of data set</li>\n<li><strong>varunits (str):</strong>  units of data set</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>colorbar_axes(Axes): Axes instance for the colorbar</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">scatter</span>, </span><span class=\"param\"><span class=\"n\">varname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">varunits</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.plot_flag_data", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.plot_flag_data", "kind": "function", "doc": "<p>plot flag data</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fig (Figure) :</strong>  the plot figure</li>\n<li><strong>ax (GeoAxesSubplot):</strong>  the main plot axis</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>vals (np.ndarray):</strong>  data containing flag values to plot</li>\n<li><strong>data_set (dict):</strong>  the current data set</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">vals</span>, </span><span class=\"param\"><span class=\"n\">data_set</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.plot_data", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.plot_data", "kind": "function", "doc": "<p>plot lat,lon,vals, data on map</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxesSubplot):</strong>  the main plot axis</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>vals (np.ndarray):</strong>  values to plot</li>\n<li><strong>cmap_info:</strong>  (dict): colormap info</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">cmap_info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">plot_size_scale_factor</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">plot_alpha</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_gridlines", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_gridlines", "kind": "function", "doc": "<p>draw latitude and longitude grid lines on maps</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxesSubplot):</strong>  cartopy axis</li>\n<li><strong>show_gridlines (bool):</strong> </li>\n<li><strong>gridline_color (str):</strong>  color of gridlines</li>\n<li><strong>circle (_type_):</strong>  _description_</li>\n<li><strong>draw_gridlabels (bool, optional):</strong>  _description_. Defaults to True.</li>\n<li><strong>gridlabel_color (str) :</strong>  color of grid labels</li>\n<li><strong>inner_gridlabel_color (str) :</strong>  color of inner grid labels</li>\n<li><strong>longitude_lines (List[float]|None, optional):</strong>  longitude positions for grid lines.</li>\n<li><strong>latitude_lines (List[float]|None, optional):</strong>  latitude positions for grid lines.</li>\n<li><strong>zorder (int, optional):</strong>  vertical order. Defaults to 10.</li>\n<li><strong>for_minimap (bool, optional):</strong>  if used for mini-map. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">show_gridlines</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">gridline_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">circle</span>,</span><span class=\"param\">\t<span class=\"n\">draw_gridlabels</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">gridlabel_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">inner_gridlabel_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">longitude_lines</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latitude_lines</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zorder</span><span class=\"o\">=</span><span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">for_minimap</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_coastlines", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_coastlines", "kind": "function", "doc": "<p>draw coastlines over map</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxesSubplot):</strong>  matplotlib Axis</li>\n<li><strong>dataprj (_type_):</strong>  current cartopy crs</li>\n<li><strong>coastline_color (str):</strong>  coastline color to use</li>\n<li><strong>draw_coastlines (bool):</strong>   draw coastline or not</li>\n<li><strong>use_cartopy_coastline (str):</strong>  'no','low','medium','high'.</li>\n<li><strong>use_antarctica_medium_coastline (bool):</strong>  use antarctic coastline (including iceshelves)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">dataprj</span>,</span><span class=\"param\">\t<span class=\"n\">coastline_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">draw_coastlines</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_cartopy_coastline</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">use_antarctica_medium_coastline</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.draw_area_polygon_mask", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.draw_area_polygon_mask", "kind": "function", "doc": "<p>if area has a data mask defined by one or more polygons, draw these on map</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ax (GeoAxesSubplot):</strong>  cartopy axis</li>\n<li><strong>override_mask_display (bool):</strong>  if set to True (show polygon mask) or False (do not show\npolygon mask), overrides default for area</li>\n<li><strong>override_mask_color (bool):</strong>  set to a color string to override default polygon mask color\nfor area</li>\n<li><strong>dataprj (_type_):</strong>  crs returned by self.setup_projection_and_extent()</li>\n<li><strong>fill (bool, optional):</strong>  fill polygon if True. Defaults to False.</li>\n<li><strong>linestyle (str, optional):</strong>  line style to use for polygon edges. Defaults to \"-\".</li>\n<li><strong>linecolor (str, optional):</strong>  line color to use for polygon edges. Defaults to \"red\".</li>\n<li><strong>linewidth (int, optional):</strong>  line width to use for polygon edges. Defaults to 2.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">geoaxes</span><span class=\"o\">.</span><span class=\"n\">GeoAxes</span>,</span><span class=\"param\">\t<span class=\"n\">override_mask_display</span>,</span><span class=\"param\">\t<span class=\"n\">override_mask_color</span>,</span><span class=\"param\">\t<span class=\"n\">dataprj</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">linestyle</span><span class=\"o\">=</span><span class=\"s1\">&#39;-&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linecolor</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot.Polarplot.setup_projection_and_extent", "modulename": "cpom.areas.area_plot", "qualname": "Polarplot.setup_projection_and_extent", "kind": "function", "doc": "<p>Setup projection and extent for current Area</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>axis_position (List, optional):</strong>  [left,bottom,width,height]. Defaults to None.</li>\n<li><strong>global_view (bool, optional):</strong>  _description_. Defaults to False.</li>\n<li><strong>draw_axis_frame (bool, optional):</strong>  _description_. Defaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>cartopy_geo_axis, data_projection_crs, circle</p>\n  \n  <p>if area has a circular border returns the circle</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">axis_position</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">global_view</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">draw_axis_frame</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.area_plot3d", "modulename": "cpom.areas.area_plot3d", "kind": "module", "doc": "<p>cpom.areas.area_plot3d.py</p>\n\n<h1 id=\"purpose\">Purpose</h1>\n\n<p>Functions to create 3d plots (using plotly library)</p>\n"}, {"fullname": "cpom.areas.area_plot3d.log", "modulename": "cpom.areas.area_plot3d", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.areas.area_plot3d (WARNING)&gt;"}, {"fullname": "cpom.areas.area_plot3d.plot_3d_area", "modulename": "cpom.areas.area_plot3d", "qualname": "plot_3d_area", "kind": "function", "doc": "<p>Functions to create 3d plots for an area</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>area_name (str) :</strong>  3d area definition name as in cpom/areas/definitions_3d/<area_name>.py</li>\n<li><p><strong><code>*data_sets</code> (dict, optional):</strong>  One or more dataset dictionaries. Each dictionary must include the (lats, lons, vals)\nfor a dataset and optional tunable plot parameters. Structure:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">{</span>\n    <span class=\"s2\">&quot;lats&quot;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([]),</span>             <span class=\"c1\"># Required: Latitude values</span>\n    <span class=\"s2\">&quot;lons&quot;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([]),</span>             <span class=\"c1\"># Required: Longitude values</span>\n    <span class=\"s2\">&quot;vals&quot;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([]),</span>             <span class=\"c1\"># Required: Data values</span>\n    <span class=\"s2\">&quot;units&quot;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>                      <span class=\"c1\"># Optional: Units of `vals`</span>\n    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;unnamed&quot;</span><span class=\"p\">,</span>                <span class=\"c1\"># Optional: Name of dataset</span>\n    <span class=\"s2\">&quot;apply_area_mask_to_data&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># Optional: Apply area mask to data</span>\n    <span class=\"s2\">&quot;fill_value&quot;</span><span class=\"p\">:</span> <span class=\"mi\">9999</span><span class=\"p\">,</span>               <span class=\"c1\"># Optional: Fill value to ignore in `vals`</span>\n    <span class=\"s2\">&quot;valid_range&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">min</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"p\">],</span>        <span class=\"c1\"># Optional: Valid range for `vals`</span>\n    <span class=\"s2\">&quot;minimap_val_scalefactor&quot;</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>   <span class=\"c1\"># Optional: Scale factor for bad data marker</span>\n    <span class=\"s2\">&quot;flag_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>                <span class=\"c1\"># Optional: List of flag values</span>\n    <span class=\"s2\">&quot;flag_names&quot;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>                 <span class=\"c1\"># Optional: List of flag names</span>\n    <span class=\"s2\">&quot;flag_colors&quot;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>                <span class=\"c1\"># Optional: Colors for flags or colormap</span>\n    <span class=\"s2\">&quot;color&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>                     <span class=\"c1\"># Optional: color to use to plot vals.</span>\n                                      <span class=\"c1\">#       can be &quot;cmap:coolwarm_r&quot; or color &quot;red&quot;</span>\n                                      <span class=\"c1\">#       cmap must be a supported python cmap name,</span>\n    <span class=\"s2\">&quot;cmap_over_color&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>           <span class=\"c1\"># Optional: can specify an over color for cmap</span>\n    <span class=\"s2\">&quot;cmap_under_color&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>          <span class=\"c1\"># Optional: can specify an under color for cmap</span>\n    <span class=\"s2\">&quot;min_plot_range&quot;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>           <span class=\"c1\"># Optional: Min range for colorbar</span>\n    <span class=\"s2\">&quot;max_plot_range&quot;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>           <span class=\"c1\"># Optional: Max range for colorbar</span>\n    <span class=\"s2\">&quot;plot_size_scale_factor&quot;</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>    <span class=\"c1\"># Optional: Marker size scale factor</span>\n    <span class=\"s2\">&quot;plot_alpha&quot;</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>                <span class=\"c1\"># Optional: Marker transparency (0 to 1)</span>\n    <span class=\"s2\">&quot;var_stride&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>                  <span class=\"c1\"># Optional: plot every N of input vals</span>\n    <span class=\"s2\">&quot;plot_nan_and_fv&quot;</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span>          <span class=\"c1\"># if True, plot just the location of Nan/FV in data</span>\n\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>area_overrides (dict): overide any area definitions in\n                       cpom/areas/definitions_3d/<area_name>.py</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">area_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">data_sets</span>, </span><span class=\"param\"><span class=\"n\">area_overrides</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas", "modulename": "cpom.areas.areas", "kind": "module", "doc": "<p>cpom.areas.areas.py: Area class to define areas for polar plotting</p>\n"}, {"fullname": "cpom.areas.areas.log", "modulename": "cpom.areas.areas", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.areas.areas (WARNING)&gt;"}, {"fullname": "cpom.areas.areas.list_all_area_definition_names", "modulename": "cpom.areas.areas", "qualname": "list_all_area_definition_names", "kind": "function", "doc": "<p>return a list of all area definition names and some additional\ninfo on each.</p>\n\n<p>Raises:</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.list_all_area_definition_names_only", "modulename": "cpom.areas.areas", "qualname": "list_all_area_definition_names_only", "kind": "function", "doc": "<p>return a list of all area definition names (only the names)</p>\n\n<p>Raises:</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.import_module_from_file", "modulename": "cpom.areas.areas", "qualname": "import_module_from_file", "kind": "function", "doc": "<p>Imports a Python module from a specified file path.</p>\n\n<p>The function dynamically loads a Python module from the given file path.\nThe module name is derived from the file name, excluding its extension\nand directory path. The module is also added to <code>sys.modules</code> for\nstandard import access.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  The file path to the Python module to be imported.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ImportError:</strong>  If the module cannot be imported, either due to an\ninvalid file path or a failure during execution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: A tuple containing:\n      - module (module): The imported module object.\n      - module_name (str): The name of the imported module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.Area", "modulename": "cpom.areas.areas", "qualname": "Area", "kind": "class", "doc": "<p>class to define polar areas for plotting etc</p>\n"}, {"fullname": "cpom.areas.areas.Area.__init__", "modulename": "cpom.areas.areas", "qualname": "Area.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  area name. Must be in all_areas</li>\n<li><strong>overrides (dict|None):</strong>  dictionary to override any parameters in area definition dicts</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">overrides</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">area_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.areas.areas.Area.name", "modulename": "cpom.areas.areas", "qualname": "Area.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.areas.areas.Area.mask", "modulename": "cpom.areas.areas", "qualname": "Area.mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[cpom.masks.masks.Mask]"}, {"fullname": "cpom.areas.areas.Area.load_area", "modulename": "cpom.areas.areas", "qualname": "Area.load_area", "kind": "function", "doc": "<p>Load area settings for current area name</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">overrides</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">area_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.Area.latlon_to_xy", "modulename": "cpom.areas.areas", "qualname": "Area.latlon_to_xy", "kind": "function", "doc": "<p>convert latitude and longitude to x,y in area's projection</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray|float|list):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray|float|list):</strong>  longitude values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(np.ndarray,np.ndarray): x,y</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.Area.xy_to_latlon", "modulename": "cpom.areas.areas", "qualname": "Area.xy_to_latlon", "kind": "function", "doc": "<p>convert from x,y to latitide, longitiude in area's projection</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x coordinates</li>\n<li><strong>y (np.ndarray):</strong>  y coordinates</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(np.ndarray,np.ndarray): latitude values, longitude values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.Area.inside_xy_extent", "modulename": "cpom.areas.areas", "qualname": "Area.inside_xy_extent", "kind": "function", "doc": "<p>filter points based on x,y extent of area</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  latitude values (degs N)</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values (deg E)</li>\n<li><strong>inputs_are_xy (bool):</strong>  if True treat inputs as cartesian: x=lats, y=lons</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(lats_inside, lons_inside, x_inside, y_inside, indices_inside, n_inside):\n  lats_inside (np.ndarray): lat values inside area\n  lons_inside (np.ndarray): lon values inside area\n  x_inside (np.ndarray): projected x coords inside area\n  y_inside (np.ndarray): projected y coords inside area\n  indices_inside (np.ndarray): indices of original lats,lons that are inside\n  n_inside (int): number of original lats, lons that were inside</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.Area.inside_latlon_bounds", "modulename": "cpom.areas.areas", "qualname": "Area.inside_latlon_bounds", "kind": "function", "doc": "<p>find if input latitude and longitude locations are inside area's lat/lon extent\n   bounds</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  array of latitude values (degs N)</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude values (degs E)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bounded_lats|None, bounded_lons|None, bounded_indices|None, bounded_indices.size):</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas.Area.inside_mask", "modulename": "cpom.areas.areas", "qualname": "Area.inside_mask", "kind": "function", "doc": "<p>Find indices of x,y coords inside the area's data mask (if there is one).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x coordinates in areas's projection</li>\n<li><strong>y (np.ndarray):</strong>  y coordinates in areas's projection</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>indices_in_maskarea (np.ndarray) : indices inside mask or empty np.ndarray\n  n_inside (int) : number of points inside mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas3d", "modulename": "cpom.areas.areas3d", "kind": "module", "doc": "<p>cpom.areas.areas3d.py: Area class to define 3D areas for polar plotting</p>\n"}, {"fullname": "cpom.areas.areas3d.log", "modulename": "cpom.areas.areas3d", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.areas.areas3d (WARNING)&gt;"}, {"fullname": "cpom.areas.areas3d.list_all_3d_area_definition_names", "modulename": "cpom.areas.areas3d", "qualname": "list_all_3d_area_definition_names", "kind": "function", "doc": "<p>return a list of all area definition names and some additional\ninfo on each.</p>\n\n<p>Raises:</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas3d.list_all_3d_area_definition_names_only", "modulename": "cpom.areas.areas3d", "qualname": "list_all_3d_area_definition_names_only", "kind": "function", "doc": "<p>return a list of all area definition names (only the names)</p>\n\n<p>Raises:</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas3d.Area3d", "modulename": "cpom.areas.areas3d", "qualname": "Area3d", "kind": "class", "doc": "<p>class to define 3d polar areas for plotting etc</p>\n"}, {"fullname": "cpom.areas.areas3d.Area3d.__init__", "modulename": "cpom.areas.areas3d", "qualname": "Area3d.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  area name. Must be in all_areas</li>\n<li><strong>overrides (dict|None):</strong>  dictionary to override any parameters in area definition dicts</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">overrides</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">area_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.areas.areas3d.Area3d.name", "modulename": "cpom.areas.areas3d", "qualname": "Area3d.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.areas.areas3d.Area3d.mask", "modulename": "cpom.areas.areas3d", "qualname": "Area3d.mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[cpom.masks.masks.Mask]"}, {"fullname": "cpom.areas.areas3d.Area3d.load_3d_area", "modulename": "cpom.areas.areas3d", "qualname": "Area3d.load_3d_area", "kind": "function", "doc": "<p>Load area settings for current area name</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">overrides</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">area_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas3d.Area3d.latlon_to_xy", "modulename": "cpom.areas.areas3d", "qualname": "Area3d.latlon_to_xy", "kind": "function", "doc": "<p>convert latitude and longitude to x,y in area's projection</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray|float|list):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray|float|list):</strong>  longitude values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(np.ndarray,np.ndarray): x,y</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas3d.Area3d.xy_to_latlon", "modulename": "cpom.areas.areas3d", "qualname": "Area3d.xy_to_latlon", "kind": "function", "doc": "<p>convert from x,y to latitide, longitiude in area's projection</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x coordinates</li>\n<li><strong>y (np.ndarray):</strong>  y coordinates</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(np.ndarray,np.ndarray): latitude values, longitude values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas3d.Area3d.inside_xy_extent", "modulename": "cpom.areas.areas3d", "qualname": "Area3d.inside_xy_extent", "kind": "function", "doc": "<p>filter points based on x,y extent of area</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  latitude values (degs N)</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values (deg E)</li>\n<li><strong>inputs_are_xy (bool):</strong>  if True treat inputs as cartesian: x=lats, y=lons</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(lats_inside, lons_inside, x_inside, y_inside, indices_inside, n_inside):\n  lats_inside (np.ndarray): lat values inside area\n  lons_inside (np.ndarray): lon values inside area\n  x_inside (np.ndarray): projected x coords inside area\n  y_inside (np.ndarray): projected y coords inside area\n  indices_inside (np.ndarray): indices of original lats,lons that are inside\n  n_inside (int): number of original lats, lons that were inside</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas3d.Area3d.inside_latlon_bounds", "modulename": "cpom.areas.areas3d", "qualname": "Area3d.inside_latlon_bounds", "kind": "function", "doc": "<p>find if input latitude and longitude locations are inside area's lat/lon extent\n   bounds</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  array of latitude values (degs N)</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude values (degs E)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bounded_lats|None, bounded_lons|None, bounded_indices|None, bounded_indices.size):</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.areas3d.Area3d.inside_mask", "modulename": "cpom.areas.areas3d", "qualname": "Area3d.inside_mask", "kind": "function", "doc": "<p>Find indices of x,y coords inside the area's data mask (if there is one).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x coordinates in areas's projection</li>\n<li><strong>y (np.ndarray):</strong>  y coordinates in areas's projection</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>indices_in_maskarea (np.ndarray) : indices inside mask or empty np.ndarray\n  n_inside (int) : number of points inside mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.definitions", "modulename": "cpom.areas.definitions", "kind": "module", "doc": "<p>cpom.areas.definitions</p>\n\n<h1 id=\"purpose\">Purpose</h1>\n\n<p>Directory containing CPOM area definitions</p>\n"}, {"fullname": "cpom.areas.definitions.amundsen_sea_embayment", "modulename": "cpom.areas.definitions.amundsen_sea_embayment", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.amundsen_sea_embayment.area_definition", "modulename": "cpom.areas.definitions.amundsen_sea_embayment", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Amundsen Sea Embayment&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: -103.0, &#x27;centre_lat&#x27;: -75.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 800, &#x27;height_km&#x27;: 800, &#x27;min_elevation&#x27;: -500, &#x27;max_elevation&#x27;: 3000, &#x27;minlon&#x27;: 0, &#x27;maxlon&#x27;: 360, &#x27;minlat&#x27;: -80, &#x27;maxlat&#x27;: -71, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;ase_xylimits_mask&#x27;, &#x27;masktype&#x27;: &#x27;xylimits&#x27;, &#x27;basin_numbers&#x27;: [], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [-0.02, 0.11, 0.7, 0.7], &#x27;simple_axes&#x27;: [0.09, 0.12, 0.78, 0.78], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;basic_land&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;low&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: True, &#x27;use_cartopy_coastline&#x27;: &#x27;no&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.2, 0.86), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.4, 0.96), &#x27;mask_long_name_position&#x27;: (0.2, 0.84), &#x27;mask_long_name_position_simple&#x27;: (0.4, 0.94), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.2, 0.92), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.94), &#x27;stats_position_x_offset&#x27;: 0, &#x27;stats_position_y_offset&#x27;: 0.77, &#x27;stats_position_x_offset_simple&#x27;: -0.2, &#x27;stats_position_y_offset_simple&#x27;: -0.08, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.08, 0.05, 0.55, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.28, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: [230, 240, 250, 260, 270, 280, 290, 300], &#x27;latitude_gridlines&#x27;: [-70, -72, -74, -76, -78], &#x27;gridline_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: -58.3, &#x27;labels_at_top&#x27;: True, &#x27;labels_at_bottom&#x27;: True, &#x27;labels_at_left&#x27;: True, &#x27;labels_at_right&#x27;: True, &#x27;show_scalebar&#x27;: True, &#x27;mapscale&#x27;: [-112.0, -72.0, -104.0, -75.0, 100, &#x27;black&#x27;, 10], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.64, 0.69, 0.25, 0.25], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [-85, -81, -77, -73], &#x27;bad_data_longitude_lines&#x27;: [-30, -40, -50, -60, -70, -80, -90, -100], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (1.6, 1.0), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: True, &#x27;minimap_axes&#x27;: [0.5, 0.84, 0.14, 0.14], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.antarctica", "modulename": "cpom.areas.definitions.antarctica", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.antarctica.area_definition", "modulename": "cpom.areas.definitions.antarctica", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Antarctica&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: True, &#x27;specify_by_bounding_lat&#x27;: True, &#x27;bounding_lat&#x27;: -63.15, &#x27;specify_by_centre&#x27;: False, &#x27;centre_lon&#x27;: 0.0, &#x27;centre_lat&#x27;: -90.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 6600, &#x27;height_km&#x27;: 6100, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: -62.0, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: &#x27;&#x27;, &#x27;basin_numbers&#x27;: [], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [-0.02, 0.1, 0.74, 0.74], &#x27;simple_axes&#x27;: [0.081, 0.1, 0.83, 0.83], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;basic_land&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;low&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: True, &#x27;use_cartopy_coastline&#x27;: &#x27;no&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.31, 0.88), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.43, 0.97), &#x27;mask_long_name_position&#x27;: (0.26, 0.86), &#x27;mask_long_name_position_simple&#x27;: (0.36, 0.95), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.04, 0.9), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.9), &#x27;stats_position_x_offset&#x27;: 0, &#x27;stats_position_y_offset&#x27;: 0, &#x27;stats_position_x_offset_simple&#x27;: -0.13, &#x27;stats_position_y_offset_simple&#x27;: 0, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.08, 0.05, 0.55, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.22, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: range(0, 380, 20), &#x27;latitude_gridlines&#x27;: [-82, -78, -74, -70, -66, -88], &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: -58.3, &#x27;labels_at_top&#x27;: False, &#x27;labels_at_bottom&#x27;: False, &#x27;labels_at_left&#x27;: False, &#x27;labels_at_right&#x27;: False, &#x27;show_scalebar&#x27;: True, &#x27;mapscale&#x27;: [-179.9, -65.0, 0.0, -90.0, 1000, &#x27;black&#x27;, 70], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [-50, -70], &#x27;bad_data_longitude_lines&#x27;: [0, 60, 120, 180, -120, -60], &#x27;bad_data_minimap_val_scalefactor&#x27;: 0.01, &#x27;bad_data_minimap_legend_pos&#x27;: (1.38, 1.1), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.antarctica_basic", "modulename": "cpom.areas.definitions.antarctica_basic", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_basic.area_definition", "modulename": "cpom.areas.definitions.antarctica_basic", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;antarctica&#x27;, &#x27;background_image&#x27;: &#x27;basic_land&#x27;, &#x27;mapscale&#x27;: [-178.0, -65.0, 0.0, -90.0, 1000, &#x27;grey&#x27;, 70], &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;inner_gridlabel_color&#x27;: &#x27;darkgrey&#x27;}"}, {"fullname": "cpom.areas.definitions.antarctica_fi", "modulename": "cpom.areas.definitions.antarctica_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>Data mask: floating ice from bedmachine v2</strong></p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_fi.area_definition", "modulename": "cpom.areas.definitions.antarctica_fi", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Antarctica [floating ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;antarctica&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [3], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.antarctica_hs", "modulename": "cpom.areas.definitions.antarctica_hs", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>background_image: hillshade</strong></p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_hs.area_definition", "modulename": "cpom.areas.definitions.antarctica_hs", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;antarctica&#x27;, &#x27;background_image&#x27;: [&#x27;ibcso_bathymetry&#x27;, &#x27;hillshade&#x27;], &#x27;background_image_alpha&#x27;: [0.14, 0.18], &#x27;background_color&#x27;: &#x27;white&#x27;}"}, {"fullname": "cpom.areas.definitions.antarctica_hs_fi", "modulename": "cpom.areas.definitions.antarctica_hs_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>background_image: hillshade</strong>\n<strong>Data mask: floating ice from bedmachine v2</strong></p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_hs_fi.area_definition", "modulename": "cpom.areas.definitions.antarctica_hs_fi", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Antarctica [floating ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;antarctica_hs&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [3], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.antarctica_hs_is", "modulename": "cpom.areas.definitions.antarctica_hs_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>background_image: hillshade</strong>\n<strong>Data mask: grounded ice from bedmachine v2</strong></p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_hs_is.area_definition", "modulename": "cpom.areas.definitions.antarctica_hs_is", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Antarctica [grounded ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;antarctica_hs&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [2, 4], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.antarctica_hs_is_li_portal", "modulename": "cpom.areas.definitions.antarctica_hs_is_li_portal", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica_hs_is</p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_hs_is_li_portal.area_definition", "modulename": "cpom.areas.definitions.antarctica_hs_is_li_portal", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;antarctica_hs_is&#x27;, &#x27;area_long_name_position_simple&#x27;: (0.43, 0.17), &#x27;varname_annotation_position_xy_simple&#x27;: (0.38, 0.96), &#x27;mask_long_name_position_simple&#x27;: (-20, 0.95), &#x27;stats_position_x_offset_simple&#x27;: -20, &#x27;stats_position_y_offset_simple&#x27;: 0}"}, {"fullname": "cpom.areas.definitions.antarctica_is", "modulename": "cpom.areas.definitions.antarctica_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica\n<strong>Data mask: grounded ice from bedmachine v2</strong></p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_is.area_definition", "modulename": "cpom.areas.definitions.antarctica_is", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Antarctica [grounded ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;antarctica&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [2, 4], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.antarctica_is_li_portal", "modulename": "cpom.areas.definitions.antarctica_is_li_portal", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: antarctica_hs</p>\n"}, {"fullname": "cpom.areas.definitions.antarctica_is_li_portal.area_definition", "modulename": "cpom.areas.definitions.antarctica_is_li_portal", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;antarctica_is&#x27;, &#x27;area_long_name_position_simple&#x27;: (0.43, 0.17), &#x27;varname_annotation_position_xy_simple&#x27;: (0.38, 0.96), &#x27;mask_long_name_position_simple&#x27;: (-20, 0.95), &#x27;stats_position_x_offset_simple&#x27;: -20, &#x27;stats_position_y_offset_simple&#x27;: 0}"}, {"fullname": "cpom.areas.definitions.arctic", "modulename": "cpom.areas.definitions.arctic", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.arctic.area_definition", "modulename": "cpom.areas.definitions.arctic", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Arctic&#x27;, &#x27;hemisphere&#x27;: &#x27;north&#x27;, &#x27;epsg_number&#x27;: 3413, &#x27;round&#x27;: True, &#x27;specify_by_bounding_lat&#x27;: True, &#x27;bounding_lat&#x27;: 59.0, &#x27;specify_by_centre&#x27;: False, &#x27;centre_lon&#x27;: -45.0, &#x27;centre_lat&#x27;: 90.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: -45.0, &#x27;width_km&#x27;: 6200, &#x27;height_km&#x27;: 6200, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: 59.0, &#x27;maxlat&#x27;: 90.0, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: None, &#x27;masktype&#x27;: None, &#x27;basin_numbers&#x27;: None, &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [-0.03, 0.11, 0.76, 0.76], &#x27;simple_axes&#x27;: [0.081, 0.1, 0.83, 0.83], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;basic_land&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;medium&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: False, &#x27;use_cartopy_coastline&#x27;: &#x27;medium&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.33, 0.91), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.47, 0.965), &#x27;mask_long_name_position&#x27;: (0.28, 0.89), &#x27;mask_long_name_position_simple&#x27;: (0.4, 0.945), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.04, 0.9), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.9), &#x27;stats_position_x_offset&#x27;: 0, &#x27;stats_position_y_offset&#x27;: 0, &#x27;stats_position_x_offset_simple&#x27;: -0.13, &#x27;stats_position_y_offset_simple&#x27;: 0, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.08, 0.05, 0.55, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.22, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: range(0, 380, 20), &#x27;latitude_gridlines&#x27;: [60, 70, 80], &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: 57.5, &#x27;labels_at_top&#x27;: False, &#x27;labels_at_bottom&#x27;: False, &#x27;labels_at_left&#x27;: False, &#x27;labels_at_right&#x27;: False, &#x27;show_scalebar&#x27;: True, &#x27;mapscale&#x27;: [-179.9, -65.0, 0.0, -90.0, 1000, &#x27;black&#x27;, 70], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [-50, -70], &#x27;bad_data_longitude_lines&#x27;: [0, 60, 120, 180, -120, -60], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (1.38, 1.1), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.arctic_cpy", "modulename": "cpom.areas.definitions.arctic_cpy", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: arctic\n<strong>Data mask: floating ice from bedmachine v3</strong></p>\n"}, {"fullname": "cpom.areas.definitions.arctic_cpy.area_definition", "modulename": "cpom.areas.definitions.arctic_cpy", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;arctic&#x27;, &#x27;background_image&#x27;: &#x27;natural_earth_faded&#x27;}"}, {"fullname": "cpom.areas.definitions.ase", "modulename": "cpom.areas.definitions.ase", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: amundsen_sea_embayment</p>\n"}, {"fullname": "cpom.areas.definitions.ase.area_definition", "modulename": "cpom.areas.definitions.ase", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;amundsen_sea_embayment&#x27;, &#x27;area_summary&#x27;: &#x27;Amundsen Sea Embayment (Thwaites, PIG glaciers)&#x27;}"}, {"fullname": "cpom.areas.definitions.ase_hs", "modulename": "cpom.areas.definitions.ase_hs", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: amundsen_sea_embayment</p>\n"}, {"fullname": "cpom.areas.definitions.ase_hs.area_definition", "modulename": "cpom.areas.definitions.ase_hs", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;amundsen_sea_embayment&#x27;, &#x27;area_summary&#x27;: &#x27;Amundsen Sea Embayment (Thwaites, PIG glaciers), [hillshade]&#x27;, &#x27;background_image&#x27;: [&#x27;ibcso_bathymetry&#x27;, &#x27;hillshade&#x27;], &#x27;background_image_alpha&#x27;: [0.14, 0.18], &#x27;background_color&#x27;: &#x27;white&#x27;}"}, {"fullname": "cpom.areas.definitions.ase_is", "modulename": "cpom.areas.definitions.ase_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: amundsen_sea_embayment</p>\n"}, {"fullname": "cpom.areas.definitions.ase_is.area_definition", "modulename": "cpom.areas.definitions.ase_is", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;amundsen_sea_embayment&#x27;, &#x27;area_summary&#x27;: &#x27;Amundsen Sea Embayment (Thwaites, PIG glaciers), [grounded ice mask]&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [2, 4], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.global", "modulename": "cpom.areas.definitions.global", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.global.area_definition", "modulename": "cpom.areas.definitions.global", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Global (Mercator)&#x27;, &#x27;hemisphere&#x27;: &#x27;both&#x27;, &#x27;epsg_number&#x27;: 3395, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: True, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: False, &#x27;centre_lon&#x27;: -45.0, &#x27;centre_lat&#x27;: 90.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: 15.77, &#x27;width_km&#x27;: 6200, &#x27;height_km&#x27;: 6200, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: 90.0, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: None, &#x27;masktype&#x27;: None, &#x27;basin_numbers&#x27;: None, &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [0.015, 0.2, 0.62, 0.62], &#x27;simple_axes&#x27;: [0.041, 0.1, 0.92, 0.92], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;basic_land&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;medium&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: False, &#x27;use_cartopy_coastline&#x27;: &#x27;medium&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.3, 0.73), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.47, 0.965), &#x27;mask_long_name_position&#x27;: (0.28, 0.89), &#x27;mask_long_name_position_simple&#x27;: (0.4, 0.945), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.04, 0.9), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.9), &#x27;stats_position_x_offset&#x27;: 0, &#x27;stats_position_y_offset&#x27;: -0.2, &#x27;stats_position_x_offset_simple&#x27;: -0.13, &#x27;stats_position_y_offset_simple&#x27;: 0, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.08, 0.25, 0.55, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.22, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: range(0, 380, 20), &#x27;latitude_gridlines&#x27;: range(-80, 90, 10), &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: 57.5, &#x27;labels_at_top&#x27;: True, &#x27;labels_at_bottom&#x27;: True, &#x27;labels_at_left&#x27;: True, &#x27;labels_at_right&#x27;: True, &#x27;show_scalebar&#x27;: False, &#x27;mapscale&#x27;: [0, -65.0, 0.0, -90.0, 1000, &#x27;black&#x27;, 70], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [-50, -70], &#x27;bad_data_longitude_lines&#x27;: [0, 60, 120, 180, -120, -60], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (1.38, 1.1), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.greenland", "modulename": "cpom.areas.definitions.greenland", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.greenland.area_definition", "modulename": "cpom.areas.definitions.greenland", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Greenland&#x27;, &#x27;hemisphere&#x27;: &#x27;north&#x27;, &#x27;epsg_number&#x27;: 3413, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: -41.75, &#x27;centre_lat&#x27;: 71.5, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 1540, &#x27;height_km&#x27;: 2740, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 285.0, &#x27;maxlon&#x27;: 350.0, &#x27;minlat&#x27;: 59.0, &#x27;maxlat&#x27;: 85.0, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: None, &#x27;masktype&#x27;: None, &#x27;basin_numbers&#x27;: None, &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [0.03, 0.05, 0.8, 0.83], &#x27;simple_axes&#x27;: [0.2, 0.04, 0.8, 0.9], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;basic_land&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;low&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: False, &#x27;use_cartopy_coastline&#x27;: &#x27;medium&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.39, 0.91), &#x27;area_long_name_position_simple&#x27;: (0.5, 0.97), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;mask_long_name_position&#x27;: (0.32, 0.89), &#x27;mask_long_name_position_simple&#x27;: (0.48, 0.95), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.02, 0.91), &#x27;varname_annotation_position_xy_simple&#x27;: (0.02, 0.91), &#x27;stats_position_x_offset&#x27;: 0, &#x27;stats_position_y_offset&#x27;: 0, &#x27;stats_position_x_offset_simple&#x27;: 0, &#x27;stats_position_y_offset_simple&#x27;: 0, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;lower right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;vertical&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.07, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.13, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.08, 0.05, 0.55, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.08, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: range(-90, 20, 10), &#x27;latitude_gridlines&#x27;: [60, 65, 70, 75, 80], &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;black&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: -58.3, &#x27;labels_at_top&#x27;: False, &#x27;labels_at_bottom&#x27;: True, &#x27;labels_at_left&#x27;: False, &#x27;labels_at_right&#x27;: True, &#x27;show_scalebar&#x27;: True, &#x27;mapscale&#x27;: [-35, 60, -40.0, 70.0, 400, &#x27;black&#x27;, 30], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [50, 60, 70, 80], &#x27;bad_data_longitude_lines&#x27;: [-20, -40, -60], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (1.94, 1.0), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.greenland_fi", "modulename": "cpom.areas.definitions.greenland_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<strong>Data mask: floating ice from bedmachine v3</strong></p>\n"}, {"fullname": "cpom.areas.definitions.greenland_fi.area_definition", "modulename": "cpom.areas.definitions.greenland_fi", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Greenland [floating ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;greenland&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;greenland_bedmachine_v3_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [3], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.greenland_hs", "modulename": "cpom.areas.definitions.greenland_hs", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<strong>background_image: hillshade</strong></p>\n"}, {"fullname": "cpom.areas.definitions.greenland_hs.area_definition", "modulename": "cpom.areas.definitions.greenland_hs", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;greenland&#x27;, &#x27;background_image&#x27;: [&#x27;ibcao_bathymetry&#x27;, &#x27;hillshade&#x27;], &#x27;background_image_alpha&#x27;: [0.14, 0.18], &#x27;background_color&#x27;: &#x27;white&#x27;}"}, {"fullname": "cpom.areas.definitions.greenland_hs_fi", "modulename": "cpom.areas.definitions.greenland_hs_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<em>*mask: greenland_bedmachine_v3_grid_mask[3] == floating ice *</em></p>\n"}, {"fullname": "cpom.areas.definitions.greenland_hs_fi.area_definition", "modulename": "cpom.areas.definitions.greenland_hs_fi", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Greenland [floating ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;greenland_hs&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;greenland_bedmachine_v3_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [3], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.greenland_hs_is", "modulename": "cpom.areas.definitions.greenland_hs_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<strong>mask: greenland_bedmachine_v3_grid_mask[2] == grounded ice sheet</strong></p>\n"}, {"fullname": "cpom.areas.definitions.greenland_hs_is.area_definition", "modulename": "cpom.areas.definitions.greenland_hs_is", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Greenland [grounded ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;greenland_hs&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;greenland_bedmachine_v3_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [2], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.greenland_hs_is_li_portal", "modulename": "cpom.areas.definitions.greenland_hs_is_li_portal", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland_is_li_portal</p>\n\n<p>Add hillshade bg</p>\n"}, {"fullname": "cpom.areas.definitions.greenland_hs_is_li_portal.area_definition", "modulename": "cpom.areas.definitions.greenland_hs_is_li_portal", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Greenland&#x27;, &#x27;use_definitions_from&#x27;: &#x27;greenland_is_li_portal&#x27;, &#x27;background_image&#x27;: [&#x27;ibcao_bathymetry&#x27;, &#x27;hillshade&#x27;], &#x27;background_image_alpha&#x27;: [0.14, 0.18], &#x27;background_color&#x27;: &#x27;white&#x27;}"}, {"fullname": "cpom.areas.definitions.greenland_is", "modulename": "cpom.areas.definitions.greenland_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<strong>Data mask: grounded ice from bedmachine v3</strong></p>\n"}, {"fullname": "cpom.areas.definitions.greenland_is.area_definition", "modulename": "cpom.areas.definitions.greenland_is", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Greenland [grounded ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;greenland&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;greenland_bedmachine_v3_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [2], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.greenland_is_li_portal", "modulename": "cpom.areas.definitions.greenland_is_li_portal", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: greenland\n<strong>Data mask: grounded ice from bedmachine v3</strong></p>\n"}, {"fullname": "cpom.areas.definitions.greenland_is_li_portal.area_definition", "modulename": "cpom.areas.definitions.greenland_is_li_portal", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Greenland [grounded ice mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;greenland&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;greenland_bedmachine_v3_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [2], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;simple_axes&#x27;: [0.105, 0.04, 0.8, 0.9], &#x27;vertical_colorbar_axes_simple&#x27;: [0.09, 0.06, 0.02, 0.55], &#x27;stats_position_x_offset_simple&#x27;: -20, &#x27;stats_position_y_offset_simple&#x27;: 0, &#x27;varname_annotation_position_xy_simple&#x27;: (0.3, 0.96), &#x27;area_long_name_position_simple&#x27;: (0.55, 0.12), &#x27;mask_long_name_position_simple&#x27;: (-20, 0.95)}"}, {"fullname": "cpom.areas.definitions.po_river_italy", "modulename": "cpom.areas.definitions.po_river_italy", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.po_river_italy.area_definition", "modulename": "cpom.areas.definitions.po_river_italy", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;River Po, Italy&#x27;, &#x27;hemisphere&#x27;: &#x27;north&#x27;, &#x27;epsg_number&#x27;: 3395, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: True, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: 10.52, &#x27;centre_lat&#x27;: 44.92, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: 58.7, &#x27;llcorner_lon&#x27;: 12.7, &#x27;lon_0&#x27;: 10.52, &#x27;width_km&#x27;: 6, &#x27;height_km&#x27;: 6, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: 90.0, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: None, &#x27;masktype&#x27;: None, &#x27;basin_numbers&#x27;: None, &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [0.0, 0.1, 0.7, 0.7], &#x27;simple_axes&#x27;: [0.11, 0.12, 0.75, 0.75], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;google_satellite&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;vvhigh&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: False, &#x27;use_cartopy_coastline&#x27;: &#x27;high&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.3, 0.83), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.47, 0.965), &#x27;mask_long_name_position&#x27;: (0.28, 0.89), &#x27;mask_long_name_position_simple&#x27;: (0.4, 0.945), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.04, 0.9), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.9), &#x27;stats_position_x_offset&#x27;: 0.45, &#x27;stats_position_y_offset&#x27;: 0.76, &#x27;stats_position_x_offset_simple&#x27;: -0.18, &#x27;stats_position_y_offset_simple&#x27;: -0.08, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.13, 0.05, 0.45, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.25, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: [9.5, 10, 10.5], &#x27;latitude_gridlines&#x27;: [44.92], &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: 57.5, &#x27;labels_at_top&#x27;: True, &#x27;labels_at_bottom&#x27;: True, &#x27;labels_at_left&#x27;: True, &#x27;labels_at_right&#x27;: True, &#x27;show_scalebar&#x27;: False, &#x27;mapscale&#x27;: [0, -65.0, 0.0, -90.0, 1000, &#x27;black&#x27;, 70], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.69, 0.67, 0.21, 0.21], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [56, 58, 60], &#x27;bad_data_longitude_lines&#x27;: [0, 2, 4, 6, 8, 10, 12, 14, 16], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (1.65, 1.1), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.ronne_filchner", "modulename": "cpom.areas.definitions.ronne_filchner", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.ronne_filchner.area_definition", "modulename": "cpom.areas.definitions.ronne_filchner", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Ronne Filchner&#x27;, &#x27;area_summary&#x27;: &#x27;Ronne Filchner ice shelves&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: 300.0, &#x27;centre_lat&#x27;: -79.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 1295, &#x27;height_km&#x27;: 1295, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 2000, &#x27;minlon&#x27;: 260.0, &#x27;maxlon&#x27;: 350.0, &#x27;minlat&#x27;: -87.0, &#x27;maxlat&#x27;: -70.0, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;ronne_filchner_xylimits_mask&#x27;, &#x27;masktype&#x27;: &#x27;xylimits&#x27;, &#x27;basin_numbers&#x27;: [], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [-0.02, 0.11, 0.71, 0.71], &#x27;simple_axes&#x27;: [0.09, 0.12, 0.79, 0.79], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;basic_land&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;low&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: True, &#x27;use_cartopy_coastline&#x27;: &#x27;no&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.2, 0.86), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.4, 0.96), &#x27;mask_long_name_position&#x27;: (0.2, 0.84), &#x27;mask_long_name_position_simple&#x27;: (0.4, 0.94), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.2, 0.92), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.94), &#x27;stats_position_x_offset&#x27;: 0, &#x27;stats_position_y_offset&#x27;: 0.77, &#x27;stats_position_x_offset_simple&#x27;: -0.2, &#x27;stats_position_y_offset_simple&#x27;: -0.08, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.08, 0.05, 0.55, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.28, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: [260, 270, 280, 290, 300, 310, 320, 330], &#x27;latitude_gridlines&#x27;: [-71, -73, -75, -77, -79, -81, -83, -85, -87], &#x27;gridline_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: -58.3, &#x27;labels_at_top&#x27;: True, &#x27;labels_at_bottom&#x27;: True, &#x27;labels_at_left&#x27;: True, &#x27;labels_at_right&#x27;: True, &#x27;show_scalebar&#x27;: True, &#x27;mapscale&#x27;: [-85.0, -84.0, -65.0, -80.0, 200, &#x27;black&#x27;, 20], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.65, 0.69, 0.26, 0.26], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [-85, -81, -77, -73], &#x27;bad_data_longitude_lines&#x27;: [-30, -40, -50, -60, -70, -80, -90, -100], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (1.5, 1.0), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: True, &#x27;minimap_axes&#x27;: [0.5, 0.84, 0.14, 0.14], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.ronne_filchner_fi", "modulename": "cpom.areas.definitions.ronne_filchner_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner\n<strong>mask: floating ice</strong></p>\n"}, {"fullname": "cpom.areas.definitions.ronne_filchner_fi.area_definition", "modulename": "cpom.areas.definitions.ronne_filchner_fi", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;ronne_filchner&#x27;, &#x27;area_summary&#x27;: &#x27;Ronne Filchner ice shelves [floating ice mask]&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [3], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.ronne_filchner_hs", "modulename": "cpom.areas.definitions.ronne_filchner_hs", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner\n<strong>background_image: hillshade</strong></p>\n"}, {"fullname": "cpom.areas.definitions.ronne_filchner_hs.area_definition", "modulename": "cpom.areas.definitions.ronne_filchner_hs", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;ronne_filchner&#x27;, &#x27;area_summary&#x27;: &#x27;Ronne Filchner ice shelves [hillshade]&#x27;, &#x27;background_image&#x27;: [&#x27;ibcso_bathymetry&#x27;, &#x27;hillshade&#x27;, &#x27;ant_iceshelves&#x27;], &#x27;background_image_resolution&#x27;: [&#x27;low&#x27;, &#x27;_&#x27;], &#x27;background_image_alpha&#x27;: [0.5, 0.7, 0.3], &#x27;background_color&#x27;: &#x27;aliceblue&#x27;, &#x27;gridline_color&#x27;: &#x27;darkgrey&#x27;, &#x27;hillshade_params&#x27;: {&#x27;dem&#x27;: &#x27;awi_ant_1km_grounded&#x27;, &#x27;azimuth&#x27;: 120.0}, &#x27;draw_coastlines&#x27;: False}"}, {"fullname": "cpom.areas.definitions.ronne_filchner_hs_fi", "modulename": "cpom.areas.definitions.ronne_filchner_hs_fi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner\n<strong>background_image: hillshade</strong>\n<strong>mask: floating ice</strong></p>\n"}, {"fullname": "cpom.areas.definitions.ronne_filchner_hs_fi.area_definition", "modulename": "cpom.areas.definitions.ronne_filchner_hs_fi", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;ronne_filchner_hs&#x27;, &#x27;area_summary&#x27;: &#x27;Ronne Filchner ice shelves [hillshade, floating ice mask]&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [3], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.ronne_filchner_hs_is", "modulename": "cpom.areas.definitions.ronne_filchner_hs_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner\n<strong>background_image: hillshade</strong>\n<strong>mask: grounded ice</strong></p>\n"}, {"fullname": "cpom.areas.definitions.ronne_filchner_hs_is.area_definition", "modulename": "cpom.areas.definitions.ronne_filchner_hs_is", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;ronne_filchner_hs&#x27;, &#x27;area_summary&#x27;: &#x27;Ronne Filchner ice shelves [hillshade, grounded ice mask]&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [2, 4], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.ronne_filchner_hs_isfi", "modulename": "cpom.areas.definitions.ronne_filchner_hs_isfi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner_hs\n<strong>background_image: hillshade</strong>\n<strong>mask: grounded ice+floating ice</strong></p>\n"}, {"fullname": "cpom.areas.definitions.ronne_filchner_hs_isfi.area_definition", "modulename": "cpom.areas.definitions.ronne_filchner_hs_isfi", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_definitions_from&#x27;: &#x27;ronne_filchner_hs&#x27;, &#x27;area_summary&#x27;: &#x27;Ronne Filchner ice shelves [hillshade, grounded &amp; floating ice mask]&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [2, 3, 4], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.ronne_filchner_is", "modulename": "cpom.areas.definitions.ronne_filchner_is", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner\n<strong>mask: grounded ice</strong></p>\n"}, {"fullname": "cpom.areas.definitions.ronne_filchner_is.area_definition", "modulename": "cpom.areas.definitions.ronne_filchner_is", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Ronne Filchner ice shelves [ice sheet mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;ronne_filchner&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [2, 4], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.ronne_filchner_isfi", "modulename": "cpom.areas.definitions.ronne_filchner_isfi", "kind": "module", "doc": "<h1 id=\"area-definition\">Area definition</h1>\n\n<h2 id=\"summary\">Summary:</h2>\n\n<p>Based on area: ronne_filchner\n<strong>mask: grounded ice + floating ice</strong></p>\n"}, {"fullname": "cpom.areas.definitions.ronne_filchner_isfi.area_definition", "modulename": "cpom.areas.definitions.ronne_filchner_isfi", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;area_summary&#x27;: &#x27;Ronne Filchner ice shelves [ice sheet and ice shelf mask]&#x27;, &#x27;use_definitions_from&#x27;: &#x27;ronne_filchner&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;masktype&#x27;: &#x27;grid&#x27;, &#x27;basin_numbers&#x27;: [2, 3, 4], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;}"}, {"fullname": "cpom.areas.definitions.spirit", "modulename": "cpom.areas.definitions.spirit", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.spirit.area_definition", "modulename": "cpom.areas.definitions.spirit", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;SPIRIT Zone, E. Antarctica&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: -63.15, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: 141.0, &#x27;centre_lat&#x27;: -68, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: -67.5, &#x27;llcorner_lon&#x27;: 150.0, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 600, &#x27;height_km&#x27;: 600, &#x27;min_elevation&#x27;: 0.0, &#x27;max_elevation&#x27;: 2400.0, &#x27;minlon&#x27;: 130.0, &#x27;maxlon&#x27;: 152.0, &#x27;minlat&#x27;: -72.0, &#x27;maxlat&#x27;: -64.0, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: &#x27;&#x27;, &#x27;basin_numbers&#x27;: [], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [0.01, 0.16, 0.66, 0.66], &#x27;simple_axes&#x27;: [0.13, 0.16, 0.69, 0.69], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: &#x27;white&#x27;, &#x27;background_image&#x27;: [&#x27;ibcso_bathymetry&#x27;, &#x27;hillshade&#x27;], &#x27;background_image_alpha&#x27;: [0.14, 0.28], &#x27;background_image_resolution&#x27;: &#x27;high&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: True, &#x27;use_cartopy_coastline&#x27;: &#x27;no&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.29, 0.89), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.36, 0.92), &#x27;mask_long_name_position&#x27;: (0.26, 0.86), &#x27;mask_long_name_position_simple&#x27;: (0.36, 0.9), &#x27;mask_long_name_fontsize&#x27;: 10, &#x27;varname_annotation_position_xy&#x27;: (0.04, 0.9), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.91), &#x27;position_stats_manually&#x27;: True, &#x27;nvals_position&#x27;: (0.0, 0.06), &#x27;min_position&#x27;: (0.0, 0.04), &#x27;max_position&#x27;: (0.0, 0.02), &#x27;mean_position&#x27;: (0.2, 0.06), &#x27;median_position&#x27;: (0.2, 0.04), &#x27;mad_position&#x27;: (0.4, 0.06), &#x27;stdev_position&#x27;: (0.4, 0.04), &#x27;stats_position_x_offset&#x27;: 0, &#x27;stats_position_y_offset&#x27;: 0, &#x27;stats_position_x_offset_simple&#x27;: -0.13, &#x27;stats_position_y_offset_simple&#x27;: 0, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.08, 0.05, 0.55, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.22, 0.05, 0.55, 0.02], &#x27;latitude_gridlines&#x27;: [-64, -66, -68, -70], &#x27;longitude_gridlines&#x27;: [135, 140, 145, 150], &#x27;gridline_color&#x27;: &#x27;black&#x27;, &#x27;gridlabel_color&#x27;: &#x27;black&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: None, &#x27;labels_at_top&#x27;: True, &#x27;labels_at_bottom&#x27;: False, &#x27;labels_at_left&#x27;: True, &#x27;labels_at_right&#x27;: True, &#x27;show_scalebar&#x27;: True, &#x27;mapscale&#x27;: [142, -65.6, 100, -68, 100, &#x27;black&#x27;, 8], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.705, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.88, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.75, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.8, 0.75, 0.19, 0.19], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [-50, -70], &#x27;bad_data_longitude_lines&#x27;: [0, 60, 120, 180, -120, -60], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (0.75, 0.0), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: True, &#x27;minimap_axes&#x27;: [0.63, 0.81, 0.18, 0.18], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: [-68, 141, 200000, &#x27;red&#x27;], &#x27;minimap_draw_gridlines&#x27;: True, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.swedish_lakes", "modulename": "cpom.areas.definitions.swedish_lakes", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.swedish_lakes.area_definition", "modulename": "cpom.areas.definitions.swedish_lakes", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Swedish Lakes&#x27;, &#x27;hemisphere&#x27;: &#x27;north&#x27;, &#x27;epsg_number&#x27;: 3395, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: True, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: 13.61, &#x27;centre_lat&#x27;: 58.7, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: 58.7, &#x27;llcorner_lon&#x27;: 13.61, &#x27;lon_0&#x27;: 13.61, &#x27;width_km&#x27;: 2700, &#x27;height_km&#x27;: 2700, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: 90.0, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: None, &#x27;masktype&#x27;: None, &#x27;basin_numbers&#x27;: None, &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [0.0, 0.1, 0.7, 0.7], &#x27;simple_axes&#x27;: [0.11, 0.12, 0.75, 0.75], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;google_satellite&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;high&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: False, &#x27;use_cartopy_coastline&#x27;: &#x27;high&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.3, 0.83), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.47, 0.965), &#x27;mask_long_name_position&#x27;: (0.28, 0.89), &#x27;mask_long_name_position_simple&#x27;: (0.4, 0.945), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.04, 0.9), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.9), &#x27;stats_position_x_offset&#x27;: 0.45, &#x27;stats_position_y_offset&#x27;: 0.76, &#x27;stats_position_x_offset_simple&#x27;: -0.18, &#x27;stats_position_y_offset_simple&#x27;: -0.08, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.13, 0.05, 0.45, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.25, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: range(0, 25, 5), &#x27;latitude_gridlines&#x27;: range(50, 75, 2), &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: 57.5, &#x27;labels_at_top&#x27;: True, &#x27;labels_at_bottom&#x27;: True, &#x27;labels_at_left&#x27;: True, &#x27;labels_at_right&#x27;: True, &#x27;show_scalebar&#x27;: False, &#x27;mapscale&#x27;: [0, -65.0, 0.0, -90.0, 1000, &#x27;black&#x27;, 70], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.69, 0.67, 0.21, 0.21], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [56, 58, 60], &#x27;bad_data_longitude_lines&#x27;: [0, 2, 4, 6, 8, 10, 12, 14, 16], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (1.65, 1.1), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.swedish_lakes2", "modulename": "cpom.areas.definitions.swedish_lakes2", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.swedish_lakes2.area_definition", "modulename": "cpom.areas.definitions.swedish_lakes2", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Swedish Lakes&#x27;, &#x27;hemisphere&#x27;: &#x27;north&#x27;, &#x27;epsg_number&#x27;: 3395, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: True, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: 13.61, &#x27;centre_lat&#x27;: 58.7, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: 58.7, &#x27;llcorner_lon&#x27;: 13.61, &#x27;lon_0&#x27;: 13.61, &#x27;width_km&#x27;: 800, &#x27;height_km&#x27;: 800, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: 90.0, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: None, &#x27;masktype&#x27;: None, &#x27;basin_numbers&#x27;: None, &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [0.0, 0.1, 0.7, 0.7], &#x27;simple_axes&#x27;: [0.11, 0.12, 0.75, 0.75], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;google_satellite&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;high&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: False, &#x27;use_cartopy_coastline&#x27;: &#x27;high&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.3, 0.83), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.47, 0.965), &#x27;mask_long_name_position&#x27;: (0.28, 0.89), &#x27;mask_long_name_position_simple&#x27;: (0.4, 0.945), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.04, 0.9), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.9), &#x27;stats_position_x_offset&#x27;: 0.45, &#x27;stats_position_y_offset&#x27;: 0.76, &#x27;stats_position_x_offset_simple&#x27;: -0.18, &#x27;stats_position_y_offset_simple&#x27;: -0.08, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.13, 0.05, 0.45, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.25, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: range(0, 25, 5), &#x27;latitude_gridlines&#x27;: range(50, 75, 2), &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: 57.5, &#x27;labels_at_top&#x27;: True, &#x27;labels_at_bottom&#x27;: True, &#x27;labels_at_left&#x27;: True, &#x27;labels_at_right&#x27;: True, &#x27;show_scalebar&#x27;: False, &#x27;mapscale&#x27;: [0, -65.0, 0.0, -90.0, 1000, &#x27;black&#x27;, 70], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.69, 0.67, 0.21, 0.21], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [56, 58, 60], &#x27;bad_data_longitude_lines&#x27;: [0, 2, 4, 6, 8, 10, 12, 14, 16], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (1.65, 1.1), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.swedish_lakes3", "modulename": "cpom.areas.definitions.swedish_lakes3", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.swedish_lakes3.area_definition", "modulename": "cpom.areas.definitions.swedish_lakes3", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Swedish Lakes&#x27;, &#x27;hemisphere&#x27;: &#x27;north&#x27;, &#x27;epsg_number&#x27;: 3395, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: True, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: 12.7, &#x27;centre_lat&#x27;: 58.5, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: 58.7, &#x27;llcorner_lon&#x27;: 12.7, &#x27;lon_0&#x27;: 13.61, &#x27;width_km&#x27;: 140, &#x27;height_km&#x27;: 140, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: 90.0, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: None, &#x27;masktype&#x27;: None, &#x27;basin_numbers&#x27;: None, &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [0.0, 0.1, 0.7, 0.7], &#x27;simple_axes&#x27;: [0.11, 0.12, 0.75, 0.75], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;google_satellite&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;vhigh&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: True, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: False, &#x27;use_cartopy_coastline&#x27;: &#x27;high&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.3, 0.83), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.47, 0.965), &#x27;mask_long_name_position&#x27;: (0.28, 0.89), &#x27;mask_long_name_position_simple&#x27;: (0.4, 0.945), &#x27;mask_long_name_fontsize&#x27;: 9, &#x27;varname_annotation_position_xy&#x27;: (0.04, 0.9), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.9), &#x27;stats_position_x_offset&#x27;: 0.45, &#x27;stats_position_y_offset&#x27;: 0.76, &#x27;stats_position_x_offset_simple&#x27;: -0.18, &#x27;stats_position_y_offset_simple&#x27;: -0.08, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.13, 0.05, 0.45, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.25, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: range(0, 25, 5), &#x27;latitude_gridlines&#x27;: range(50, 75, 2), &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: 57.5, &#x27;labels_at_top&#x27;: True, &#x27;labels_at_bottom&#x27;: True, &#x27;labels_at_left&#x27;: True, &#x27;labels_at_right&#x27;: True, &#x27;show_scalebar&#x27;: False, &#x27;mapscale&#x27;: [0, -65.0, 0.0, -90.0, 1000, &#x27;black&#x27;, 70], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.735, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.89, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.77, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.69, 0.67, 0.21, 0.21], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [56, 58, 60], &#x27;bad_data_longitude_lines&#x27;: [0, 2, 4, 6, 8, 10, 12, 14, 16], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (1.65, 1.1), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions.vostok", "modulename": "cpom.areas.definitions.vostok", "kind": "module", "doc": "<p>Area definition</p>\n"}, {"fullname": "cpom.areas.definitions.vostok.area_definition", "modulename": "cpom.areas.definitions.vostok", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Lake Vostok, E. Antarctica&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: -63.15, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: 105.0, &#x27;centre_lat&#x27;: -77.2, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 400, &#x27;height_km&#x27;: 380, &#x27;min_elevation&#x27;: 3478.0, &#x27;max_elevation&#x27;: 3529.0, &#x27;minlon&#x27;: 101.0, &#x27;maxlon&#x27;: 107.5, &#x27;minlat&#x27;: -78.7, &#x27;maxlat&#x27;: -76.1, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;basin_numbers&#x27;: [4], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;axes&#x27;: [0.0, 0.16, 0.67, 0.67], &#x27;simple_axes&#x27;: [0.09, 0.14, 0.76, 0.76], &#x27;draw_axis_frame&#x27;: True, &#x27;background_color&#x27;: None, &#x27;background_image&#x27;: &#x27;moa&#x27;, &#x27;background_image_alpha&#x27;: 1.0, &#x27;background_image_resolution&#x27;: &#x27;high&#x27;, &#x27;hillshade_params&#x27;: None, &#x27;show_polygon_overlay_in_main_map&#x27;: True, &#x27;grid_polygon_overlay_mask&#x27;: None, &#x27;apply_hillshade_to_vals&#x27;: False, &#x27;draw_coastlines&#x27;: False, &#x27;coastline_color&#x27;: &#x27;grey&#x27;, &#x27;use_antarctica_medium_coastline&#x27;: False, &#x27;use_cartopy_coastline&#x27;: &#x27;no&#x27;, &#x27;show_gridlines&#x27;: True, &#x27;area_long_name_position&#x27;: (0.29, 0.89), &#x27;area_long_name_fontsize&#x27;: 16, &#x27;area_long_name_position_simple&#x27;: (0.36, 0.92), &#x27;mask_long_name_position&#x27;: (0.26, 0.86), &#x27;mask_long_name_position_simple&#x27;: (0.36, 0.9), &#x27;mask_long_name_fontsize&#x27;: 10, &#x27;varname_annotation_position_xy&#x27;: (0.04, 0.9), &#x27;varname_annotation_position_xy_simple&#x27;: (0.04, 0.91), &#x27;position_stats_manually&#x27;: True, &#x27;nvals_position&#x27;: (0.0, 0.06), &#x27;min_position&#x27;: (0.0, 0.04), &#x27;max_position&#x27;: (0.0, 0.02), &#x27;mean_position&#x27;: (0.2, 0.06), &#x27;median_position&#x27;: (0.2, 0.04), &#x27;mad_position&#x27;: (0.4, 0.06), &#x27;stdev_position&#x27;: (0.4, 0.04), &#x27;stats_position_x_offset&#x27;: 0, &#x27;stats_position_y_offset&#x27;: 0, &#x27;stats_position_x_offset_simple&#x27;: -0.13, &#x27;stats_position_y_offset_simple&#x27;: 0, &#x27;include_flag_legend&#x27;: False, &#x27;flag_legend_xylocation&#x27;: [None, None], &#x27;flag_legend_location&#x27;: &#x27;upper right&#x27;, &#x27;include_flag_percents&#x27;: True, &#x27;flag_perc_axis&#x27;: [0.74, 0.25, 0.1], &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;draw_colorbar&#x27;: True, &#x27;colorbar_orientation&#x27;: &#x27;horizontal&#x27;, &#x27;vertical_colorbar_axes&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;vertical_colorbar_axes_simple&#x27;: [0.04, 0.05, 0.02, 0.55], &#x27;horizontal_colorbar_axes&#x27;: [0.08, 0.05, 0.55, 0.02], &#x27;horizontal_colorbar_axes_simple&#x27;: [0.22, 0.05, 0.55, 0.02], &#x27;longitude_gridlines&#x27;: array([ 96,  98, 100, 102, 104, 106, 108, 110, 112]), &#x27;latitude_gridlines&#x27;: array([-79. , -78.5, -78. , -77.5, -77. , -76.5, -76. , -75.5]), &#x27;gridline_color&#x27;: &#x27;lightgrey&#x27;, &#x27;gridlabel_color&#x27;: &#x27;darkgrey&#x27;, &#x27;gridlabel_size&#x27;: 8, &#x27;draw_gridlabels&#x27;: True, &#x27;inner_gridlabel_color&#x27;: &#x27;white&#x27;, &#x27;inner_gridlabel_size&#x27;: 8, &#x27;latitude_of_radial_labels&#x27;: -58.3, &#x27;labels_at_top&#x27;: True, &#x27;labels_at_bottom&#x27;: True, &#x27;labels_at_left&#x27;: True, &#x27;labels_at_right&#x27;: True, &#x27;show_scalebar&#x27;: True, &#x27;mapscale&#x27;: [111, -76.8, 106, -77.5, 100, &#x27;white&#x27;, 6], &#x27;show_histograms&#x27;: True, &#x27;histogram_plotrange_axes&#x27;: [0.705, 0.3, 0.08, 0.35], &#x27;histogram_fullrange_axes&#x27;: [0.86, 0.3, 0.08, 0.35], &#x27;show_latitude_scatter&#x27;: True, &#x27;latvals_axes&#x27;: [0.75, 0.05, 0.17, 0.2], &#x27;show_bad_data_map&#x27;: True, &#x27;bad_data_minimap_axes&#x27;: [0.69, 0.7, 0.25, 0.25], &#x27;bad_data_minimap_bounding_lat&#x27;: None, &#x27;bad_data_minimap_circle&#x27;: None, &#x27;bad_data_minimap_draw_gridlines&#x27;: True, &#x27;bad_data_minimap_gridlines_color&#x27;: &#x27;lightgrey&#x27;, &#x27;bad_data_latitude_lines&#x27;: [-50, -70], &#x27;bad_data_longitude_lines&#x27;: [0, 60, 120, 180, -120, -60], &#x27;bad_data_minimap_val_scalefactor&#x27;: 1.0, &#x27;bad_data_minimap_legend_pos&#x27;: (0.75, 0.2), &#x27;bad_data_minimap_coastline_resolution&#x27;: &#x27;medium&#x27;, &#x27;show_minimap&#x27;: False, &#x27;minimap_axes&#x27;: [0.64, 0.67, 0.29, 0.29], &#x27;minimap_bounding_lat&#x27;: None, &#x27;minimap_circle&#x27;: None, &#x27;minimap_draw_gridlines&#x27;: False, &#x27;minimap_val_scalefactor&#x27;: 1.0, &#x27;minimap_legend_pos&#x27;: (1.38, 1.1)}"}, {"fullname": "cpom.areas.definitions_3d", "modulename": "cpom.areas.definitions_3d", "kind": "module", "doc": "<p>cpom.areas.definitions_3d</p>\n\n<h1 id=\"purpose\">Purpose</h1>\n\n<p>Directory containing CPOM 3D area definitions</p>\n"}, {"fullname": "cpom.areas.definitions_3d.ant_atl14", "modulename": "cpom.areas.definitions_3d.ant_atl14", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"antarctica-dem-atl-14-100m\">Antarctica DEM : ATL-14 100m</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.ant_atl14.area_definition", "modulename": "cpom.areas.definitions_3d.ant_atl14", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Antarctica DEM : ATL-14 100m&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: True, &#x27;bounding_lat&#x27;: -63.15, &#x27;specify_by_centre&#x27;: False, &#x27;centre_lon&#x27;: 0.0, &#x27;centre_lat&#x27;: -90.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: -50.0, &#x27;llcorner_lon&#x27;: 225.0, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 5500, &#x27;height_km&#x27;: 4500, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: -62.0, &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;dem_name&#x27;: &#x27;atl14_ant_100m_004_004_zarr&#x27;, &#x27;smooth_dem&#x27;: False, &#x27;page_width&#x27;: 1400, &#x27;dem_stride&#x27;: 50, &#x27;zaxis_multiplier&#x27;: 0.05, &#x27;add_mss_layer&#x27;: True, &#x27;mss_gridarea&#x27;: &#x27;antarctic_ocean&#x27;, &#x27;mss_binsize_km&#x27;: 10, &#x27;view_angle_elevation&#x27;: 90, &#x27;view_angle_azimuth&#x27;: 90, &#x27;plot_zoom&#x27;: 1.2, &#x27;zaxis_limits&#x27;: [-300.0, 4500], &#x27;light_xdirection&#x27;: 10000.0, &#x27;light_ydirection&#x27;: 0, &#x27;light_zdirection&#x27;: 1.0, &#x27;place_annotations&#x27;: ((-80, 190, 3234.0, &#x27;Ross IS&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-76, 302, 200.0, &#x27;Ronne IS&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-70.5, 256, 100.0, &#x27;Amundsen Sea&#x27;, &#x27;white&#x27;, None, 9, 0.9), (-71.5, 315, 100.0, &#x27;Weddell Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-73.5, 190, 100.0, &#x27;Ross Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-67, 278, 100.0, &#x27;Bellingshausen Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-69, 71, 100.0, &#x27;Amery Ice Shelf&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-69, 116, 100.0, &#x27;Totten Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-75.9, 253.25, 100.0, &#x27;Thwaites Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-77.3, 106.0, 3500, &#x27;Vostok&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-90.0, 0.0, 2840, &#x27;Pole&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9)), &#x27;lat_annotations&#x27;: ((-70, 220, 150, 10, 2, 0), (-60, 220, 150, 10, 2, 0)), &#x27;lon_annotations&#x27;: ([-66, 120, 150, 10, 2, 0], [-66, 160, 150, 10, 2, 0], [-66, 200, 150, 10, 2, 0], [-66, 240, 150, 10, 2, 0], [-66, 280, 150, 10, 2, 0], [-66, 320, 150, 10, 2, 0], [-66, 0, 150, 10, 2, 0], [-66, 40, 150, 10, 2, 0], [-66, 80, 150, 10, 2, 0]), &#x27;lat_lines&#x27;: range(-60, -80, -10), &#x27;lon_lines&#x27;: range(0, 360, 20), &#x27;latlon_line_colour&#x27;: &#x27;white&#x27;, &#x27;latlon_lines_increment&#x27;: 0.01, &#x27;latlon_lines_size&#x27;: 0.3, &#x27;latlon_lines_opacity&#x27;: 0.5, &#x27;latlon_lines_elevation&#x27;: 200}"}, {"fullname": "cpom.areas.definitions_3d.ant_atl14_a1_ne", "modulename": "cpom.areas.definitions_3d.ant_atl14_a1_ne", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"antarctica-dem-1km-rema-gapless-v13\">Antarctica DEM: 1km REMA Gapless v1::3</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.ant_atl14_a1_ne.area_definition", "modulename": "cpom.areas.definitions_3d.ant_atl14_a1_ne", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Antarctica 100m DEM : ATL14 A1 (NE) Sector&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: -63.15, &#x27;specify_by_centre&#x27;: False, &#x27;centre_lon&#x27;: 320.0, &#x27;centre_lat&#x27;: -70.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: True, &#x27;llcorner_lat&#x27;: -90, &#x27;llcorner_lon&#x27;: 0.0, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 2630, &#x27;height_km&#x27;: 2270, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: -62.0, &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;dem_name&#x27;: &#x27;alt14_ant_a1_100m_004_004_zarr&#x27;, &#x27;smooth_dem&#x27;: False, &#x27;page_width&#x27;: 1400, &#x27;dem_stride&#x27;: 20, &#x27;zaxis_multiplier&#x27;: 0.05, &#x27;add_mss_layer&#x27;: True, &#x27;mss_gridarea&#x27;: &#x27;antarctic_ocean&#x27;, &#x27;mss_binsize_km&#x27;: 10, &#x27;view_angle_elevation&#x27;: 90, &#x27;view_angle_azimuth&#x27;: 90, &#x27;plot_zoom&#x27;: 1.2, &#x27;zaxis_limits&#x27;: [-300.0, 4500], &#x27;light_xdirection&#x27;: 10000.0, &#x27;light_ydirection&#x27;: 0, &#x27;light_zdirection&#x27;: 1.0, &#x27;place_annotations&#x27;: ((-80, 190, 3234.0, &#x27;Ross IS&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-76, 302, 200.0, &#x27;Ronne IS&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-70.5, 256, 100.0, &#x27;Amundsen Sea&#x27;, &#x27;white&#x27;, None, 9, 0.9), (-71.5, 315, 100.0, &#x27;Weddell Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-73.5, 190, 100.0, &#x27;Ross Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-67, 278, 100.0, &#x27;Bellingshausen Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-69, 71, 100.0, &#x27;Amery Ice Shelf&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-69, 116, 100.0, &#x27;Totten Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-75.9, 253.25, 100.0, &#x27;Thwaites Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-77.3, 106.0, 3500, &#x27;Vostok&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-90.0, 0.0, 2840, &#x27;Pole&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9)), &#x27;lat_annotations&#x27;: ((-70, 220, 150, 10, 2, 0), (-60, 220, 150, 10, 2, 0)), &#x27;lon_annotations&#x27;: ([-66, 120, 150, 10, 2, 0], [-66, 160, 150, 10, 2, 0], [-66, 200, 150, 10, 2, 0], [-66, 240, 150, 10, 2, 0], [-66, 280, 150, 10, 2, 0], [-66, 320, 150, 10, 2, 0], [-66, 0, 150, 10, 2, 0], [-66, 40, 150, 10, 2, 0], [-66, 80, 150, 10, 2, 0]), &#x27;lat_lines&#x27;: range(-60, -80, -10), &#x27;lon_lines&#x27;: range(0, 360, 20), &#x27;latlon_line_colour&#x27;: &#x27;white&#x27;, &#x27;latlon_lines_increment&#x27;: 0.01, &#x27;latlon_lines_size&#x27;: 0.3, &#x27;latlon_lines_opacity&#x27;: 0.5, &#x27;latlon_lines_elevation&#x27;: 200}"}, {"fullname": "cpom.areas.definitions_3d.ant_atl14_a2_nw", "modulename": "cpom.areas.definitions_3d.ant_atl14_a2_nw", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"antarctica-dem-1km-rema-gapless-v13\">Antarctica DEM: 1km REMA Gapless v1::3</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.ant_atl14_a2_nw.area_definition", "modulename": "cpom.areas.definitions_3d.ant_atl14_a2_nw", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Antarctica 100m DEM : ATL14 A2 (NW) Sector&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: -63.15, &#x27;specify_by_centre&#x27;: False, &#x27;centre_lon&#x27;: 320.0, &#x27;centre_lat&#x27;: -70.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: True, &#x27;llcorner_lat&#x27;: -65.779, &#x27;llcorner_lon&#x27;: -90.0, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 2670, &#x27;height_km&#x27;: 2270, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: -62.0, &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;dem_name&#x27;: &#x27;atl14_ant_100m_004_004_zarr&#x27;, &#x27;smooth_dem&#x27;: False, &#x27;page_width&#x27;: 1400, &#x27;dem_stride&#x27;: 12, &#x27;zaxis_multiplier&#x27;: 0.05, &#x27;add_mss_layer&#x27;: True, &#x27;mss_gridarea&#x27;: &#x27;antarctic_ocean&#x27;, &#x27;mss_binsize_km&#x27;: 10, &#x27;view_angle_elevation&#x27;: 90, &#x27;view_angle_azimuth&#x27;: 90, &#x27;plot_zoom&#x27;: 1.2, &#x27;zaxis_limits&#x27;: [-300.0, 4500], &#x27;light_xdirection&#x27;: 10000.0, &#x27;light_ydirection&#x27;: 0, &#x27;light_zdirection&#x27;: 1.0, &#x27;place_annotations&#x27;: ((-80, 190, 3234.0, &#x27;Ross IS&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-76, 302, 200.0, &#x27;Ronne IS&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-70.5, 256, 100.0, &#x27;Amundsen Sea&#x27;, &#x27;white&#x27;, None, 9, 0.9), (-71.5, 315, 100.0, &#x27;Weddell Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-73.5, 190, 100.0, &#x27;Ross Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-67, 278, 100.0, &#x27;Bellingshausen Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-69, 71, 100.0, &#x27;Amery Ice Shelf&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-69, 116, 100.0, &#x27;Totten Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-75.9, 253.25, 100.0, &#x27;Thwaites Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-77.3, 106.0, 3500, &#x27;Vostok&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-90.0, 0.0, 2840, &#x27;Pole&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9)), &#x27;lat_annotations&#x27;: ((-70, 220, 150, 10, 2, 0), (-60, 220, 150, 10, 2, 0)), &#x27;lon_annotations&#x27;: ([-66, 120, 150, 10, 2, 0], [-66, 160, 150, 10, 2, 0], [-66, 200, 150, 10, 2, 0], [-66, 240, 150, 10, 2, 0], [-66, 280, 150, 10, 2, 0], [-66, 320, 150, 10, 2, 0], [-66, 0, 150, 10, 2, 0], [-66, 40, 150, 10, 2, 0], [-66, 80, 150, 10, 2, 0]), &#x27;lat_lines&#x27;: range(-60, -80, -10), &#x27;lon_lines&#x27;: range(0, 360, 20), &#x27;latlon_line_colour&#x27;: &#x27;white&#x27;, &#x27;latlon_lines_increment&#x27;: 0.01, &#x27;latlon_lines_size&#x27;: 0.3, &#x27;latlon_lines_opacity&#x27;: 0.5, &#x27;latlon_lines_elevation&#x27;: 200}"}, {"fullname": "cpom.areas.definitions_3d.ant_atl14_a3_sw", "modulename": "cpom.areas.definitions_3d.ant_atl14_a3_sw", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"antarctica-100m-dem-atl14-a3-sw-sector\">Antarctica 100m DEM : ATL14 A3 (SW) Sector</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.ant_atl14_a3_sw.area_definition", "modulename": "cpom.areas.definitions_3d.ant_atl14_a3_sw", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Antarctica 100m DEM : ATL14 A3 (SW) Sector&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: -63.15, &#x27;specify_by_centre&#x27;: False, &#x27;centre_lon&#x27;: 320.0, &#x27;centre_lat&#x27;: -70.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: True, &#x27;llcorner_lat&#x27;: -67.852, &#x27;llcorner_lon&#x27;: 235.2, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 2000, &#x27;height_km&#x27;: 1390, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: -62.0, &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;dem_name&#x27;: &#x27;alt14_ant_a3_100m_004_004_zarr&#x27;, &#x27;smooth_dem&#x27;: False, &#x27;page_width&#x27;: 1400, &#x27;dem_stride&#x27;: 50, &#x27;zaxis_multiplier&#x27;: 0.05, &#x27;add_mss_layer&#x27;: True, &#x27;mss_gridarea&#x27;: &#x27;antarctic_ocean&#x27;, &#x27;mss_binsize_km&#x27;: 10, &#x27;view_angle_elevation&#x27;: 90, &#x27;view_angle_azimuth&#x27;: 90, &#x27;plot_zoom&#x27;: 1.2, &#x27;zaxis_limits&#x27;: [-300.0, 4500], &#x27;light_xdirection&#x27;: 10000.0, &#x27;light_ydirection&#x27;: 0, &#x27;light_zdirection&#x27;: 1.0, &#x27;place_annotations&#x27;: ((-80, 190, 3234.0, &#x27;Ross IS&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-76, 302, 200.0, &#x27;Ronne IS&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-70.5, 256, 100.0, &#x27;Amundsen Sea&#x27;, &#x27;white&#x27;, None, 9, 0.9), (-71.5, 315, 100.0, &#x27;Weddell Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-73.5, 190, 100.0, &#x27;Ross Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-67, 278, 100.0, &#x27;Bellingshausen Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-69, 71, 100.0, &#x27;Amery Ice Shelf&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-69, 116, 100.0, &#x27;Totten Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-75.9, 253.25, 100.0, &#x27;Thwaites Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-77.3, 106.0, 3500, &#x27;Vostok&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-90.0, 0.0, 2840, &#x27;Pole&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9)), &#x27;lat_annotations&#x27;: ((-70, 220, 150, 10, 2, 0), (-60, 220, 150, 10, 2, 0)), &#x27;lon_annotations&#x27;: ([-66, 120, 150, 10, 2, 0], [-66, 160, 150, 10, 2, 0], [-66, 200, 150, 10, 2, 0], [-66, 240, 150, 10, 2, 0], [-66, 280, 150, 10, 2, 0], [-66, 320, 150, 10, 2, 0], [-66, 0, 150, 10, 2, 0], [-66, 40, 150, 10, 2, 0], [-66, 80, 150, 10, 2, 0]), &#x27;lat_lines&#x27;: range(-60, -80, -10), &#x27;lon_lines&#x27;: range(0, 360, 20), &#x27;latlon_line_colour&#x27;: &#x27;white&#x27;, &#x27;latlon_lines_increment&#x27;: 0.01, &#x27;latlon_lines_size&#x27;: 0.3, &#x27;latlon_lines_opacity&#x27;: 0.5, &#x27;latlon_lines_elevation&#x27;: 200}"}, {"fullname": "cpom.areas.definitions_3d.ant_atl14_a4_se", "modulename": "cpom.areas.definitions_3d.ant_atl14_a4_se", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"antarctica-100m-dem-atl14-a4-se-sector\">Antarctica 100m DEM : ATL14 A4 (SE) Sector</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.ant_atl14_a4_se.area_definition", "modulename": "cpom.areas.definitions_3d.ant_atl14_a4_se", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Antarctica 100m DEM : ATL14 A4 (SE) Sector&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: -63.15, &#x27;specify_by_centre&#x27;: False, &#x27;centre_lon&#x27;: 320.0, &#x27;centre_lat&#x27;: -70.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: True, &#x27;llcorner_lat&#x27;: -70.04, &#x27;llcorner_lon&#x27;: 180.0, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 2790, &#x27;height_km&#x27;: 2190, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: -62.0, &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;dem_name&#x27;: &#x27;alt14_ant_a4_100m_004_004_zarr&#x27;, &#x27;smooth_dem&#x27;: False, &#x27;page_width&#x27;: 1400, &#x27;dem_stride&#x27;: 50, &#x27;zaxis_multiplier&#x27;: 0.05, &#x27;add_mss_layer&#x27;: True, &#x27;mss_gridarea&#x27;: &#x27;antarctic_ocean&#x27;, &#x27;mss_binsize_km&#x27;: 10, &#x27;view_angle_elevation&#x27;: 90, &#x27;view_angle_azimuth&#x27;: 90, &#x27;plot_zoom&#x27;: 1.2, &#x27;zaxis_limits&#x27;: [-300.0, 4500], &#x27;light_xdirection&#x27;: 10000.0, &#x27;light_ydirection&#x27;: 0, &#x27;light_zdirection&#x27;: 1.0, &#x27;place_annotations&#x27;: ((-80, 190, 3234.0, &#x27;Ross IS&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-76, 302, 200.0, &#x27;Ronne IS&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-70.5, 256, 100.0, &#x27;Amundsen Sea&#x27;, &#x27;white&#x27;, None, 9, 0.9), (-71.5, 315, 100.0, &#x27;Weddell Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-73.5, 190, 100.0, &#x27;Ross Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-67, 278, 100.0, &#x27;Bellingshausen Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-69, 71, 100.0, &#x27;Amery Ice Shelf&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-69, 116, 100.0, &#x27;Totten Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-75.9, 253.25, 100.0, &#x27;Thwaites Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-77.3, 106.0, 3500, &#x27;Vostok&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-90.0, 0.0, 2840, &#x27;Pole&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9)), &#x27;lat_annotations&#x27;: ((-70, 220, 150, 10, 2, 0), (-60, 220, 150, 10, 2, 0)), &#x27;lon_annotations&#x27;: ([-66, 120, 150, 10, 2, 0], [-66, 160, 150, 10, 2, 0], [-66, 200, 150, 10, 2, 0], [-66, 240, 150, 10, 2, 0], [-66, 280, 150, 10, 2, 0], [-66, 320, 150, 10, 2, 0], [-66, 0, 150, 10, 2, 0], [-66, 40, 150, 10, 2, 0], [-66, 80, 150, 10, 2, 0]), &#x27;lat_lines&#x27;: range(-60, -80, -10), &#x27;lon_lines&#x27;: range(0, 360, 20), &#x27;latlon_line_colour&#x27;: &#x27;white&#x27;, &#x27;latlon_lines_increment&#x27;: 0.01, &#x27;latlon_lines_size&#x27;: 0.3, &#x27;latlon_lines_opacity&#x27;: 0.5, &#x27;latlon_lines_elevation&#x27;: 200}"}, {"fullname": "cpom.areas.definitions_3d.antarctica", "modulename": "cpom.areas.definitions_3d.antarctica", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"antarctica-dem-1km-rema-gapless-v13\">Antarctica DEM: 1km REMA Gapless v1::3</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.antarctica.area_definition", "modulename": "cpom.areas.definitions_3d.antarctica", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Antarctica DEM: 1km REMA Gapless v1::3&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: True, &#x27;bounding_lat&#x27;: -63.15, &#x27;specify_by_centre&#x27;: False, &#x27;centre_lon&#x27;: 0.0, &#x27;centre_lat&#x27;: -90.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: -50.0, &#x27;llcorner_lon&#x27;: 225.0, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 5500, &#x27;height_km&#x27;: 4500, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 0.0, &#x27;maxlon&#x27;: 360.0, &#x27;minlat&#x27;: -90.0, &#x27;maxlat&#x27;: -62.0, &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;dem_name&#x27;: &#x27;rema_gapless_1km_zarr&#x27;, &#x27;smooth_dem&#x27;: True, &#x27;page_width&#x27;: 1400, &#x27;dem_stride&#x27;: 3, &#x27;zaxis_multiplier&#x27;: 0.05, &#x27;add_mss_layer&#x27;: True, &#x27;mss_gridarea&#x27;: &#x27;antarctic_ocean&#x27;, &#x27;mss_binsize_km&#x27;: 10, &#x27;view_angle_elevation&#x27;: 90, &#x27;view_angle_azimuth&#x27;: 90, &#x27;plot_zoom&#x27;: 1.2, &#x27;zaxis_limits&#x27;: [-300.0, 4500], &#x27;light_xdirection&#x27;: 10000.0, &#x27;light_ydirection&#x27;: 0, &#x27;light_zdirection&#x27;: 1.0, &#x27;place_annotations&#x27;: ((-80, 190, 3234.0, &#x27;Ross IS&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-76, 302, 200.0, &#x27;Ronne IS&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-70.5, 256, 100.0, &#x27;Amundsen Sea&#x27;, &#x27;white&#x27;, None, 9, 0.9), (-71.5, 315, 100.0, &#x27;Weddell Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-73.5, 190, 100.0, &#x27;Ross Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-67, 278, 100.0, &#x27;Bellingshausen Sea&#x27;, &#x27;white&#x27;, None, 10, 0.9), (-69, 71, 100.0, &#x27;Amery Ice Shelf&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-69, 116, 100.0, &#x27;Totten Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-75.9, 253.25, 100.0, &#x27;Thwaites Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-77.3, 106.0, 3500, &#x27;Vostok&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9), (-90.0, 0.0, 2840, &#x27;Pole&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9)), &#x27;lat_annotations&#x27;: ((-70, 220, 150, 10, 2, 0), (-60, 220, 150, 10, 2, 0)), &#x27;lon_annotations&#x27;: ([-66, 120, 150, 10, 2, 0], [-66, 160, 150, 10, 2, 0], [-66, 200, 150, 10, 2, 0], [-66, 240, 150, 10, 2, 0], [-66, 280, 150, 10, 2, 0], [-66, 320, 150, 10, 2, 0], [-66, 0, 150, 10, 2, 0], [-66, 40, 150, 10, 2, 0], [-66, 80, 150, 10, 2, 0]), &#x27;lat_lines&#x27;: range(-60, -80, -10), &#x27;lon_lines&#x27;: range(0, 360, 20), &#x27;latlon_line_colour&#x27;: &#x27;white&#x27;, &#x27;latlon_lines_increment&#x27;: 0.01, &#x27;latlon_lines_size&#x27;: 0.3, &#x27;latlon_lines_opacity&#x27;: 0.5, &#x27;latlon_lines_elevation&#x27;: 200}"}, {"fullname": "cpom.areas.definitions_3d.ase", "modulename": "cpom.areas.definitions_3d.ase", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"amundsen-sea-embayment-west-antarctica-dem-1km-rema-gapless-v11\">Amundsen Sea Embayment, West Antarctica DEM: 1km REMA Gapless v1::1</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.ase.area_definition", "modulename": "cpom.areas.definitions_3d.ase", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Amundsen Sea Embayment DEM: 1km REMA Gapless v1::1&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: -103.0, &#x27;centre_lat&#x27;: -75.0, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 900, &#x27;height_km&#x27;: 900, &#x27;min_elevation&#x27;: -500, &#x27;max_elevation&#x27;: 2900, &#x27;minlon&#x27;: 0, &#x27;maxlon&#x27;: 360, &#x27;minlat&#x27;: -80, &#x27;maxlat&#x27;: -71, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;ase_xylimits_mask&#x27;, &#x27;masktype&#x27;: &#x27;xylimits&#x27;, &#x27;basin_numbers&#x27;: [], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;dem_name&#x27;: &#x27;rema_gapless_1km_zarr&#x27;, &#x27;smooth_dem&#x27;: False, &#x27;page_width&#x27;: 1300, &#x27;dem_stride&#x27;: 1, &#x27;zaxis_multiplier&#x27;: 0.07, &#x27;add_mss_layer&#x27;: True, &#x27;mss_gridarea&#x27;: &#x27;antarctic_ocean&#x27;, &#x27;mss_binsize_km&#x27;: 10, &#x27;view_angle_elevation&#x27;: 45, &#x27;view_angle_azimuth&#x27;: 215, &#x27;plot_zoom&#x27;: 0.8, &#x27;zaxis_limits&#x27;: [-100.0, 2500], &#x27;light_xdirection&#x27;: 10000.0, &#x27;light_ydirection&#x27;: 0, &#x27;light_zdirection&#x27;: 1.0, &#x27;place_annotations&#x27;: ([-74.1, 253, 100.0, &#x27;Pine Island Bay&#x27;, &#x27;white&#x27;, None, 11, 0.9], [-73.2, 253, 100.0, &#x27;AMUNDSEN SEA&#x27;, &#x27;white&#x27;, None, 13, 0.9], [-75.9, 253.25, 100.0, &#x27;Thwaites Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9], [-74.4, -112.667, 150.0, &#x27;Dotson Ice Shelf&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 11, 0.9], [-75.5, 265, 150.0, &#x27;Pine Island Glacier&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 10, 0.9], [-78.6, 255, 600.0, &#x27;WEST ANTARCTIC ICE SHEET&#x27;, &#x27;Black&#x27;, &#x27;White&#x27;, 9, 0.9], [-73.08333, -105.1, 150, &#x27;Burke Island&#x27;, &#x27;White&#x27;, None, 10, 0.9]), &#x27;lat_annotations&#x27;: ([-72, 254, 150, 8, 2, 0], [-74, 254, 150, 8, 2, 0]), &#x27;lon_annotations&#x27;: ([-73, 250, 150, 8, 2, 0], [-73, 245, 150, 8, 2, 0], [-71.8, 265, 150, 8, 2, 0], [-71.8, 255, 150, 8, 2, 0], [-71.5, 260, 150, 8, 2, 0], [-71.8, 270, 150, 8, 2, 0]), &#x27;lat_lines&#x27;: (-72, -74), &#x27;lon_lines&#x27;: (245, 250, 255, 260, 265, 270), &#x27;latlon_line_colour&#x27;: &#x27;white&#x27;, &#x27;latlon_lines_increment&#x27;: 0.01, &#x27;latlon_lines_size&#x27;: 0.8, &#x27;latlon_lines_opacity&#x27;: 0.5, &#x27;latlon_lines_elevation&#x27;: 200}"}, {"fullname": "cpom.areas.definitions_3d.greenland", "modulename": "cpom.areas.definitions_3d.greenland", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"greenland-dem-arcticdem-1km4\">Greenland DEM: ArcticDEM 1km::4</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.greenland.area_definition", "modulename": "cpom.areas.definitions_3d.greenland", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Greenland DEM: ArcticDEM 1km::4&#x27;, &#x27;hemisphere&#x27;: &#x27;north&#x27;, &#x27;epsg_number&#x27;: 3413, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: -41.75, &#x27;centre_lat&#x27;: 71.5, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 1540, &#x27;height_km&#x27;: 2740, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 285.0, &#x27;maxlon&#x27;: 350.0, &#x27;minlat&#x27;: 59.0, &#x27;maxlat&#x27;: 85.0, &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: None, &#x27;masktype&#x27;: None, &#x27;basin_numbers&#x27;: None, &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;dem_name&#x27;: &#x27;arcticdem_1km_greenland_v4.1_zarr&#x27;, &#x27;smooth_dem&#x27;: True, &#x27;page_width&#x27;: 1400, &#x27;dem_stride&#x27;: 2, &#x27;zaxis_multiplier&#x27;: 0.04, &#x27;add_mss_layer&#x27;: True, &#x27;mss_gridarea&#x27;: &#x27;greenland&#x27;, &#x27;mss_binsize_km&#x27;: 10, &#x27;view_angle_elevation&#x27;: 90, &#x27;view_angle_azimuth&#x27;: 90, &#x27;plot_zoom&#x27;: 1.2, &#x27;zaxis_limits&#x27;: [-200.0, 4000], &#x27;light_xdirection&#x27;: 10000.0, &#x27;light_ydirection&#x27;: 0, &#x27;light_zdirection&#x27;: 1.0, &#x27;lat_lines&#x27;: range(60, 85, 5), &#x27;lon_lines&#x27;: (350, 340, 330, 320, 310, 300), &#x27;latlon_line_colour&#x27;: &#x27;white&#x27;, &#x27;latlon_lines_increment&#x27;: 0.01, &#x27;latlon_lines_size&#x27;: 0.8, &#x27;latlon_lines_opacity&#x27;: 0.5, &#x27;latlon_lines_elevation&#x27;: 350, &#x27;lat_annotations&#x27;: ((65, 325, 350, 10, 20, 0), (60, 325, 350, 10, 20, 0), (80, 355, 350, 10, 4, 0), (70, 301, 350, 10, 10, -15), (75, 342, 350, 10, 10, 0)), &#x27;lon_annotations&#x27;: ((62.5, 330, 350, 10, -30, 0), (62.5, 320, 350, 10, 2, 0), (72.5, 300, 350, 10, -30, 0)), &#x27;place_annotations&#x27;: ((64, 302, 350, &#x27;Davis Strait&#x27;, &#x27;White&#x27;, None, 10, 0.9), (61, 325, 350, &#x27;N Atlantic&#x27;, &#x27;White&#x27;, None, 10, 0.9))}"}, {"fullname": "cpom.areas.definitions_3d.grn_atl14", "modulename": "cpom.areas.definitions_3d.grn_atl14", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"greenland-dem-arcticdem-1km4\">Greenland DEM: ArcticDEM 1km::4</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.grn_atl14.area_definition", "modulename": "cpom.areas.definitions_3d.grn_atl14", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Greenland DEM: ArcticDEM 1km::4&#x27;, &#x27;hemisphere&#x27;: &#x27;north&#x27;, &#x27;epsg_number&#x27;: 3413, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: -41.75, &#x27;centre_lat&#x27;: 71.5, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 1540, &#x27;height_km&#x27;: 2740, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 285.0, &#x27;maxlon&#x27;: 350.0, &#x27;minlat&#x27;: 59.0, &#x27;maxlat&#x27;: 85.0, &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: None, &#x27;masktype&#x27;: None, &#x27;basin_numbers&#x27;: None, &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;dem_name&#x27;: &#x27;atl14_grn_100m_004_003_zarr&#x27;, &#x27;smooth_dem&#x27;: False, &#x27;page_width&#x27;: 1400, &#x27;dem_stride&#x27;: 50, &#x27;zaxis_multiplier&#x27;: 0.04, &#x27;add_mss_layer&#x27;: True, &#x27;mss_gridarea&#x27;: &#x27;greenland&#x27;, &#x27;mss_binsize_km&#x27;: 10, &#x27;view_angle_elevation&#x27;: 90, &#x27;view_angle_azimuth&#x27;: 90, &#x27;plot_zoom&#x27;: 1.2, &#x27;zaxis_limits&#x27;: [-200.0, 4000], &#x27;light_xdirection&#x27;: 10000.0, &#x27;light_ydirection&#x27;: 0, &#x27;light_zdirection&#x27;: 1.0, &#x27;lat_lines&#x27;: range(60, 85, 5), &#x27;lon_lines&#x27;: (350, 340, 330, 320, 310, 300), &#x27;latlon_line_colour&#x27;: &#x27;white&#x27;, &#x27;latlon_lines_increment&#x27;: 0.01, &#x27;latlon_lines_size&#x27;: 0.8, &#x27;latlon_lines_opacity&#x27;: 0.5, &#x27;latlon_lines_elevation&#x27;: 350, &#x27;lat_annotations&#x27;: ((65, 325, 350, 10, 20, 0), (60, 325, 350, 10, 20, 0), (80, 355, 350, 10, 4, 0), (70, 301, 350, 10, 10, -15), (75, 342, 350, 10, 10, 0)), &#x27;lon_annotations&#x27;: ((62.5, 330, 350, 10, -30, 0), (62.5, 320, 350, 10, 2, 0), (72.5, 300, 350, 10, -30, 0)), &#x27;place_annotations&#x27;: ((64, 302, 350, &#x27;Davis Strait&#x27;, &#x27;White&#x27;, None, 10, 0.9), (61, 325, 350, &#x27;N Atlantic&#x27;, &#x27;White&#x27;, None, 10, 0.9))}"}, {"fullname": "cpom.areas.definitions_3d.grn_testarea", "modulename": "cpom.areas.definitions_3d.grn_testarea", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"greenland-dem-arcticdem-1km4\">Greenland DEM: ArcticDEM 1km::4</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.grn_testarea.area_definition", "modulename": "cpom.areas.definitions_3d.grn_testarea", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Greenland Test Area&#x27;, &#x27;hemisphere&#x27;: &#x27;north&#x27;, &#x27;epsg_number&#x27;: 3413, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: None, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: -41, &#x27;centre_lat&#x27;: 70, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 500, &#x27;height_km&#x27;: 500, &#x27;min_elevation&#x27;: -50, &#x27;max_elevation&#x27;: 4200, &#x27;minlon&#x27;: 285.0, &#x27;maxlon&#x27;: 350.0, &#x27;minlat&#x27;: 59.0, &#x27;maxlat&#x27;: 85.0, &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;apply_area_mask_to_data&#x27;: False, &#x27;maskname&#x27;: None, &#x27;masktype&#x27;: None, &#x27;basin_numbers&#x27;: None, &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;dem_name&#x27;: &#x27;arcticdem_100m_greenland_v4.1_zarr&#x27;, &#x27;smooth_dem&#x27;: False, &#x27;page_width&#x27;: 1400, &#x27;dem_stride&#x27;: 4, &#x27;zaxis_multiplier&#x27;: 0.2, &#x27;add_mss_layer&#x27;: False, &#x27;mss_gridarea&#x27;: &#x27;greenland&#x27;, &#x27;mss_binsize_km&#x27;: 10, &#x27;view_angle_elevation&#x27;: 90, &#x27;view_angle_azimuth&#x27;: 90, &#x27;plot_zoom&#x27;: 1.2, &#x27;zaxis_limits&#x27;: [-200.0, 4000], &#x27;light_xdirection&#x27;: 10000.0, &#x27;light_ydirection&#x27;: 0, &#x27;light_zdirection&#x27;: 1.0, &#x27;lat_lines&#x27;: range(68, 73), &#x27;lon_lines&#x27;: (316, 320, 324), &#x27;latlon_line_colour&#x27;: &#x27;darkgrey&#x27;, &#x27;latlon_lines_increment&#x27;: 0.01, &#x27;latlon_lines_size&#x27;: 2.0, &#x27;latlon_lines_opacity&#x27;: 0.5, &#x27;latlon_lines_elevation&#x27;: None, &#x27;raise_latlon_lines_above_dem&#x27;: 20, &#x27;lat_annotations&#x27;: ((68, 320, 2600, 10, 0, 0), (69, 320, 2600, 10, 0, 0), (70, 320, 2600, 10, 0, 0), (71, 320, 2600, 10, 0, 0)), &#x27;lon_annotations&#x27;: ((68.5, 316, 350, 10, 0, 0), (68.5, 320, 350, 10, 0, 0)), &#x27;place_annotations&#x27;: ()}"}, {"fullname": "cpom.areas.definitions_3d.vostok", "modulename": "cpom.areas.definitions_3d.vostok", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"lake-vostok\">Lake Vostok</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.vostok.area_definition", "modulename": "cpom.areas.definitions_3d.vostok", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Lake Vostok, E. Antarctica, 400km sq. Area, DEM 1km::1&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: -63.15, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: 105.0, &#x27;centre_lat&#x27;: -77.2, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 400, &#x27;height_km&#x27;: 400, &#x27;min_elevation&#x27;: 3478.0, &#x27;max_elevation&#x27;: 3529.0, &#x27;minlon&#x27;: 101.0, &#x27;maxlon&#x27;: 107.5, &#x27;minlat&#x27;: -78.7, &#x27;maxlat&#x27;: -76.1, &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;basin_numbers&#x27;: [4], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;dem_name&#x27;: &#x27;rema_ant_1km_zarr&#x27;, &#x27;smooth_dem&#x27;: False, &#x27;page_width&#x27;: 1200, &#x27;dem_stride&#x27;: 10, &#x27;zaxis_multiplier&#x27;: 0.7, &#x27;add_mss_layer&#x27;: False, &#x27;mss_gridarea&#x27;: &#x27;antarctic_ocean&#x27;, &#x27;mss_binsize_km&#x27;: 10, &#x27;view_angle_elevation&#x27;: 35, &#x27;view_angle_azimuth&#x27;: 330, &#x27;plot_zoom&#x27;: 1.15, &#x27;zaxis_limits&#x27;: [2400.0, 4000], &#x27;light_xdirection&#x27;: 10000.0, &#x27;light_ydirection&#x27;: 10, &#x27;light_zdirection&#x27;: 0.0}"}, {"fullname": "cpom.areas.definitions_3d.vostok_600km", "modulename": "cpom.areas.definitions_3d.vostok_600km", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"lake-vostok-at-600km-using-100m-rema-gapless-dem-sampled-by-5\">Lake Vostok at 600km using 100m REMA Gapless DEM (sampled by 5)</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.vostok_600km.area_definition", "modulename": "cpom.areas.definitions_3d.vostok_600km", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Lake Vostok, E. Antarctica, 600km sq. Area, DEM 100m::5&#x27;, &#x27;use_definitions_from&#x27;: &#x27;vostok&#x27;, &#x27;width_km&#x27;: 600, &#x27;height_km&#x27;: 600, &#x27;dem_name&#x27;: &#x27;rema_ant_1km_zarr&#x27;, &#x27;page_width&#x27;: 1500, &#x27;dem_stride&#x27;: 1, &#x27;zaxis_multiplier&#x27;: 0.25}"}, {"fullname": "cpom.areas.definitions_3d.vostok_800km", "modulename": "cpom.areas.definitions_3d.vostok_800km", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"lake-vostok-at-800km-using-100m-rema-gapless-dem-sampled-by-4\">Lake Vostok at 800km using 100m REMA Gapless DEM (sampled by 4)</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.vostok_800km.area_definition", "modulename": "cpom.areas.definitions_3d.vostok_800km", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Lake Vostok, E. Antarctica, 800km sq. Area, DEM 100m::4&#x27;, &#x27;use_definitions_from&#x27;: &#x27;vostok&#x27;, &#x27;width_km&#x27;: 800, &#x27;height_km&#x27;: 800, &#x27;dem_name&#x27;: &#x27;rema_gapless_100m_zarr&#x27;, &#x27;page_width&#x27;: 1500, &#x27;dem_stride&#x27;: 4, &#x27;zaxis_multiplier&#x27;: 0.3}"}, {"fullname": "cpom.areas.definitions_3d.vostok_atl14", "modulename": "cpom.areas.definitions_3d.vostok_atl14", "kind": "module", "doc": "<p>3D Area Definition</p>\n\n<h1 id=\"lake-vostok\">Lake Vostok</h1>\n"}, {"fullname": "cpom.areas.definitions_3d.vostok_atl14.area_definition", "modulename": "cpom.areas.definitions_3d.vostok_atl14", "qualname": "area_definition", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;long_name&#x27;: &#x27;Lake Vostok, E. Antarctica, 400km sq. Area, DEM 1km::1&#x27;, &#x27;hemisphere&#x27;: &#x27;south&#x27;, &#x27;epsg_number&#x27;: 3031, &#x27;round&#x27;: False, &#x27;specify_by_bounding_lat&#x27;: False, &#x27;bounding_lat&#x27;: -63.15, &#x27;specify_by_centre&#x27;: True, &#x27;centre_lon&#x27;: 105.0, &#x27;centre_lat&#x27;: -77.2, &#x27;specify_plot_area_by_lowerleft_corner&#x27;: False, &#x27;llcorner_lat&#x27;: None, &#x27;llcorner_lon&#x27;: None, &#x27;lon_0&#x27;: None, &#x27;width_km&#x27;: 400, &#x27;height_km&#x27;: 400, &#x27;min_elevation&#x27;: 3478.0, &#x27;max_elevation&#x27;: 3529.0, &#x27;minlon&#x27;: 101.0, &#x27;maxlon&#x27;: 107.5, &#x27;minlat&#x27;: -78.7, &#x27;maxlat&#x27;: -76.1, &#x27;cmap_name&#x27;: &#x27;RdYlBu_r&#x27;, &#x27;cmap_over_color&#x27;: &#x27;#A85754&#x27;, &#x27;cmap_under_color&#x27;: &#x27;#3E4371&#x27;, &#x27;cmap_extend&#x27;: &#x27;both&#x27;, &#x27;apply_area_mask_to_data&#x27;: True, &#x27;maskname&#x27;: &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;basin_numbers&#x27;: [4], &#x27;show_polygon_mask&#x27;: False, &#x27;polygon_mask_color&#x27;: &#x27;red&#x27;, &#x27;dem_name&#x27;: &#x27;atl14_ant_100m_004_004_zarr&#x27;, &#x27;smooth_dem&#x27;: False, &#x27;page_width&#x27;: 1200, &#x27;dem_stride&#x27;: 10, &#x27;zaxis_multiplier&#x27;: 0.7, &#x27;add_mss_layer&#x27;: False, &#x27;mss_gridarea&#x27;: &#x27;antarctic_ocean&#x27;, &#x27;mss_binsize_km&#x27;: 10, &#x27;view_angle_elevation&#x27;: 35, &#x27;view_angle_azimuth&#x27;: 330, &#x27;plot_zoom&#x27;: 1.15, &#x27;zaxis_limits&#x27;: [2400.0, 4000], &#x27;light_xdirection&#x27;: 10000.0, &#x27;light_ydirection&#x27;: 10, &#x27;light_zdirection&#x27;: 0.0}"}, {"fullname": "cpom.areas.plot_sweden_map", "modulename": "cpom.areas.plot_sweden_map", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.areas.plot_sweden_map.plot_sweden_map", "modulename": "cpom.areas.plot_sweden_map", "qualname": "plot_sweden_map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.tests", "modulename": "cpom.areas.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.areas.tests.test_area_plot3d", "modulename": "cpom.areas.tests.test_area_plot3d", "kind": "module", "doc": "<p>pytests of cpom.areas.area_plot3d.py</p>\n"}, {"fullname": "cpom.areas.tests.test_area_plot3d.pytestmark", "modulename": "cpom.areas.tests.test_area_plot3d", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;plots&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.areas.tests.test_area_plot3d.test_area_plot3d", "modulename": "cpom.areas.tests.test_area_plot3d", "qualname": "test_area_plot3d", "kind": "function", "doc": "<p>pytest of cpom.areas.area_plot3d.py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.tests.test_areas", "modulename": "cpom.areas.tests.test_areas", "kind": "module", "doc": "<p>pytests for clev2er.utils.areas.areas.py</p>\n"}, {"fullname": "cpom.areas.tests.test_areas.pytestmark", "modulename": "cpom.areas.tests.test_areas", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;requires_external_data&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.areas.tests.test_areas.test_bad_area_name", "modulename": "cpom.areas.tests.test_areas", "qualname": "test_bad_area_name", "kind": "function", "doc": "<p>pytest to check for handling of invalid area names</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.areas.tests.test_areas.test_good_area_name", "modulename": "cpom.areas.tests.test_areas", "qualname": "test_good_area_name", "kind": "function", "doc": "<p>pytest to check for handling of valid area names</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.backgrounds", "modulename": "cpom.backgrounds", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.backgrounds.backgrounds", "modulename": "cpom.backgrounds.backgrounds", "kind": "module", "doc": "<p>Class to manage background images for polar plotting</p>\n"}, {"fullname": "cpom.backgrounds.backgrounds.log", "modulename": "cpom.backgrounds.backgrounds", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.backgrounds.backgrounds (WARNING)&gt;"}, {"fullname": "cpom.backgrounds.backgrounds.all_backgrounds", "modulename": "cpom.backgrounds.backgrounds", "qualname": "all_backgrounds", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;basic_land&#x27;: [&#x27;antarctica_is&#x27;], &#x27;basic_land_black&#x27;: [&#x27;antarctica_is&#x27;], &#x27;cartopy_stock&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;cartopy_stock_ocean&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;arcgis_shaded_relief&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;google_satellite&#x27;: [&#x27;sweden&#x27;], &#x27;bluemarble&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;natural_earth_cbh&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;natural_earth_cbh_oceanmasked&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;natural_earth_cbh_ocean&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;natural_earth_gray&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;natural_earth1&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;stamen&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;natural_earth_faded&#x27;: [&#x27;antarctica_is&#x27;, &#x27;arctic&#x27;], &#x27;moa&#x27;: [&#x27;antarctica_is&#x27;, &#x27;vostok&#x27;], &#x27;cpom_dem&#x27;: [&#x27;antarctica_is&#x27;], &#x27;awi_gis_dem&#x27;: [&#x27;greenland&#x27;], &#x27;arcticdem_1km&#x27;: [&#x27;arctic&#x27;], &#x27;rema_dem_1km&#x27;: [&#x27;antarctica_is&#x27;], &#x27;grn_s1_mosaic&#x27;: [&#x27;greenland&#x27;], &#x27;hillshade&#x27;: [&#x27;antarctica_is&#x27;, &#x27;greenland&#x27;], &#x27;ant_iceshelves&#x27;: [&#x27;antarctica_is&#x27;], &#x27;ibcso_bathymetry&#x27;: [&#x27;antarctica_is&#x27;], &#x27;ibcao_bathymetry&#x27;: [&#x27;arctic&#x27;]}"}, {"fullname": "cpom.backgrounds.backgrounds.all_background_resolutions", "modulename": "cpom.backgrounds.backgrounds", "qualname": "all_background_resolutions", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;low&#x27;, &#x27;medium&#x27;, &#x27;high&#x27;, &#x27;vhigh&#x27;, &#x27;vvhigh&#x27;]"}, {"fullname": "cpom.backgrounds.backgrounds.Background", "modulename": "cpom.backgrounds.backgrounds", "qualname": "Background", "kind": "class", "doc": "<p>class to handle background images</p>\n"}, {"fullname": "cpom.backgrounds.backgrounds.Background.__init__", "modulename": "cpom.backgrounds.backgrounds", "qualname": "Background.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  background name</li>\n<li><strong>area (str):</strong>  area name from cpom.areas.areas</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">area</span></span>)</span>"}, {"fullname": "cpom.backgrounds.backgrounds.Background.name", "modulename": "cpom.backgrounds.backgrounds", "qualname": "Background.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.backgrounds.backgrounds.Background.moa_image", "modulename": "cpom.backgrounds.backgrounds", "qualname": "Background.moa_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.backgrounds.backgrounds.Background.moa_zimage", "modulename": "cpom.backgrounds.backgrounds", "qualname": "Background.moa_zimage", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.backgrounds.backgrounds.Background.load", "modulename": "cpom.backgrounds.backgrounds", "qualname": "Background.load", "kind": "function", "doc": "<p>param: ax : axis\nparam: dataprj : cartopy coordinate reference system (crs)\nparam: background: replace default background image (thisarea.background_image) for plot\nwith one of the available backgrounds</p>\n\n<p>cartopy_stock : stock image for Cartopy, uses a downgraded natural earth image.\nOnly one resolution\ncartopy_stock_ocean : stock image for Cartopy with land blanked out in a single colour.\nOnly one resolution\narcgis_shaded_relief : resolution (low, medium, default is high) : : ArcGIS World Shaded\nRelief tiles\ngoogle_satellite : resolution (low, medium, high, vhigh, vvhigh (default)\nbluemarble : resolution (low, medium, high) : NASA Blue Marble world image\nnatural_earth_cbh : resolution (low, medium, default is high): Cross Blended Hypso with\nShaded Relief and Water\n<a href=\"https://www.naturalearthdata.com/downloads/50m-raster-data/50m-cross-blend-hypso/\">https://www.naturalearthdata.com/downloads/50m-raster-data/50m-cross-blend-hypso/</a>\nnatural_earth_cbh_oceanmasked : resolution (low, medium, default is high) : as for\nnatural_earth_cbh, but with oceans set to white\nnatural_earth_cbh_ocean : resolution (low, medium, high)\nnatural_earth_gray : resolution (low, medium, high):  Gray Earth with Shaded Relief,\nHypsography, and Ocean Bottom :\n<a href=\"https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/raster/GRAY_50M_SR_OB.zip\">https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/raster/GRAY_50M_SR_OB.zip</a>\nnatural_earth1 : resolution (low, medium, default is high): Natural Earth I with Shaded\nRelief and Water :\n<a href=\"https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/raster/NE1_50M_SR_W.zip\">https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/raster/NE1_50M_SR_W.zip</a>\nstamen : resolution (low, medium, default is high):terrain-background\n<a href=\"http://maps.stamen.com/terrain-background/#12/37.7706/-122.3782\">http://maps.stamen.com/terrain-background/#12/37.7706/-122.3782</a>\nnatural_earth_faded\nbasic_land : resolution (low, medium, high) : basic ocean and land plot\nmoa : MODIS Mosaic of Antarctica 2008-2009 (MOA2009) Image Map at 750m resolution,\ngray scale\ncpom_dem : CPOM Antarctic DEM at 1km resolution, gray scale\nhillshade : hillshade_params={\"azimuth\": f,\u201dpitch\": f,\u201ddem\": \u201cstr\u201d,\u201dalpha\": f}\nant_iceshelves\nibcso_bathymetry\nibcao_bathymetry\nawi_gis_dem : Greenland DEM from AWI 2014\ngrn_s1_mosaic : resolution (low, medium, high, vhigh)\narcticdem_1km :  ArcticDEM at 1km resolution\nrema_dem_1km : REMA Antarctic DEM at 1km resolution\n        '\nparam: resolution : 'low', 'medium','high','vhigh','vvhigh', if None,\nself.thisarea.background_image_resolution is used\nalpha:  set the background transparency (alpha), 0..1. If None,\nself.thisarea.background_image_alpha is used</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span>,</span><span class=\"param\">\t<span class=\"n\">dataprj</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_features</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">hillshade_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zorder</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.backgrounds.tests", "modulename": "cpom.backgrounds.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.backgrounds.tests.test_backgrounds", "modulename": "cpom.backgrounds.tests.test_backgrounds", "kind": "module", "doc": "<p>pytest tests for cpom.backgrounds</p>\n"}, {"fullname": "cpom.backgrounds.tests.test_backgrounds.log", "modulename": "cpom.backgrounds.tests.test_backgrounds", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.backgrounds.tests.test_backgrounds (INFO)&gt;"}, {"fullname": "cpom.backgrounds.tests.test_backgrounds.pytestmark", "modulename": "cpom.backgrounds.tests.test_backgrounds", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;non_core&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.backgrounds.tests.test_backgrounds.test_backgrounds", "modulename": "cpom.backgrounds.tests.test_backgrounds", "qualname": "test_backgrounds", "kind": "function", "doc": "<p>test purpose: for each background, plot background in one or more test areas\nas specified in  cpom.backgrounds.backgrounds.all_backgrounds which is a dict\ncontaining background name as key, and a list of relevant areas to test</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">background_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tmp_path_factory</span><span class=\"p\">:</span> <span class=\"n\">_pytest</span><span class=\"o\">.</span><span class=\"n\">tmpdir</span><span class=\"o\">.</span><span class=\"n\">TempPathFactory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems", "modulename": "cpom.dems", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.atl14_ant_4quadrant_nc_to_zarr", "modulename": "cpom.dems.atl14_ant_4quadrant_nc_to_zarr", "kind": "module", "doc": "<p>Utility to combine four quadrant ATL14 Antarctic DEM NetCDF files\ninto a single Zarr mosaic.</p>\n\n<p>The four input files should be arranged as follows (by quadrant label in the filename):</p>\n\n<pre><code>   A2   |   A1\n  ---------------\n   A3   |   A4\n</code></pre>\n\n<p>For each file the script reads the GeoTransform (e.g. \n    [x0, dx, 0, y0, 0, dy])\nand computes coordinate arrays as:</p>\n\n<pre><code>x = x0 + dx * arange(nx)\ny = y0 + dy * arange(ny)\n</code></pre>\n\n<p>It then computes the global mosaic grid from the union of the quadrant extents and\nplaces each quadrant into the appropriate offset.\nA Zarr mosaic (and a vertically flipped copy) are then written using a specified chunk size.</p>\n"}, {"fullname": "cpom.dems.atl14_ant_4quadrant_nc_to_zarr.get_quadrant_data", "modulename": "cpom.dems.atl14_ant_4quadrant_nc_to_zarr", "qualname": "get_quadrant_data", "kind": "function", "doc": "<p>Open the NetCDF file, read the DEM (\"h\") and GeoTransform from the\n\"Polar_Stereographic\" variable, and compute the full x and y coordinate arrays.</p>\n\n<h6 id=\"returns-a-dictionary-with-keys\">Returns a dictionary with keys:</h6>\n\n<blockquote>\n  <ul>\n  <li>'h': 2D DEM data (numpy array)</li>\n  <li>'nx': number of columns</li>\n  <li>'ny': number of rows</li>\n  <li>'GT': the GeoTransform as a list of 6 floats [x0, dx, 0, y0, 0, dy]</li>\n  <li>'x': 1D numpy array of x coordinates (cell centers)</li>\n  <li>'y': 1D numpy array of y coordinates (cell centers)</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nc_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.atl14_ant_4quadrant_nc_to_zarr.parse_quadrant_files", "modulename": "cpom.dems.atl14_ant_4quadrant_nc_to_zarr", "qualname": "parse_quadrant_files", "kind": "function", "doc": "<p>Determine which file is which quadrant based on filename.</p>\n\n<h6 id=\"for-this-mosaic-we-require\">For this mosaic we require:</h6>\n\n<blockquote>\n  <ul>\n  <li>A2: top left</li>\n  <li>A1: top right</li>\n  <li>A3: bottom left</li>\n  <li>A4: bottom right</li>\n  </ul>\n</blockquote>\n\n<p>Returns a dictionary mapping quadrant label to filename.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.atl14_ant_4quadrant_nc_to_zarr.build_global_grid", "modulename": "cpom.dems.atl14_ant_4quadrant_nc_to_zarr", "qualname": "build_global_grid", "kind": "function", "doc": "<p>Given a dictionary of quadrant data (with keys A1, A2, A3, A4), compute the global mosaic grid.</p>\n\n<h6 id=\"for-our-arrangement\">For our arrangement:</h6>\n\n<blockquote>\n  <h2 id=\"a2-a1-top-row\">A2   |   A1   (top row)</h2>\n  \n  <p>A3   |   A4   (bottom row)</p>\n</blockquote>\n\n<h6 id=\"we-compute\">We compute:</h6>\n\n<blockquote>\n  <p>global_x_min = min( A2.x[0], A3.x[0] )\n  global_x_max = max( A1.x[-1], A4.x[-1] )\n  global_y_max = max( A2.y[0], A1.y[0] )    (remember: dy is negative so the first element is the top)\n  global_y_min = min( A3.y[-1], A4.y[-1] )</p>\n</blockquote>\n\n<p>We also assume the same pixel spacing (dx and dy) in all quadrants.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>global_x, global_y, dx, dy, ncols_global, nrows_global</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">qdata</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.atl14_ant_4quadrant_nc_to_zarr.place_quadrant", "modulename": "cpom.dems.atl14_ant_4quadrant_nc_to_zarr", "qualname": "place_quadrant", "kind": "function", "doc": "<p>Place a quadrant\u2019s DEM (qdat) into the mosaic.</p>\n\n<h6 id=\"the-offset-indices-are-computed-as\">The offset indices are computed as:</h6>\n\n<blockquote>\n  <p>offset_col = round((qdat.x[0] - global_x[0]) / dx)\n  offset_row = round((global_y[0] - qdat.y[0]) / abs(dy))</p>\n</blockquote>\n\n<p>mosaic is updated in place.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mosaic</span>, </span><span class=\"param\"><span class=\"n\">global_x</span>, </span><span class=\"param\"><span class=\"n\">global_y</span>, </span><span class=\"param\"><span class=\"n\">qdat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.atl14_ant_4quadrant_nc_to_zarr.main", "modulename": "cpom.dems.atl14_ant_4quadrant_nc_to_zarr", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.atl14_nc_a1a4_to_zarr", "modulename": "cpom.dems.atl14_nc_a1a4_to_zarr", "kind": "module", "doc": "<p>Utility to convert NetCDF format DEM files to Zarr format using a\nchunk size equivalent to the CS2 beamwidth or a selectable chunk size.</p>\n"}, {"fullname": "cpom.dems.atl14_nc_a1a4_to_zarr.DEMConverter", "modulename": "cpom.dems.atl14_nc_a1a4_to_zarr", "qualname": "DEMConverter", "kind": "class", "doc": "<p>Class to convert NetCDF DEM files to Zarr</p>\n"}, {"fullname": "cpom.dems.atl14_nc_a1a4_to_zarr.DEMConverter.__init__", "modulename": "cpom.dems.atl14_nc_a1a4_to_zarr", "qualname": "DEMConverter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">void_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.dems.atl14_nc_a1a4_to_zarr.DEMConverter.void_value", "modulename": "cpom.dems.atl14_nc_a1a4_to_zarr", "qualname": "DEMConverter.void_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.atl14_nc_a1a4_to_zarr.DEMConverter.get_netcdf_extent", "modulename": "cpom.dems.atl14_nc_a1a4_to_zarr", "qualname": "DEMConverter.get_netcdf_extent", "kind": "function", "doc": "<p>Get DEM extent and resolution .</p>\n\n<p>Reads the coordinate arrays 'x' and 'y' and computes:</p>\n\n<ul>\n<li>ncols, nrows,</li>\n<li>binsize (assumed equal in x and y),</li>\n<li>corner coordinates (approximated using the cell centers and binsize).</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path to the NetCDF file.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if the resolutions in x and y are not equal.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: (ncols, nrows, top_left, top_right, bottom_left, bottom_right, binsize)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.atl14_nc_a1a4_to_zarr.DEMConverter.convert_netcdf_to_zarr", "modulename": "cpom.dems.atl14_nc_a1a4_to_zarr", "qualname": "DEMConverter.convert_netcdf_to_zarr", "kind": "function", "doc": "<p>Convert a NetCDF DEM file to Zarr format and create a flipped version.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ncfile (str):</strong>  Path of the NetCDF file.</li>\n<li><strong>zarrfile (str):</strong>  Path where the original Zarr file will be saved.</li>\n<li><strong>flipped_zarrfile (str):</strong>  Path where the flipped Zarr file will be saved.</li>\n<li><strong>chunk_width (int, optional):</strong>  chunk size in meters (default is 20000).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">h</span>,</span><span class=\"param\">\t<span class=\"n\">zarrfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">flipped_zarrfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.atl14_nc_a1a4_to_zarr.combine_nc_files", "modulename": "cpom.dems.atl14_nc_a1a4_to_zarr", "qualname": "combine_nc_files", "kind": "function", "doc": "<p>combine x,y,h(y,x) from 4 netcdf files\n   each file contains x,y values stepped by 100.00 but\n   in different segments of cartesian space.\n   we want the final x,y,h(y,x) to include the maximum extent\n   of the contributing data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a1_file (str):</strong>  file name of netcdf file 1</li>\n<li><strong>a2_file (str):</strong>  file name of netcdf file 2</li>\n<li><strong>a3_file (str):</strong>  file name of netcdf file 3</li>\n<li><strong>a4_file (str):</strong>  file name of netcdf file 4</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>h,x,y: h(y,x), x, y are all numpy arrays. h is a 2d array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a1_file</span>, </span><span class=\"param\"><span class=\"n\">a2_file</span>, </span><span class=\"param\"><span class=\"n\">a3_file</span>, </span><span class=\"param\"><span class=\"n\">a4_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.atl14_nc_a1a4_to_zarr.combine_nc_files2", "modulename": "cpom.dems.atl14_nc_a1a4_to_zarr", "qualname": "combine_nc_files2", "kind": "function", "doc": "<p>Combine x, y, h(y,x) from 4 netCDF files into a single grid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a1_file</span>, </span><span class=\"param\"><span class=\"n\">a2_file</span>, </span><span class=\"param\"><span class=\"n\">a3_file</span>, </span><span class=\"param\"><span class=\"n\">a4_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.atl14_nc_a1a4_to_zarr.combine_nc_files3", "modulename": "cpom.dems.atl14_nc_a1a4_to_zarr", "qualname": "combine_nc_files3", "kind": "function", "doc": "<p>Combine x, y, h(y,x) from 4 netCDF files with a uniform grid spacing.</p>\n\n<p>Each file contains x, y values stepped by 100.0, covering different segments\nof Cartesian space. This function creates a global grid covering the maximum extent\nof the data and fills in the values from each file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a1_file, a2_file, a3_file, a4_file (str):</strong>  File names of the netCDF files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: (h_grid, global_x, global_y)\n      - h_grid (2D numpy array): Combined h values over the global grid.\n      - global_x (1D numpy array): Global x coordinates.\n      - global_y (1D numpy array): Global y coordinates.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a1_file</span>, </span><span class=\"param\"><span class=\"n\">a2_file</span>, </span><span class=\"param\"><span class=\"n\">a3_file</span>, </span><span class=\"param\"><span class=\"n\">a4_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.atl14_nc_a1a4_to_zarr.main", "modulename": "cpom.dems.atl14_nc_a1a4_to_zarr", "qualname": "main", "kind": "function", "doc": "<p>Main function for the command-line tool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.atl14_netcdf_to_zarr", "modulename": "cpom.dems.atl14_netcdf_to_zarr", "kind": "module", "doc": "<p>Utility to convert ATL14 NetCDF format DEM files to Zarr format using a\nchunk size equivalent to the CS2 beamwidth or a selectable chunk size.</p>\n"}, {"fullname": "cpom.dems.atl14_netcdf_to_zarr.DEMConverter", "modulename": "cpom.dems.atl14_netcdf_to_zarr", "qualname": "DEMConverter", "kind": "class", "doc": "<p>Class to convert NetCDF DEM files to Zarr</p>\n"}, {"fullname": "cpom.dems.atl14_netcdf_to_zarr.DEMConverter.__init__", "modulename": "cpom.dems.atl14_netcdf_to_zarr", "qualname": "DEMConverter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">void_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.dems.atl14_netcdf_to_zarr.DEMConverter.void_value", "modulename": "cpom.dems.atl14_netcdf_to_zarr", "qualname": "DEMConverter.void_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.atl14_netcdf_to_zarr.DEMConverter.get_netcdf_extent", "modulename": "cpom.dems.atl14_netcdf_to_zarr", "qualname": "DEMConverter.get_netcdf_extent", "kind": "function", "doc": "<p>Get DEM extent and resolution from the NetCDF file.</p>\n\n<p>Reads the coordinate arrays 'x' and 'y' and computes:</p>\n\n<ul>\n<li>ncols, nrows,</li>\n<li>binsize (assumed equal in x and y),</li>\n<li>corner coordinates (approximated using the cell centers and binsize).</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path to the NetCDF file.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if the resolutions in x and y are not equal.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: (ncols, nrows, top_left, top_right, bottom_left, bottom_right, binsize)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.atl14_netcdf_to_zarr.DEMConverter.convert_netcdf_to_zarr", "modulename": "cpom.dems.atl14_netcdf_to_zarr", "qualname": "DEMConverter.convert_netcdf_to_zarr", "kind": "function", "doc": "<p>Convert a NetCDF DEM file to Zarr format and create a flipped version.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ncfile (str):</strong>  Path of the NetCDF file.</li>\n<li><strong>zarrfile (str):</strong>  Path where the original Zarr file will be saved.</li>\n<li><strong>flipped_zarrfile (str):</strong>  Path where the flipped Zarr file will be saved.</li>\n<li><strong>chunk_width (int, optional):</strong>  chunk size in meters (default is 20000).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ncfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">zarrfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">flipped_zarrfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.atl14_netcdf_to_zarr.main", "modulename": "cpom.dems.atl14_netcdf_to_zarr", "qualname": "main", "kind": "function", "doc": "<p>Main function for the command-line tool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems", "modulename": "cpom.dems.dems", "kind": "module", "doc": "<p>cpom.dems.dems.py</p>\n\n<p>DEM class to read and interpolate DEMs</p>\n"}, {"fullname": "cpom.dems.dems.log", "modulename": "cpom.dems.dems", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.dems.dems (WARNING)&gt;"}, {"fullname": "cpom.dems.dems.dem_list", "modulename": "cpom.dems.dems", "qualname": "dem_list", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;awi_ant_1km&#x27;, &#x27;awi_grn_1km&#x27;, &#x27;awi_ant_1km_grounded&#x27;, &#x27;awi_ant_1km_floating&#x27;, &#x27;rema_ant_1km&#x27;, &#x27;rema_ant_1km_zarr&#x27;, &#x27;rema_ant_1km_v2&#x27;, &#x27;rema_ant_1km_v2_zarr&#x27;, &#x27;rema_ant_200m&#x27;, &#x27;rema_ant_200m_zarr&#x27;, &#x27;rema_gapless_100m&#x27;, &#x27;rema_gapless_100m_zarr&#x27;, &#x27;rema_gapless_1km&#x27;, &#x27;rema_gapless_1km_zarr&#x27;, &#x27;arcticdem_1km&#x27;, &#x27;arcticdem_1km_zarr&#x27;, &#x27;arcticdem_1km_v4.1&#x27;, &#x27;arcticdem_1km_greenland_v4.1&#x27;, &#x27;arcticdem_1km_greenland_v4.1_zarr&#x27;, &#x27;arcticdem_100m_greenland&#x27;, &#x27;arcticdem_100m_greenland_v4.1&#x27;, &#x27;arcticdem_100m_greenland_v4.1_zarr&#x27;, &#x27;atl14_grn_100m_004_003_zarr&#x27;, &#x27;atl14_ant_100m_004_004_zarr&#x27;, &#x27;atl14_ant_a1_100m_004_004_zarr&#x27;, &#x27;atl14_ant_a2_100m_004_004_zarr&#x27;, &#x27;atl14_ant_a3_100m_004_004_zarr&#x27;, &#x27;atl14_ant_a4_100m_004_004_zarr&#x27;]"}, {"fullname": "cpom.dems.dems.Dem", "modulename": "cpom.dems.dems", "qualname": "Dem", "kind": "class", "doc": "<p>class to load and interpolate Polar DEMs</p>\n"}, {"fullname": "cpom.dems.dems.Dem.__init__", "modulename": "cpom.dems.dems", "qualname": "Dem.__init__", "kind": "function", "doc": "<p>class initialization function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  DEM name id, must be in global dem_list</li>\n<li><strong>filled (bool, optional):</strong>  Use filled version of DEM if True. Defaults to True.</li>\n<li><strong>config (dict, optional):</strong>  configuration dictionary, defaults to None</li>\n<li><strong>dem_dir (str, optional):</strong>  path of directory containing DEM. Defaults to None</li>\n<li><strong>store_in_shared_memory (bool, optional):</strong>  stores/accesses zdem array in SharedMemory</li>\n<li><strong>thislog (logging.Logger|None, optional):</strong>  attach to a different log instance</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  when name not in global dem_list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dem_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">store_in_shared_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.dems.dems.Dem.name", "modulename": "cpom.dems.dems", "qualname": "Dem.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.crs_wgs", "modulename": "cpom.dems.dems", "qualname": "Dem.crs_wgs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.config", "modulename": "cpom.dems.dems", "qualname": "Dem.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.dem_dir", "modulename": "cpom.dems.dems", "qualname": "Dem.dem_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.filled", "modulename": "cpom.dems.dems", "qualname": "Dem.filled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.reference_year", "modulename": "cpom.dems.dems", "qualname": "Dem.reference_year", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.xdem", "modulename": "cpom.dems.dems", "qualname": "Dem.xdem", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.ydem", "modulename": "cpom.dems.dems", "qualname": "Dem.ydem", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.zdem", "modulename": "cpom.dems.dems", "qualname": "Dem.zdem", "kind": "variable", "doc": "<p></p>\n", "annotation": ": zarr.core.Array | numpy.ndarray"}, {"fullname": "cpom.dems.dems.Dem.zdem_flip", "modulename": "cpom.dems.dems", "qualname": "Dem.zdem_flip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": zarr.core.Array | numpy.ndarray"}, {"fullname": "cpom.dems.dems.Dem.mindemx", "modulename": "cpom.dems.dems", "qualname": "Dem.mindemx", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.mindemy", "modulename": "cpom.dems.dems", "qualname": "Dem.mindemy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.binsize", "modulename": "cpom.dems.dems", "qualname": "Dem.binsize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.store_in_shared_memory", "modulename": "cpom.dems.dems", "qualname": "Dem.store_in_shared_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.shape", "modulename": "cpom.dems.dems", "qualname": "Dem.shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.dtype", "modulename": "cpom.dems.dems", "qualname": "Dem.dtype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.shared_mem", "modulename": "cpom.dems.dems", "qualname": "Dem.shared_mem", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cpom.dems.dems.Dem.shared_mem_child", "modulename": "cpom.dems.dems", "qualname": "Dem.shared_mem_child", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.npz_type", "modulename": "cpom.dems.dems", "qualname": "Dem.npz_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.zarr_type", "modulename": "cpom.dems.dems", "qualname": "Dem.zarr_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.nc_type", "modulename": "cpom.dems.dems", "qualname": "Dem.nc_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.zflip", "modulename": "cpom.dems.dems", "qualname": "Dem.zflip", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.dems.Dem.void_value", "modulename": "cpom.dems.dems", "qualname": "Dem.void_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float | int"}, {"fullname": "cpom.dems.dems.Dem.get_nc_extent", "modulename": "cpom.dems.dems", "qualname": "Dem.get_nc_extent", "kind": "function", "doc": "<p>get the DEM extent from nc file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path of GeoTIFF file</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  _description_</li>\n<li><strong>IOError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(int,int,int,int,int,int,int): width,height,top_left,top_right,bottom_left,\n  bottom_right,pixel_width</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.get_geotiff_extent", "modulename": "cpom.dems.dems", "qualname": "Dem.get_geotiff_extent", "kind": "function", "doc": "<p>Get info from GeoTIFF on its extent</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path of GeoTIFF file</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  _description_</li>\n<li><strong>IOError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(int,int,int,int,int,int,int): width,height,top_left,top_right,bottom_left,\n  bottom_right,pixel_width</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.get_filename", "modulename": "cpom.dems.dems", "qualname": "Dem.get_filename", "kind": "function", "doc": "<p>Find the path of the DEM file from dir and file names :\nFor the directory, it is chosen in order of preference:\na) self.config[\"dem_dirs\"][self.name], or\nb) supplied self.dem_dir, or\nc) default_dir\nThe file name is:\nfilename: is self.filled use filled_filename</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>default_dir (str):</strong>  default dir to find DEM file names</li>\n<li><strong>filename (str):</strong>  file name of DEM (not filled)</li>\n<li><strong>filled_filename (str):</strong>  file name of DEM (not filled)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str : path of DEM file</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>OSError :</strong>  directory or file not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filled_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.clean_up", "modulename": "cpom.dems.dems", "qualname": "Dem.clean_up", "kind": "function", "doc": "<p>Free up, close or release any shared memory or other resources associated\nwith DEM</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.load_npz", "modulename": "cpom.dems.dems", "qualname": "Dem.load_npz", "kind": "function", "doc": "<p>Load DEM from npz format file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>npz_file (str):</strong>  path of npz file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">npz_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.load_zarr", "modulename": "cpom.dems.dems", "qualname": "Dem.load_zarr", "kind": "function", "doc": "<p>Load a .zarr file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>demfile (str):</strong>  path of .zarr file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">demfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.load_nc", "modulename": "cpom.dems.dems", "qualname": "Dem.load_nc", "kind": "function", "doc": "<p>Load a netcdf file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>demfile (str):</strong>  path of netcdf file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">demfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.load_geotiff", "modulename": "cpom.dems.dems", "qualname": "Dem.load_geotiff", "kind": "function", "doc": "<p>Load a GeoTIFF file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>demfile (str):</strong>  path of GeoTIFF</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">demfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.load", "modulename": "cpom.dems.dems", "qualname": "Dem.load", "kind": "function", "doc": "<p>load the DEM</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: DEM loaded ok (True), failed (False)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.get_segment", "modulename": "cpom.dems.dems", "qualname": "Dem.get_segment", "kind": "function", "doc": "<p>return a cropped segment of the DEM, flattened or as a grid</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>segment_bounds (List):</strong>  [(minx,maxx),(miny,maxy)]</li>\n<li><strong>grid_xy (bool, optional):</strong>  return segment as a grid. Defaults to True.</li>\n<li><strong>flatten (bool, optional):</strong>  return segment as flattened list. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[np.ndarray, np.ndarray, np.ndarray]: (xdem,ydem,zdem)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">segment_bounds</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">grid_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flatten</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.chunked_interpolation", "modulename": "cpom.dems.dems", "qualname": "Dem.chunked_interpolation", "kind": "function", "doc": "<p>Interpolate DEM in chunks to handle large datasets efficiently.</p>\n\n<p>This function performs interpolation on a DEM stored in a Zarr array by\nextracting relevant chunks and creating a sub-grid for interpolation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Array of x coordinates in the DEM's projection (in meters).</li>\n<li><strong>y (np.ndarray):</strong>  Array of y coordinates in the DEM's projection (in meters).</li>\n<li><strong>myydem (np.ndarray):</strong>  Flipped y coordinates corresponding to the DEM grid.</li>\n<li><strong>xdem (np.ndarray):</strong>  x coordinates corresponding to the DEM grid.</li>\n<li><strong>method (str):</strong>  Interpolation method to use ('linear', 'nearest', etc.).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Interpolated DEM elevation values at the specified coordinates.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">myydem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xdem</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.interp_dem", "modulename": "cpom.dems.dems", "qualname": "Dem.interp_dem", "kind": "function", "doc": "<p>Interpolate DEM to return elevation values corresponding to\n   cartesian x,y in DEM's projection or lat,lon values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x cartesian coordinates in the DEM's projection in m, or lat values</li>\n<li><strong>y (np.ndarray):</strong>  x cartesian coordinates in the DEM's projection in m, or lon values</li>\n<li><strong>method (str, optional):</strong>  linear, nearest, splinef2d. Defaults to \"linear\".</li>\n<li><strong>xy_is_latlon (bool, optional):</strong>  if True, x,y are lat, lon values. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: interpolated dem elevation values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;linear&#39;</span>, </span><span class=\"param\"><span class=\"n\">xy_is_latlon</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.gaussian_smooth", "modulename": "cpom.dems.dems", "qualname": "Dem.gaussian_smooth", "kind": "function", "doc": "<p>perform a gaussian smooth on the current loaded DEM\nsigma : degree of smoothing, def=1.0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.dems.Dem.hillshade", "modulename": "cpom.dems.dems", "qualname": "Dem.hillshade", "kind": "function", "doc": "<p>Convert the DEM 'z_dem' values to a hillshade value between 0..255\nazimuth: angle in degrees (0..360)\npitch : angle in degrees (0..90)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">azimuth</span><span class=\"o\">=</span><span class=\"mi\">225</span>, </span><span class=\"param\"><span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"mi\">45</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.geotiff_to_zarr", "modulename": "cpom.dems.geotiff_to_zarr", "kind": "module", "doc": "<p>Utility to convert Geotiff format DEM files to Zarr format using a\nchunk size equivalent to the CS2 beamwidth or a selectable chunk size</p>\n"}, {"fullname": "cpom.dems.geotiff_to_zarr.DEMConverter", "modulename": "cpom.dems.geotiff_to_zarr", "qualname": "DEMConverter", "kind": "class", "doc": "<p>Class to convert Geotiff format DEMs to zarr</p>\n"}, {"fullname": "cpom.dems.geotiff_to_zarr.DEMConverter.__init__", "modulename": "cpom.dems.geotiff_to_zarr", "qualname": "DEMConverter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">void_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.dems.geotiff_to_zarr.DEMConverter.void_value", "modulename": "cpom.dems.geotiff_to_zarr", "qualname": "DEMConverter.void_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.geotiff_to_zarr.DEMConverter.get_geotiff_extent", "modulename": "cpom.dems.geotiff_to_zarr", "qualname": "DEMConverter.get_geotiff_extent", "kind": "function", "doc": "<p>Get info from GeoTIFF on its extent</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path of GeoTIFF file</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  _description_</li>\n<li><strong>IOError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(int,int,int,int,int,int,int): width,height,top_left,top_right,bottom_left,\n  bottom_right,pixel_width</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.geotiff_to_zarr.DEMConverter.convert_geotiff_to_zarr", "modulename": "cpom.dems.geotiff_to_zarr", "qualname": "DEMConverter.convert_geotiff_to_zarr", "kind": "function", "doc": "<p>Convert a GeoTIFF file to Zarr format and create a flipped version.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>demfile (str):</strong>  Path of GeoTIFF file.</li>\n<li><strong>zarrfile (str):</strong>  Path where the original Zarr file will be saved.</li>\n<li><strong>flipped_zarrfile (str):</strong>  Path where the flipped Zarr file will be saved.</li>\n<li><strong>chunk_width (int, optional):</strong>  chunk size in m (def = 20000 (ie 20km))</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">demfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">zarrfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">flipped_zarrfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.geotiff_to_zarr.main", "modulename": "cpom.dems.geotiff_to_zarr", "qualname": "main", "kind": "function", "doc": "<p>main function for command line tool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.get_cop90_dem", "modulename": "cpom.dems.get_cop90_dem", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.get_cop90_dem.json", "modulename": "cpom.dems.get_cop90_dem", "qualname": "json", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;@odata.context&#x27;: &#x27;$metadata#Products&#x27;, &#x27;value&#x27;: [{&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;17789f5e-3e29-4be7-b7ef-a21068f9d810&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230716T085637_20230716T085639_TOU_049172_b4f3.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 331602238, &#x27;OriginDate&#x27;: &#x27;2025-03-12T15:57:18.298211Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:03:18.168525Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:12:41.526120Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/16/DM02_HRS_MS2_1D_20230716T085637_20230716T085639_TOU_049172_b4f3&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;1d95b375557e6acc302646f7aebfea4a&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:40.538315Z&#x27;}, {&#x27;Value&#x27;: &#x27;dc34e124ac5bb0c865aaed1d88cd595fd615ab19f9857e0500290bbf71563639&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:41.252320Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-16T08:56:37.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-16T08:56:39.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((12.572035 43.714397, 12.613489 43.59473, 12.47602 43.57019, 12.445301 43.666931, 12.435551 43.665344, 12.436589 43.690086, 12.487643 43.699268, 12.572035 43.714397)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[12.572035, 43.714397], [12.613489, 43.59473], [12.47602, 43.57019], [12.445301, 43.666931], [12.435551, 43.665344], [12.436589, 43.690086], [12.487643, 43.699268], [12.572035, 43.714397]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;620d7925-92ff-4a29-8ed3-3a14a0dc7a8f&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110503T174844_20121114T175129_ADS_000000_E47Q_a91e6357.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 109096226, &#x27;OriginDate&#x27;: &#x27;2024-08-07T14:12:50.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-08-08T17:53:49.424468Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:31:25.726307Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/05/03/DEM1_SAR_DGE_30_20110503T174844_20121114T175129_ADS_000000_E47Q_a91e6357&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;b21cc71cf6346073a61eab4a96ed0e52&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:31:22.408743Z&#x27;}, {&#x27;Value&#x27;: &#x27;f0f540303e7b0f511ae014a875d6f2df72fa2d1e3f2463e766be8cc0be578e9d&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:31:22.589576Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-05-03T17:48:44.000000Z&#x27;, &#x27;End&#x27;: &#x27;2012-11-14T17:51:29.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((4 12, 5 12, 5 13, 4 13, 4 12))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[4.0, 12.0], [5.0, 12.0], [5.0, 13.0], [4.0, 13.0], [4.0, 12.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;f4975102-ab17-44e6-957b-202a079da8af&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110314T224355_20121206T223541_ADS_000000_5431_ef4453a5.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 3100561, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:34:03.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:56:08.524499Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T10:09:34.391818Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/14/DEM1_SAR_DTE_90_20110314T224355_20121206T223541_ADS_000000_5431_ef4453a5&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;7ae1a86d14f7b18d760fe2cc77b2237c&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:25.709432Z&#x27;}, {&#x27;Value&#x27;: &#x27;0dd4fa2d6deda0b617b4e1fb092aa40c42cd1844ebe6fe7c672c8363d9f352d9&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:25.734081Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-14T22:43:59.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-14T22:44:00.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-68 12, -67 12, -67 13, -68 13, -68 12))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-68.0, 12.0], [-67.0, 12.0], [-67.0, 13.0], [-68.0, 13.0], [-68.0, 12.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;c2968df0-9442-4cdc-8460-9e4766a08d0e&#x27;, &#x27;Name&#x27;: &#x27;CS00_SAR_SCH_1B_20221114T222342_20221114T222410_MAT_0_ce64.HDF5&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 30072919, &#x27;OriginDate&#x27;: &#x27;2024-06-18T13:26:26.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-06-19T15:14:19.608937Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T08:49:36.323720Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SCH_1B_6F15/2022/11/14/CS00_SAR_SCH_1B_20221114T222342_20221114T222410_MAT_0_ce64&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;0a3c044e615c1ad756d14efbfe9cb15a&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:49:34.909460Z&#x27;}, {&#x27;Value&#x27;: &#x27;523c0b19a5fd54ead51a8d8ee535938c36cc72246c1df67ba69554cf59d88d8d&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:49:34.981264Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2022-11-14T22:23:42.000000Z&#x27;, &#x27;End&#x27;: &#x27;2022-11-14T22:24:10.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((46.021527 89.472608, 26.327981 87.773409, 62.284416 87.037349, 97.033508 87.983028, 46.021527 89.472608))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[46.021527, 89.472608], [26.327981, 87.773409], [62.284416, 87.037349], [97.033508, 87.983028], [46.021527, 89.472608]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;0692ed75-6828-4b88-95d4-39a380b47211&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230822T091519_20230822T091522_TOU_049722_d747.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 364584100, &#x27;OriginDate&#x27;: &#x27;2025-03-12T17:32:58.611723Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T17:39:18.126901Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:10:10.444590Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/08/22/DM02_HRS_MS2_1D_20230822T091519_20230822T091522_TOU_049722_d747&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;1935d1a2d79c010615266811b816ecb3&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:10:09.456689Z&#x27;}, {&#x27;Value&#x27;: &#x27;b3c7e476395baa050384ec80ad2a47b01b0cfd00fc100f5401d93a0c97163e7e&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:10:10.143483Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-08-22T09:15:19.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-08-22T09:15:22.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((7.947698 44.52734, 7.98914 44.406685, 7.837373 44.380489, 7.796403 44.501335, 7.847396 44.51009, 7.947698 44.52734)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[7.947698, 44.52734], [7.98914, 44.406685], [7.837373, 44.380489], [7.796403, 44.501335], [7.847396, 44.51009], [7.947698, 44.52734]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;1a079e4d-219f-4fef-8b8a-17ffac951f51&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110316T000342_20121229T235544_ADS_000000_8666_d5ec66ff.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 3104101, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:34:34.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:52:32.196687Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:23:55.772717Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/16/DEM1_SAR_DTE_90_20110316T000342_20121229T235544_ADS_000000_8666_d5ec66ff&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;e9b3f79b3c8257a3cd658c70c9ab754b&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:51.131069Z&#x27;}, {&#x27;Value&#x27;: &#x27;9ea0bac6a603688d691279d3500258d3533031a7826f956a09b2aea016c02a11&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:51.157544Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-16T00:03:44.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-16T00:03:45.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-89 21, -88 21, -88 22, -89 22, -89 21))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-89.0, 21.0], [-88.0, 21.0], [-88.0, 22.0], [-89.0, 22.0], [-89.0, 21.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;3c310f3d-59a5-4338-8b03-d40403f06224&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230717T090950_20230717T090953_TOU_049187_18e9.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 68710119, &#x27;OriginDate&#x27;: &#x27;2025-03-12T16:00:19.729439Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:06:12.511536Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:09:51.439189Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/17/DM02_HRS_MS2_1D_20230717T090950_20230717T090953_TOU_049187_18e9&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;a614be68b9eff0832d1cfb2c9bbb5b08&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:09:50.949251Z&#x27;}, {&#x27;Value&#x27;: &#x27;01ed0cd69c357bb39b5286417502cf8a1c978e03abcd32cc3985ec43e4dc3f9c&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:09:51.104794Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-17T09:09:50.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-17T09:09:53.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((11.112794 42.302204, 11.130669 42.305275, 11.13517 42.303921, 11.138556 42.302658, 11.141823 42.301231, 11.14815 42.298061, 11.152 42.295841, 11.1553 42.293655, 11.158409 42.291271, 11.161943 42.288071, 11.164797 42.284988, 11.167826 42.281033, 11.169843 42.277847, 11.173132 42.271786, 11.174432 42.269012, 11.175694 42.265541, 11.176785 42.261749, 11.177467 42.258007, 11.17777 42.254295, 11.177746 42.250896, 11.177199 42.246414, 11.176503 42.243496, 11.175585 42.240688, 11.174458 42.237999, 11.171451 42.232662, 11.170218 42.228554, 11.169009 42.225662, 11.167661 42.223042, 11.165985 42.220329, 11.164162 42.217812, 11.160889 42.213898, 11.158555 42.211475, 11.155077 42.208225, 11.152802 42.20636, 11.143714 42.199932, 11.112794 42.302204)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[11.112794, 42.302204], [11.130669, 42.305275], [11.13517, 42.303921], [11.138556, 42.302658], [11.141823, 42.301231], [11.14815, 42.298061], [11.152, 42.295841], [11.1553, 42.293655], [11.158409, 42.291271], [11.161943, 42.288071], [11.164797, 42.284988], [11.167826, 42.281033], [11.169843, 42.277847], [11.173132, 42.271786], [11.174432, 42.269012], [11.175694, 42.265541], [11.176785, 42.261749], [11.177467, 42.258007], [11.17777, 42.254295], [11.177746, 42.250896], [11.177199, 42.246414], [11.176503, 42.243496], [11.175585, 42.240688], [11.174458, 42.237999], [11.171451, 42.232662], [11.170218, 42.228554], [11.169009, 42.225662], [11.167661, 42.223042], [11.165985, 42.220329], [11.164162, 42.217812], [11.160889, 42.213898], [11.158555, 42.211475], [11.155077, 42.208225], [11.152802, 42.20636], [11.143714, 42.199932], [11.112794, 42.302204]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;6bad69ee-29e1-42c4-865b-9d4fce0e69b2&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230716T085615_20230716T085617_TOU_049172_2e85.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 294683782, &#x27;OriginDate&#x27;: &#x27;2025-03-12T15:51:02.531277Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T15:57:08.295334Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:15:41.477586Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/16/DM02_HRS_MS2_1D_20230716T085615_20230716T085617_TOU_049172_2e85&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;00819c87ca7166519d07ef913f14b57b&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:15:40.721774Z&#x27;}, {&#x27;Value&#x27;: &#x27;f37170da709620bd13cf33ef7ae57c90b0e7bd97ab968491599441167bc343f1&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:15:41.220686Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-16T08:56:15.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-16T08:56:17.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((12.911457 42.237556, 12.907759 42.248093, 12.907124 42.250481, 12.903599 42.261139, 12.901861 42.265743, 12.901004 42.269039, 12.897956 42.278599, 12.889204 42.304447, 12.888342 42.307652, 12.884692 42.318367, 12.883074 42.324001, 12.879885 42.333256, 12.874808 42.349144, 12.873528 42.352253, 12.871953 42.357319, 13.013099 42.382969, 13.006705 42.254745, 12.924328 42.239841, 12.911457 42.237556)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[12.911457, 42.237556], [12.907759, 42.248093], [12.907124, 42.250481], [12.903599, 42.261139], [12.901861, 42.265743], [12.901004, 42.269039], [12.897956, 42.278599], [12.889204, 42.304447], [12.888342, 42.307652], [12.884692, 42.318367], [12.883074, 42.324001], [12.879885, 42.333256], [12.874808, 42.349144], [12.873528, 42.352253], [12.871953, 42.357319], [13.013099, 42.382969], [13.006705, 42.254745], [12.924328, 42.239841], [12.911457, 42.237556]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;9369742d-77a0-45a8-aa1d-c9bf59265daa&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20180924T052230_20180924T052346_TRS_56261_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 365118953, &#x27;OriginDate&#x27;: &#x27;2024-06-18T13:24:48.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-06-19T15:14:21.422480Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:12:52.312672Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2018/09/24/RS02_SAR_SW_SCW_20180924T052230_20180924T052346_TRS_56261_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;ccd80047282d3853cbfcef5f7bbf4a45&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:51.289031Z&#x27;}, {&#x27;Value&#x27;: &#x27;bc9325ac7c3fa02bc0ba33c7c18a09bea85bfa5f626f3eacc120640582043acb&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:52.034233Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2018-09-24T05:22:30.000000Z&#x27;, &#x27;End&#x27;: &#x27;2018-09-24T05:23:46.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((36.24 76.59, 49.28 80.31, 20.85 82.52, 15.75 78.16, 36.24 76.59))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[36.24, 76.59], [49.28, 80.31], [20.85, 82.52], [15.75, 78.16], [36.24, 76.59]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;61a1da79-4a5d-45e1-939d-68ff31a6d141&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20221118T050443_20221118T050559_TRS_77927_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 357705476, &#x27;OriginDate&#x27;: &#x27;2024-06-18T13:26:26.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-06-19T15:14:15.658425Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:13:59.451660Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2022/11/18/RS02_SAR_SW_SCW_20221118T050443_20221118T050559_TRS_77927_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;1922a3428bab4d8705718eaf83bd94f3&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:58.572074Z&#x27;}, {&#x27;Value&#x27;: &#x27;eb422bd2227e5991011cd6d6ec0d204375739bcc3c70d761cc56fcd4eba15186&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:59.169679Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2022-11-18T05:04:43.000000Z&#x27;, &#x27;End&#x27;: &#x27;2022-11-18T05:05:59.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((37.42 75.19, 47.98 79.07, 22.81 81, 18.87 76.63, 37.42 75.19))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[37.42, 75.19], [47.98, 79.07], [22.81, 81.0], [18.87, 76.63], [37.42, 75.19]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;2f3cc59a-22df-42d3-ae41-e4d5deca57c8&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110310T205652_20140124T095825_ADS_000000_Eqgk_adea2397.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 54972870, &#x27;OriginDate&#x27;: &#x27;2024-05-01T20:50:48.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-07T07:22:13.977886Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:48:10.864421Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/03/10/DEM1_SAR_DGE_30_20110310T205652_20140124T095825_ADS_000000_Eqgk_adea2397&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;8896a853805ef90f8f33341b1d385e5a&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:48:03.977471Z&#x27;}, {&#x27;Value&#x27;: &#x27;322089997f670bb24e1f2f6890487a0879d26d462887501359f2a9e35d2755f7&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:48:04.104858Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-10T20:56:52.000000Z&#x27;, &#x27;End&#x27;: &#x27;2014-01-24T09:58:25.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-54 64, -53 64, -53 65, -54 65, -54 64))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-54.0, 64.0], [-53.0, 64.0], [-53.0, 65.0], [-54.0, 65.0], [-54.0, 64.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;a7ad04a2-7659-4164-87dd-ad3958c314aa&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110131T015032_20130418T020044_ADS_000000_KYvJ_adea2397.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 37015150, &#x27;OriginDate&#x27;: &#x27;2024-05-01T20:49:38.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-07T15:34:34.229789Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:48:10.929681Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/01/31/DEM1_SAR_DGE_30_20110131T015032_20130418T020044_ADS_000000_KYvJ_adea2397&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;114eda0b91fa735089b706e33bb376e2&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:48:05.009852Z&#x27;}, {&#x27;Value&#x27;: &#x27;11164f605b7e15b35720395c5b2722f706481c786b438abb37e30fa3ee9299c6&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:48:05.098361Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-01-31T01:50:32.000000Z&#x27;, &#x27;End&#x27;: &#x27;2013-04-18T02:00:44.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-130 70, -129 70, -129 71, -130 71, -130 70))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-130.0, 70.0], [-129.0, 70.0], [-129.0, 71.0], [-130.0, 71.0], [-130.0, 70.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;631057f7-e49d-48aa-b57f-218c46ed6d79&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230716T085655_20230716T085657_TOU_049172_6747.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 67248150, &#x27;OriginDate&#x27;: &#x27;2025-03-12T15:58:45.379720Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:04:57.581991Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:14:53.120268Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/16/DM02_HRS_MS2_1D_20230716T085655_20230716T085657_TOU_049172_6747&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;7df5064ccb9b3366e7344e2c74fa73ac&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:52.708426Z&#x27;}, {&#x27;Value&#x27;: &#x27;87bb635b00ffd59ee0737cce187319bc04a6adfb8e1e9d77830b7f697632952b&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:52.840947Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-16T08:56:55.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-16T08:56:57.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((12.186606 44.820206, 12.190661 44.808926, 12.191603 44.801834, 12.185932 44.793156, 12.180495 44.787872, 12.169065 44.781219, 12.155729 44.780773, 12.151361 44.773468, 12.134953 44.770447, 12.128301 44.771156, 12.128329 44.749756, 12.104053 44.760677, 12.098282 44.778702, 12.099043 44.77882, 12.091264 44.803032, 12.186606 44.820206)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[12.186606, 44.820206], [12.190661, 44.808926], [12.191603, 44.801834], [12.185932, 44.793156], [12.180495, 44.787872], [12.169065, 44.781219], [12.155729, 44.780773], [12.151361, 44.773468], [12.134953, 44.770447], [12.128301, 44.771156], [12.128329, 44.749756], [12.104053, 44.760677], [12.098282, 44.778702], [12.099043, 44.77882], [12.091264, 44.803032], [12.186606, 44.820206]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;61ac4c79-56d2-4172-b484-9c87260f76de&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230717T091001_20230717T091004_TOU_049187_e2ee.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 246298935, &#x27;OriginDate&#x27;: &#x27;2025-03-12T16:02:21.464850Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:08:08.607225Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:11:04.459984Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/17/DM02_HRS_MS2_1D_20230717T091001_20230717T091004_TOU_049187_e2ee&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;05039a034fcdc94d3b6504c2dd744f87&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:03.671966Z&#x27;}, {&#x27;Value&#x27;: &#x27;ff7bef013465bc62df012967b768994142a2bf43792c62bb14966700d6423c66&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:04.181211Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-17T09:10:01.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-17T09:10:04.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((11.058395 42.993366, 11.073902 42.943554, 11.056598 42.940548, 11.042823 42.93779, 11.025049 42.937153, 11.008652 42.940559, 10.997647 42.944386, 10.977642 42.95187, 10.96791 42.953766, 10.960625 42.953629, 10.952751 42.95071, 10.947968 42.945442, 10.946019 42.939308, 10.946479 42.93285, 10.9495 42.929699, 10.967537 42.924171, 11.00209 42.919525, 11.023001 42.913303, 11.029382 42.894291, 11.035513 42.861561, 10.945613 42.846653, 10.938297 42.870071, 10.908162 42.968582, 10.958164 42.976826, 11.058395 42.993366)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[11.058395, 42.993366], [11.073902, 42.943554], [11.056598, 42.940548], [11.042823, 42.93779], [11.025049, 42.937153], [11.008652, 42.940559], [10.997647, 42.944386], [10.977642, 42.95187], [10.96791, 42.953766], [10.960625, 42.953629], [10.952751, 42.95071], [10.947968, 42.945442], [10.946019, 42.939308], [10.946479, 42.93285], [10.9495, 42.929699], [10.967537, 42.924171], [11.00209, 42.919525], [11.023001, 42.913303], [11.029382, 42.894291], [11.035513, 42.861561], [10.945613, 42.846653], [10.938297, 42.870071], [10.908162, 42.968582], [10.958164, 42.976826], [11.058395, 42.993366]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;5e3a2ff3-dce1-4657-ba55-3c177791a831&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230716T085618_20230716T085621_TOU_049172_1a29.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 358813493, &#x27;OriginDate&#x27;: &#x27;2025-03-12T15:53:27.655444Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T15:59:12.010031Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:14:06.298807Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/16/DM02_HRS_MS2_1D_20230716T085618_20230716T085621_TOU_049172_1a29&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;689faf9918fcf80c4e0e2cfa9768521e&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:05.459879Z&#x27;}, {&#x27;Value&#x27;: &#x27;d3283ce15d730a024b09a5aacf8754ff7367b94789c2ce65e73db42fa6015fe9&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:06.037213Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-16T08:56:18.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-16T08:56:21.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((12.826892 42.49102, 12.825634 42.495739, 12.824214 42.499607, 12.821077 42.509815, 12.818744 42.516479, 12.817457 42.521141, 12.815867 42.525539, 12.815522 42.526978, 12.813739 42.530895, 12.81288 42.53484, 12.809978 42.543922, 12.807551 42.550205, 12.806696 42.554241, 12.804957 42.559654, 12.803462 42.56353, 12.802222 42.566113, 12.800774 42.571518, 12.797571 42.578922, 12.946085 42.60569, 12.985394 42.487755, 12.836815 42.461159, 12.826892 42.49102)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[12.826892, 42.49102], [12.825634, 42.495739], [12.824214, 42.499607], [12.821077, 42.509815], [12.818744, 42.516479], [12.817457, 42.521141], [12.815867, 42.525539], [12.815522, 42.526978], [12.813739, 42.530895], [12.81288, 42.53484], [12.809978, 42.543922], [12.807551, 42.550205], [12.806696, 42.554241], [12.804957, 42.559654], [12.803462, 42.56353], [12.802222, 42.566113], [12.800774, 42.571518], [12.797571, 42.578922], [12.946085, 42.60569], [12.985394, 42.487755], [12.836815, 42.461159], [12.826892, 42.49102]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;4f78eea1-9cf6-490a-acb7-fbe434d3d267&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230717T090959_20230717T091002_TOU_049187_1dff.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 239185187, &#x27;OriginDate&#x27;: &#x27;2025-03-12T16:02:12.068746Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:08:09.411052Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:17:17.892844Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/17/DM02_HRS_MS2_1D_20230717T090959_20230717T091002_TOU_049187_1dff&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;933a1c10fe333bde9e04b9fb91690387&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:17:17.250388Z&#x27;}, {&#x27;Value&#x27;: &#x27;c67e8e737656e3ee800d379077bbd8e59c36d4ddf56a1735c598b0727ab0ed05&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:17:17.630162Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-17T09:09:59.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-17T09:10:02.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((10.943003 42.855938, 11.03375 42.870983, 11.038905 42.843441, 11.035781 42.835274, 11.076458 42.834854, 11.076635 42.753937, 10.979363 42.737671, 10.943003 42.855938)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[10.943003, 42.855938], [11.03375, 42.870983], [11.038905, 42.843441], [11.035781, 42.835274], [11.076458, 42.834854], [11.076635, 42.753937], [10.979363, 42.737671], [10.943003, 42.855938]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;3b222c29-9c73-46c2-8acf-ede6745ef6b0&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230716T085657_20230716T085659_TOU_049172_1864.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 52069846, &#x27;OriginDate&#x27;: &#x27;2025-03-12T15:59:09.480650Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:04:56.672694Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:13:56.336048Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/16/DM02_HRS_MS2_1D_20230716T085657_20230716T085659_TOU_049172_1864&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;97448410fe61cf70224fd0652c6f9f26&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:55.933824Z&#x27;}, {&#x27;Value&#x27;: &#x27;61024d96bd271abb53f9402770f4ba3b54033d6244e4d7aef80ec8bc0536914f&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:56.056611Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-16T08:56:57.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-16T08:56:59.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((12.063696 44.786495, 12.063043 44.786568, 12.062183 44.786892, 12.061681 44.787277, 12.061294 44.787914, 12.061407 44.788948, 12.062102 44.789658, 12.108637 44.81575, 12.111579 44.817795, 12.117731 44.81921, 12.120149 44.819557, 12.125871 44.825439, 12.131678 44.828896, 12.137984 44.831341, 12.147744 44.832787, 12.148646 44.832767, 12.15069 44.832363, 12.150713 44.840057, 12.151292 44.840973, 12.152246 44.841469, 12.153412 44.841599, 12.154427 44.841381, 12.183663 44.829754, 12.191045 44.80938, 12.107625 44.794365, 12.063696 44.786495)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[12.063696, 44.786495], [12.063043, 44.786568], [12.062183, 44.786892], [12.061681, 44.787277], [12.061294, 44.787914], [12.061407, 44.788948], [12.062102, 44.789658], [12.108637, 44.81575], [12.111579, 44.817795], [12.117731, 44.81921], [12.120149, 44.819557], [12.125871, 44.825439], [12.131678, 44.828896], [12.137984, 44.831341], [12.147744, 44.832787], [12.148646, 44.832767], [12.15069, 44.832363], [12.150713, 44.840057], [12.151292, 44.840973], [12.152246, 44.841469], [12.153412, 44.841599], [12.154427, 44.841381], [12.183663, 44.829754], [12.191045, 44.80938], [12.107625, 44.794365], [12.063696, 44.786495]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;457dac5c-0806-4263-8ac0-887587e6b7b4&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230821T090139_20230821T090142_TOU_049707_3458.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 306332559, &#x27;OriginDate&#x27;: &#x27;2025-03-12T17:23:55.691093Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T17:30:12.349718Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:11:06.614416Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/08/21/DM02_HRS_MS2_1D_20230821T090139_20230821T090142_TOU_049707_3458&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;1222903987f827f88f85b3356a1093c9&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:05.800091Z&#x27;}, {&#x27;Value&#x27;: &#x27;e069135c286532c56fc42ff8859c7859dd9eaa57b84f119c88bc1adf7e0839a3&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:06.260436Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-08-21T09:01:39.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-08-21T09:01:42.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((10.866323 43.906025, 10.866254 43.873684, 10.866693 43.777168, 10.764301 43.758877, 10.722578 43.880428, 10.77338 43.889481, 10.866323 43.906025)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[10.866323, 43.906025], [10.866254, 43.873684], [10.866693, 43.777168], [10.764301, 43.758877], [10.722578, 43.880428], [10.77338, 43.889481], [10.866323, 43.906025]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;fba9aaf1-7283-49bc-8f71-0de6083b84af&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230717T091014_20230717T091016_TOU_049187_b15b.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 341622543, &#x27;OriginDate&#x27;: &#x27;2025-03-12T16:04:44.617949Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:10:26.621687Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:15:09.499010Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/17/DM02_HRS_MS2_1D_20230717T091014_20230717T091016_TOU_049187_b15b&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;a5a32621b27130e5abdf9a9e9d122363&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:15:08.681370Z&#x27;}, {&#x27;Value&#x27;: &#x27;b30794edca684482977332f21d464a9ea64f55c2e2c2c38152d6bb5b9f17cd95&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:15:09.199720Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-17T09:10:14.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-17T09:10:16.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((10.665345 43.744419, 10.778398 43.76289, 10.786092 43.740112, 10.826832 43.739792, 10.854771 43.65115, 10.702472 43.625969, 10.665345 43.744419)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[10.665345, 43.744419], [10.778398, 43.76289], [10.786092, 43.740112], [10.826832, 43.739792], [10.854771, 43.65115], [10.702472, 43.625969], [10.665345, 43.744419]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;708b1214-da71-4bb2-b41b-dcec6673b4ee&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20240709T085850_20240709T085852_TOU_054510_6f7f.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 68482940, &#x27;OriginDate&#x27;: &#x27;2025-03-12T18:22:51.337896Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T18:28:23.190106Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:16:15.722183Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2024/07/09/DM02_HRS_MS2_1D_20240709T085850_20240709T085852_TOU_054510_6f7f&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;3214958b367b9eafa77aba11acec6676&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:16:14.415005Z&#x27;}, {&#x27;Value&#x27;: &#x27;6f6720d23ee9c14f9758e92f283532cf3c249a5baf9bcb1970207e4f58dff72c&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:16:14.538051Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2024-07-09T08:58:50.000000Z&#x27;, &#x27;End&#x27;: &#x27;2024-07-09T08:58:52.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((7.496691 43.842606, 7.50571 43.844463, 7.506232 43.844669, 7.506483 43.8451, 7.507505 43.84874, 7.507788 43.851826, 7.507366 43.852909, 7.506441 43.853851, 7.503001 43.856094, 7.481506 43.864311, 7.520411 43.87104, 7.522943 43.870239, 7.533634 43.861469, 7.536715 43.854904, 7.545344 43.84108, 7.546945 43.826195, 7.540146 43.81115, 7.530144 43.803871, 7.521727 43.800552, 7.509861 43.797863, 7.49524 43.799435, 7.490557 43.801575, 7.481595 43.801353, 7.47977 43.84322, 7.496691 43.842606)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[7.496691, 43.842606], [7.50571, 43.844463], [7.506232, 43.844669], [7.506483, 43.8451], [7.507505, 43.84874], [7.507788, 43.851826], [7.507366, 43.852909], [7.506441, 43.853851], [7.503001, 43.856094], [7.481506, 43.864311], [7.520411, 43.87104], [7.522943, 43.870239], [7.533634, 43.861469], [7.536715, 43.854904], [7.545344, 43.84108], [7.546945, 43.826195], [7.540146, 43.81115], [7.530144, 43.803871], [7.521727, 43.800552], [7.509861, 43.797863], [7.49524, 43.799435], [7.490557, 43.801575], [7.481595, 43.801353], [7.47977, 43.84322], [7.496691, 43.842606]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;51964363-f596-4a39-89ed-7835a7cd06ff&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230716T085626_20230716T085628_TOU_049172_a5c2.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 353703913, &#x27;OriginDate&#x27;: &#x27;2025-03-12T15:54:48.003445Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:01:08.796218Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:16:50.975503Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/16/DM02_HRS_MS2_1D_20230716T085626_20230716T085628_TOU_049172_a5c2&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;1561db3b6d9793d001a1ee21333944fa&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:16:49.910073Z&#x27;}, {&#x27;Value&#x27;: &#x27;3de42dd42261cda7030fdcf2d0d455796a508092e626d16aaa0789c8d25c82d3&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:16:50.613572Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-16T08:56:26.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-16T08:56:28.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((12.749158 43.042061, 12.749824 43.0411, 12.750362 43.039795, 12.750596 43.038216, 12.750193 43.029156, 12.805505 43.027649, 12.838479 42.931084, 12.734388 42.912346, 12.734284 42.910084, 12.68898 42.901913, 12.647849 43.023727, 12.673018 43.028328, 12.749158 43.042061)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[12.749158, 43.042061], [12.749824, 43.0411], [12.750362, 43.039795], [12.750596, 43.038216], [12.750193, 43.029156], [12.805505, 43.027649], [12.838479, 42.931084], [12.734388, 42.912346], [12.734284, 42.910084], [12.68898, 42.901913], [12.647849, 43.023727], [12.673018, 43.028328], [12.749158, 43.042061]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;e7297118-1a61-4397-894d-7c5a118abad0&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230717T090954_20230717T090956_TOU_049187_80be.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 52499061, &#x27;OriginDate&#x27;: &#x27;2025-03-12T16:00:55.421953Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:07:12.307512Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T08:52:08.981163Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/17/DM02_HRS_MS2_1D_20230717T090954_20230717T090956_TOU_049187_80be&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;0be1b88dbba4f28b8951c57509faa7cc&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:52:06.963810Z&#x27;}, {&#x27;Value&#x27;: &#x27;51473e9352f01f599f7c059e809cbcdfcdfe2cf2ba8b1dae9fd00830ee5ba17a&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:52:07.075007Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-17T09:09:54.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-17T09:09:56.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((11.187657 42.478104, 11.191243 42.478874, 11.190988 42.48127, 11.193316 42.488323, 11.20061 42.495655, 11.210157 42.496723, 11.231499 42.426746, 11.227482 42.426083, 11.173494 42.425133, 11.174503 42.476818, 11.187657 42.478104)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[11.187657, 42.478104], [11.191243, 42.478874], [11.190988, 42.48127], [11.193316, 42.488323], [11.20061, 42.495655], [11.210157, 42.496723], [11.231499, 42.426746], [11.227482, 42.426083], [11.173494, 42.425133], [11.174503, 42.476818], [11.187657, 42.478104]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;587fe02d-6a8f-4e8a-911f-65455b742602&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230723T085500_20230723T085502_TOU_049276_81db.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 326665536, &#x27;OriginDate&#x27;: &#x27;2025-03-12T16:13:33.443916Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:19:27.303395Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:15:14.059041Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/23/DM02_HRS_MS2_1D_20230723T085500_20230723T085502_TOU_049276_81db&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;ca4d0edff9ff80a559f313df18a75f0f&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:15:13.277163Z&#x27;}, {&#x27;Value&#x27;: &#x27;eca575ea48f0d5319a271df03894c4fbfa916933bf1a215d52f845c63078feb2&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:15:13.779039Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-23T08:55:00.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-23T08:55:02.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((13.7396 42.59198, 13.730712 42.619137, 13.700366 42.713463, 13.830316 42.736198, 13.830564 42.735428, 13.830824 42.735474, 13.869648 42.6147, 13.7396 42.59198)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[13.7396, 42.59198], [13.730712, 42.619137], [13.700366, 42.713463], [13.830316, 42.736198], [13.830564, 42.735428], [13.830824, 42.735474], [13.869648, 42.6147], [13.7396, 42.59198]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;c93cd572-c198-474b-a5ec-c34c1f3bb25d&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230717T090952_20230717T090955_TOU_049187_9192.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 91096441, &#x27;OriginDate&#x27;: &#x27;2025-03-12T16:00:30.295123Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:06:08.960023Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:12:25.149395Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/17/DM02_HRS_MS2_1D_20230717T090952_20230717T090955_TOU_049187_9192&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;3231c8119742c80378966edf9c3b0c61&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:24.634569Z&#x27;}, {&#x27;Value&#x27;: &#x27;79fb2f63e9f8dcfdc55db979012fe512970bb8847590b0880cc62d8899e88822&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:24.782785Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-17T09:09:52.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-17T09:09:55.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((11.159213 42.42448, 11.158489 42.410774, 11.159436 42.402386, 11.15866 42.399799, 11.197217 42.400143, 11.196497 42.363861, 11.09366 42.365028, 11.093727 42.394424, 11.093438 42.413528, 11.159213 42.42448)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[11.159213, 42.42448], [11.158489, 42.410774], [11.159436, 42.402386], [11.15866, 42.399799], [11.197217, 42.400143], [11.196497, 42.363861], [11.09366, 42.365028], [11.093727, 42.394424], [11.093438, 42.413528], [11.159213, 42.42448]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;4060f5fc-da53-4294-9ff4-ede41ce42c4e&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110314T225158_20130719T225544_ADS_000000_2566_57f834c0.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 3104102, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:37:10.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:55:39.865357Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:23:57.564302Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/14/DEM1_SAR_DTE_90_20110314T225158_20130719T225544_ADS_000000_2566_57f834c0&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;a5b4c204ce05e12aecfafba5ed4a03d0&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:23.663012Z&#x27;}, {&#x27;Value&#x27;: &#x27;04e016feb79183976272f581c45fb3689aa8df853704e4f20b87e3fb16b63e26&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:23.691924Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-14T22:52:08.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-14T22:52:09.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-76 45, -75 45, -75 46, -76 46, -76 45))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-76.0, 45.0], [-75.0, 45.0], [-75.0, 46.0], [-76.0, 46.0], [-76.0, 45.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;4506564a-c821-4be3-83f0-8be5cffea92d&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110313T231237_20121005T231301_ADS_000000_9845_d5ec66ff.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 1655693, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:37:51.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:59:47.854831Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T10:09:35.554483Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/13/DEM1_SAR_DTE_90_20110313T231237_20121005T231301_ADS_000000_9845_d5ec66ff&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;67d3710f9b46d1f8ad8f3d611b2b16cb&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:36.071505Z&#x27;}, {&#x27;Value&#x27;: &#x27;0e1f827c133d0d3c2483e7ab6c8d76deef95017143c52c6e56994cf813faacb2&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:36.095297Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-13T23:12:39.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-13T23:12:40.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-83 54, -82 54, -82 55, -83 55, -83 54))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-83.0, 54.0], [-82.0, 54.0], [-82.0, 55.0], [-83.0, 55.0], [-83.0, 54.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;c5919081-599e-4564-b0de-733798272820&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230815T091737_20230815T091739_TOU_049618_fc0e.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 301816154, &#x27;OriginDate&#x27;: &#x27;2025-03-12T17:14:49.664430Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T17:21:00.023814Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:12:21.468397Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/08/15/DM02_HRS_MS2_1D_20230815T091737_20230815T091739_TOU_049618_fc0e&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;76fa9306f6118fddbd71eb70730d9644&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:20.588946Z&#x27;}, {&#x27;Value&#x27;: &#x27;f033f10eb0d6315b62b2beb606d723a56c40b650540dd4b63ef494e8d11feeb7&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:21.196927Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-08-15T09:17:37.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-08-15T09:17:39.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((8.375854 45.069809, 8.372096 45.198315, 8.484105 45.216362, 8.523809 45.093449, 8.375854 45.069809)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[8.375854, 45.069809], [8.372096, 45.198315], [8.484105, 45.216362], [8.523809, 45.093449], [8.375854, 45.069809]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;61eada6e-14e5-4cb2-a578-b44b3c7af932&#x27;, &#x27;Name&#x27;: &#x27;SP06_NAO_MS4__3_20180705T091411_20180705T091431_TOU_1234_b65b_COG.DIMA&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 6564601, &#x27;OriginDate&#x27;: &#x27;2025-02-24T15:58:37.614679Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-02-24T16:59:25.388619Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T08:58:15.552125Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2018/NAO_MS4__3_E1F0-COG/2018/07/05/SP06_NAO_MS4__3_20180705T091411_20180705T091431_TOU_1234_b65b_COG&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;eccd0f21c20ed2b9a9d117dae8dbe203&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:58:11.119047Z&#x27;}, {&#x27;Value&#x27;: &#x27;7790c77baa334a1046b269ba61fec06734269cfd783bec4e6136548875f98d15&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:58:11.149030Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2018-07-05T09:14:11.000000Z&#x27;, &#x27;End&#x27;: &#x27;2018-07-05T09:14:31.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((25.9745240097854 55.7712305552325, 25.9716493943847 55.77176159735, 25.9690076961422 55.7725872575835, 25.9666938296937 55.7736778771573, 25.9647909524338 55.7749942760742, 25.9633674770475 55.7764891584729, 25.962474610093 55.7781088097868, 25.9621445054515 55.7797950251007, 25.9624223336419 55.7815886722624, 25.9633352985948 55.7833165158846, 25.9648465699639 55.7849087018943, 25.9806047311205 55.8013618328201, 25.9806166665655 55.8013742362772, 25.9806646861181 55.8014237666139, 25.9806767603313 55.8014361282032, 25.9807253340021 55.8014854900861, 25.9807375465073 55.8014978093194, 25.9807866724016 55.8015470008204, 25.9807990227173 55.8015592772111, 25.9808486988654 55.8016082963552, 25.9808611865042 55.8016205294185, 25.9809114109676 55.8016693742907, 25.9809240354371 55.8016815635434, 25.9809748062301 55.8017302322099, 25.9809875670323 55.8017423771707, 25.9810388821589 55.8017908677157, 25.9810517787904 55.8018029679048, 25.9811036362071 55.8018512783951, 25.981116668159 55.8018633333345, 25.9811690658448 55.8019114618849, 25.9811822326032 55.8019234710986, 25.9812351684579 55.8019714157781, 25.9812484695032 55.8019833787918, 25.9813019414844 55.8020311377482, 26.0086983237006 55.8264432984855, 26.0087117764653 55.8264552116531, 26.0087658543422 55.8265027702065, 26.0087794403859 55.8265146362011, 26.0088340503228 55.826562005136, 26.0088477691095 55.8265738234889, 26.0089029089278 55.8266210009134, 26.0089167599162 55.826632771158, 26.008972427452 55.826679755219, 26.0089864100956 55.8266914768901, 26.0090426031601 55.826738265738, 26.0090567169072 55.8267499383728, 26.0091134332617 55.8267965301417, 26.0091276775554 55.8268081532792, 26.0091849149858 55.8268545461486, 26.0091992892641 55.8268661193297, 26.009257045494 55.8269123114524, 26.0092715491896 55.8269238342199, 26.0093298219497 55.8269698237794, 26.0093444544905 55.8269812956782, 26.0094032414898 55.8270270808646, 26.0094180022982 55.8270385014416, 26.0094773011784 55.8270840804165, 26.0094921896719 55.8270954492206, 26.00955199815 55.8271408202276, 26.0095670137412 55.8271521368097, 26.0096273294042 55.8271972980166, 26.0096424715003 55.8272085619298, 26.0097032920097 55.8272535115841, 26.0097185600134 55.8272647223834, 26.0097798829243 55.8273094586768, 26.0097952762328 55.8273206159194, 26.0098570991781 55.8273651371234, 26.0098726171841 55.8273762403687, 26.0099349376864 55.8274205446976, 26.0099505797773 55.827431593507, 26.0100133953807 55.8274756792136, 26.0100291609392 55.8274866731506, 26.0100924691744 55.8275305385006, 26.0101083575783 55.827541477131, 26.0101721559552 55.8275851203975, 26.0101881665774 55.8275960032892, 26.0102524525499 55.827639422729, 26.0102685847585 55.8276502494522, 26.0103333558147 55.8276934433677, 26.0103496089729 55.8277042134946, 26.0104148625362 55.8277471801663, 26.0104312360024 55.8277578932716, 26.0104969695151 55.827800631014, 26.0105134626431 55.8278112866745, 26.0105796735128 55.8278537938008, 26.0105962856516 55.8278643915956, 26.0106629712404 55.8279066664111, 26.0106797017343 55.8279172059215, 26.0107468594292 55.8279592467688, 26.0107637076176 55.8279697275786, 26.0108313347641 55.8280115327947, 26.0108482999821 55.8280219544898, 26.0109163939164 55.8280635224268, 26.0109334754942 55.8280738845956, 26.0110020335156 55.8281152136038, 26.011019230779 55.8281255158369, 26.0110882501737 55.8281666042796, 26.0111055624438 55.8281768461702, 26.0111750405307 55.82821769245, 26.011192467124 55.8282278735934, 26.0112624010984 55.8282684760604, 26.011279941327 55.8282785960545, 26.0113503284701 55.8283189531295, 26.0113679816414 55.8283290115745, 26.0114388191852 55.8283691216693, 26.0114565846024 55.8283791181678, 26.0115278696941 55.8284189796662, 26.0115457466559 55.8284289138234, 26.0116174765462 55.8284685251872, 26.0116354643467 55.8284783966108, 26.0117076361682 55.8285177562554, 26.0117257340972 55.8285275645552, 26.0117983449874 55.8285666709189, 26.0118165523305 55.8285764157077, 26.0118895994557 55.8286152672636, 26.011907915494 55.8286249481563, 26.0119813959597 55.8286635433639, 26.01199981997 55.8286731599782, 26.0120737308546 55.8287114973023, 26.0120922621094 55.8287210492582, 26.012166600532 55.8287591272037, 26.0121852382998 55.8287686141239, 26.0122600012891 55.828806431168, 26.012278744834 55.8288158526778, 26.0123539294616 55.8288534073386, 26.0123727780433 55.8288627630657, 26.0124483813245 55.8289000538517, 26.0124673341989 55.8289093434267, 26.0125433531615 55.8289463688712, 26.0125624095804 55.8289555919269, 26.0126388412246 55.8289923505682, 26.0126580004354 55.8290015067404, 26.0127348417123 55.8290379971115, 26.0127541029583 55.8290470860385, 26.0128313508842 55.8290833067219, 26.0128507134051 55.8290923280446, 26.0129283648896 55.8291282775906, 26.0129478279207 55.8291372309527, 26.013025879919 55.829172907951, 26.0130454426917 55.8291817929988, 26.0131238921003 55.8292171960304, 26.0131435538422 55.8292260124129, 26.013222397585 55.8292611400891, 26.0132421575196 55.8292698874579, 26.0133213924806 55.8293047383898, 26.0133412498276 55.8293134163994, 26.01342087286 55.8293479892024, 26.0134408268353 55.8293565975101, 26.0135208348133 55.8293908908265, 26.0135408846289 55.8293994290921, 26.0136212743851 55.8294334415638, 26.0136414192492 55.8294419094501, 26.0137221876131 55.8294756397351, 26.0137424267302 55.8294840369075, 26.0138235705049 55.8295174836704, 26.0138439030756 55.8295258097972, 26.0139254190597 55.829558971718, 26.0139458442811 55.8295672264702, 26.0140277292666 55.8296001022433, 26.0140482463321 55.829608285295, 26.0141304970666 55.8296408736142, 26.0141511051658 55.8296489846419, 26.0142337183975 55.8296812842186, 26.0142544167166 55.829689322902, 26.0143373892102 55.8297213324709, 26.0143581769318 55.8297292984924, 26.0144415054014 55.8297610167853, 26.0144623817044 55.8297689098302, 26.0145460628422 55.8298003355877, 26.0145670269021 55.8298081553442, 26.0146510574149 55.8298392873292, 26.0146721084038 55.8298470334884, 26.0147564849596 55.8298778704663, 26.014777622046 55.8298855427221, 26.0148623413517 55.829916083489, 26.0148835637009 55.8299236815384, 26.0149686223574 55.8299539248686, 26.0149899291311 55.8299614484113, 26.0150753238167 55.8299913931235, 26.0150967141734 55.8299988418624, 26.0151824414961 55.8300284867669, 26.015203914591 55.8300358604076, 26.0152899711744 55.8300652043366, 26.0153115261592 55.8300725025879, 26.0153979086131 55.830101544385, 26.0154195446366 55.8301087669586, 26.015506249516 55.8301375054653, 26.0155279657235 55.8301446520759, 26.0156149896309 55.8301730861661, 26.0156367851647 55.8301801565312, 26.0157241246752 55.8302082850855, 26.0157459986744 55.8302152789259, 26.0158336503022 55.8302431008214, 26.0158556019029 55.8302500178608, 26.0159435622019 55.8302775320036, 26.0159655905369 55.8302843719687, 26.0160538560458 55.8303115772759, 26.016075960245 55.8303183398964, 26.0161645274635 55.8303452352888, 26.0161867066538 55.8303519202977, 26.0162755720829 55.8303785047126, 26.0162978253882 55.8303851118457, 26.0163869855233 55.8304113842346, 26.0164093120646 55.8304179132308, 26.0164987633757 55.8304438725534, 26.016521162271 55.8304503231549, 26.0166109012246 55.8304759683857, 26.0166333715893 55.8304823403376, 26.0167233946733 55.8305076704726, 26.0167459356197 55.8305139635232, 26.016836239228 55.8305389775475, 26.0168588498656 55.8305451914482, 26.0169494304442 55.8305698883776, 26.0169721098799 55.8305760228828, 26.0170629638966 55.8306004017538, 26.0170857112345 55.8306064566212, 26.0171768350377 55.830630516454, 26.0171996493793 55.8306364914444, 26.0172910393993 55.8306602312964, 26.0173139198432 55.8306661261737, 26.0174055724743 55.8306895451081, 26.0174285181168 55.8306953596395, 26.0175204297186 55.8307184567261, 26.0175434396533 55.8307241906818, 26.0176356066088 55.8307469650116, 26.0176586799266 55.8307526181651, 26.0177510986066 55.8307750688411, 26.017774234396 55.8307806409691, 26.0178669011319 55.8308027671001, 26.017890098479 55.8308082579824, 26.0179830096021 55.8308300586924, 26.0180062675904 55.8308354681121, 26.018099419433 55.8308569425406, 26.0181227371438 55.8308622702839, 26.0182161260779 55.8308834175943, 26.0182395025901 55.8308886634509, 26.0183331248352 55.8309094827871, 26.0183565592251 55.8309146465496, 26.0184504111635 55.8309351371071, 26.0184739025055 55.8309402185715, 26.0185679803824 55.8309603795305, 26.0185915277483 55.8309653784961, 26.0186858278652 55.830985209064, 26.0187094303249 55.8309901253333, 26.0188039489494 55.8310096247251, 26.0188276055703 55.8310144581039, 26.0189223389904 55.8310336255538, 26.0189460488381 55.8310383758511, 26.0190409932622 55.831057210592, 26.0190647553998 55.8310618776201, 26.0191599071255 55.8310803789175, 26.0191837206143 55.8310849624921, 26.0192790758624 55.8311031296111, 26.0193029397616 55.8311076295511, 26.0193984947596 55.831125461773, 26.0194224081265 55.8311298779006, 26.0195181591176 55.8311473745244, 26.0195421210073 55.831151706665, 26.0196380641954 55.8311688669969, 26.0196620736613 55.8311731149796, 26.0197582052528 55.8311899383411, 26.0197822613464 55.8311941019979, 26.0198785775513 55.8312105877259, 26.0199026793221 55.8312146668923, 26.0199991763273 55.831230814334, 26.020023322823 55.831234808849, 26.020119996827 55.8312506173684, 26.0201441870937 55.831254527074, 26.0202410342699 55.8312699960453, 26.020265267352 55.8312738207871, 26.0203622838753 55.8312889495994, 26.0203865588152 55.8312926892264, 26.0204837408576 55.8313074772827, 26.0205080566963 55.831311131647, 26.0206054004066 55.8313255783614, 26.0206297561834 55.8313291473187, 26.0207272577204 55.8313432521212, 26.020751652473 55.8313467355305, 26.0208493079908 55.8313604978646, 26.0208737407554 55.8313638955883, 26.0209715463932 55.8313773149101, 26.0209960162045 55.831380626814, 26.0210939680795 55.8313937025908, 26.0211184739707 55.831396928544, 26.0212165682605 55.8314096602655, 26.0212411092634 55.8314128001405, 26.021339342032 55.8314251872959, 26.0213639171769 55.8314282409688, 26.0214622845942 55.8314402830752, 26.0214868929101 55.8314432504252, 26.0215853910569 55.8314549470028, 26.0216100315717 55.8314578279128, 26.0217086565578 55.8314691784998, 26.0217333282978 55.831471972856, 26.0218320762544 55.8314829770071, 26.0218567782449 55.831485684699, 26.021955645239 55.831496341976, 26.021980376504 55.8314989628967, 26.0220793586482 55.8315092728807, 26.0221041182105 55.8315118069266, 26.0222032115953 55.8315217692103, 26.0222279984767 55.8315242162813, 26.0223271991604 55.8315338304685, 26.0223520123814 55.831536190468, 26.0224513164808 55.8315454561825, 26.0224761550612 55.8315477290172, 26.0225755586346 55.8315566458911, 26.0226004215929 55.8315588314712, 26.0226999207084 55.831567399152, 26.0227248070622 55.8315694973912, 26.022824397778 55.8315777155396, 26.0228493065441 55.831579726355, 26.0229489849699 55.83158759465, 26.0229739151641 55.8315895179621, 26.0230736773223 55.8315970360896, 26.0230986279596 55.8315988718226, 26.0231984699025 55.8316060394853, 26.023223439997 55.8316077875666, 26.0233233578221 55.8316146044844, 26.0233483463872 55.8316162648448, 26.0234483361053 55.8316227307455, 26.0234733421537 55.8316243033196, 26.0235733998287 55.8316304179489, 26.0235984223724 55.8316319026745, 26.023698544056 55.8316376657911, 26.0237235821063 55.8316390626095, 26.0238237638392 55.8316444739855, 26.0238488164067 55.8316457828417, 26.0239490542186 55.8316508422627, 26.0239741203135 55.8316520631049, 26.0240744102694 55.8316567703724, 26.0240994889013 55.8316579031523, 26.0241998270205 55.8316622580796, 26.0242249171986 55.8316633027525, 26.0243252995027 55.8316673051669, 26.0243504002355 55.8316682616916, 26.0244508228103 55.8316719114371, 26.024475933106 55.8316727797758, 26.0245763919035 55.8316760767053, 26.02460151077 55.8316768568237, 26.0247020019002 55.8316798008098, 26.0247271283451 55.831680492677, 26.0248276477968 55.831683083602, 26.0248527808272 55.8316836871908, 26.0249533246153 55.8316859249522, 26.0249784632381 55.8316864402387, 26.0250790274384 55.8316883247492, 26.0251041706603 55.8316887517132, 26.0252047512445 55.8316902828973, 26.0252298980723 55.8316906215218, 26.0253304911117 55.8316917993198, 26.0253556405515 55.8316920495915, 26.0254562420438 55.8316928739566, 26.0254813931021 55.8316930358655, 26.0255819990772 55.8316935067654, 26.02560715076 55.8316935803052, 26.0257077572558 55.8316936977212, 26.0257329085695 55.8316936828891, 26.0258335115981 55.8316934468166, 26.0258586615489 55.8316933436131, 26.0259592571329 55.8316927540616, 26.0259844047271 55.8316925624908, 26.0260849888916 55.8316916194838, 26.0261101331355 55.8316913395533, 26.0262107019252 55.8316900431277, 26.0262358418253 55.8316896748486, 26.0263363912499 55.831688025056, 26.0263615258129 55.8316875684428, 26.0264620518964 55.8316855653485, 26.0264871801292 55.8316850204194, 26.0265876789213 55.8316826641021, 26.026612799831 55.8316820308785, 26.0267132673118 55.8316793214327, 26.0267383799058 55.8316785999397, 26.026838812188 55.8316755374701, 26.0268639154741 55.8316747277363, 26.0269643085016 55.8316713123667, 26.026989401488 55.8316704144239, 26.0270897513436 55.8316666462878, 26.0271148330387 55.8316656601717, 26.0272151357603 55.8316615394177, 26.0272402051732 55.8316604651671, 26.0273404567724 55.8316559919592, 26.0273655129125 55.8316548296168, 26.0274657094308 55.8316500041317, 26.0274907513081 55.8316487537433, 26.0275908888264 55.8316435761698, 26.0276159154515 55.8316422377848, 26.0277159899548 55.8316367083306, 26.0277410003388 55.8316352820019, 26.0278410079024 55.831629400884, 26.0278660010571 55.831627886668, 26.0279659377442 55.8316216541179, 26.0279909126822 55.8316200520744, 26.0280907745188 55.8316134683399, 26.0281157302533 55.8316117785323, 26.0282155132993 55.8316048438734, 26.0282404488442 55.8316030663684, 26.0283401491679 55.8315957810583, 26.0283650635379 55.8315939159263, 26.0284646772058 55.8315862802524, 26.0284895694166 55.8315843275669, 26.0285890924394 55.8315763418353, 26.0286139615075 55.8315743016736, 26.028713390036 55.8315659661932, 26.0287382349789 55.8315638386359, 26.0288375650356 55.83155515374, 26.0288623848715 55.8315529388711, 26.0289616125229 55.8315439049038, 26.0289864062712 55.831541602811, 26.029085527618 55.8315322201275, 26.0291102942991 55.8315298309016, 26.0292093054141 55.8315200998736, 26.0292340440496 55.8315176236092, 26.0293329410346 55.8315075446199, 26.0293576506469 55.8315049814147, 26.0294564295959 55.8314945548623, 26.0294811092089 55.8314919048176, 26.0295797661978 55.8314811311162, 26.0296044148362 55.8314783943368, 26.0297029459668 55.8314672739125, 26.0297275626568 55.8314644505065, 26.0298259640787 55.8314529837937, 26.0298505478478 55.8314500738726, 26.0299488156161 55.8314382613311, 26.029973365493 55.8314352650101, 26.0300714957561 55.8314231071031, 26.0300960107708 55.8314200245004, 26.0301939996594 55.8314075217073, 26.0302184788433 55.8314043529447, 26.0303163224619 55.8313915057626, 26.0303407648479 55.8313882509655, 26.0304384593381 55.8313750599012, 26.0304628639606 55.8313717191981, 26.0305604054944 55.8313581847684, 26.0305847713891 55.8313547582913, 26.0306821560548 55.8313408810391, 26.030706482259 55.8313373689235, 26.030803706252 55.8313231493911, 26.0308279918047 55.8313195517757, 26.0309250512831 55.8313049905251, 26.0309492952248 55.831301307552, 26.0310461863338 55.8312864051616, 26.0310703877067 55.8312826369764, 26.0311671066198 55.8312673940348, 26.0311912644677 55.8312635407863, 26.0312878073736 55.8312479578944, 26.0313119207421 55.831244019735, 26.0314082838222 55.8312280975092, 26.0314323517587 55.8312240745945, 26.0315285312229 55.8312078136611, 26.0315525527765 55.83120370615, 26.0316485448148 55.8311871071531, 26.0316725190365 55.8311829152079, 26.0317683198149 55.8311659788109, 26.0317922457575 55.8311617025972, 26.0318878515622 55.8311444294567, 26.0319117282807 55.8311400691436, 26.0320071352943 55.8311224599492, 26.0320309618452 55.8311180157089, 26.0321261662951 55.8311000711572, 26.032149941737 55.8310955431654, 26.0322449398776 55.8310772639625, 26.0322686632715 55.831072652398, 26.0323634513502 55.831054039266, 26.0323871217587 55.8310493443111, 26.0324816960139 55.8310303979889, 26.032505312502 55.831025619829, 26.0325996692041 55.831006341064, 26.0326232308388 55.831001479888, 26.0327173662909 55.8309818694355, 26.0327408721415 55.8309769254354, 26.0328347825711 55.8309569840815, 26.0328582317089 55.8309519574527, 26.0329519134451 55.830931685977, 26.0329753049437 55.8309265769182, 26.0330687542814 55.8309059761226, 26.0330920872168 55.8309007848355, 26.0331853004447 55.8308798555383, 26.0332085738952 55.8308745822281, 26.0333015473395 55.8308533252545, 26.0333247603856 55.8308479701295, 26.0334174904035 55.8308263863125, 26.0334406421283 55.8308209495843, 26.0335331249961 55.8307990397907, 26.0335562144851 55.8307935216741, 26.0336484466088 55.8307712867556, 26.0336714729498 55.8307656874688, 26.0337634506503 55.8307431283124, 26.0337864129337 55.8307374480765, 26.033878132591 55.8307145655705, 26.0339010299098 55.8307088046099, 26.0339924878993 55.8306855996585, 26.0340153193489 55.8306797582009, 26.0341065120535 55.8306562317223, 26.0341292767322 55.8306503099984, 26.0342202005528 55.8306264629213, 26.0342428975612 55.8306204611651, 26.0343335489093 55.8305962944308, 26.0343561773508 55.8305902128795, 26.0344465526453 55.830565727443, 26.0344691116262 55.8305595663368, 26.0345592072917 55.8305347631669, 26.034581695921 55.8305285227493, 26.0346715083946 55.8305034028271, 26.0346939257838 55.8304970833447, 26.0347834515465 55.8304716476548, 26.0348057968102 55.8304652493571, 26.0348950322744 55.830439498919, 26.0349173045299 55.830433022059, 26.0350062462257 55.8304069578742, 26.0350284445934 55.8304004027077, 26.0351170889593 55.8303740258203, 26.0351392125622 55.8303673926064, 26.0352275561443 55.8303407040443, 26.0352496041087 55.8303339930449, 26.0353376433831 55.8303069938731, 26.0353596148381 55.8303002053533, 26.0354473463261 55.8302728966388, 26.035469240404 55.8302660308671, 26.0355566606726 55.8302384136788, 26.0355784765085 55.8302314709262, 26.0356655820729 55.8302035463654, 26.0356873188051 55.8301965269063, 26.0357741062343 55.8301682960733, 26.0357957630043 55.830161200185, 26.0358822288824 55.8301326641912, 26.0359038048349 55.830125492154, 26.0359899457292 55.8300966521326, 26.036011440012 55.83008940423, 26.0360972525297 55.8300602613173, 26.0361186642939 55.8300529378355, 26.0362041450482 55.830023493182, 26.0362254734481 55.8300160944105, 26.0363106190497 55.8299863491842, 26.036331863243 55.8299788754151, 26.0364166703387 55.8299488307878, 26.0364378294863 55.8299412823165, 26.0365222947445 55.8299109394688, 26.0365433680108 55.8299033165936, 26.0366274880555 55.8298726767386, 26.0366484746082 55.8298649797605, 26.0367322461446 55.829834044099, 26.036753145155 55.8298262733222, 26.0368365648861 55.8297950430719, 26.0368573755286 55.8297871988033, 26.0369404401192 55.8297556752134, 26.0369611615721 55.829747757763, 26.0370438677731 55.8297159420671, 26.0370644992181 55.8297079517476, 26.0371468437603 55.8296758452037, 26.0371673843825 55.8296677823309, 26.0372493640162 55.8296353862065, 26.0372698130045 55.8296272510987, 26.0373514244656 55.8295945666844, 26.0373717810125 55.8295863596632, 26.037453021126 55.8295533882308, 26.0374732844275 55.8295451096203, 26.0375541499364 55.8295118524923, 26.0375743191924 55.8295035026197, 26.0376548069225 55.8294699611021, 26.0376748813365 55.8294615402972, 26.0377549881279 55.8294277157074, 26.0377749669071 55.8294192243029, 26.0378546895619 55.8293851179917, 26.0378745719175 55.829376556323, 26.0379539073101 55.8293421696284, 26.037973692457 55.8293335380337, 26.0380526374651 55.8292988723093, 26.0380723246219 55.8292901711297, 26.0381508760927 55.8292552277607, 26.0381704644821 55.8292464573399, 26.0382486193577 55.8292112376872, 26.0382681082062 55.8292023983717, 26.0383458633526 55.8291669038482, 26.0383652518907 55.8291579959872, 26.0384426042787 55.8291222279765, 26.0384618917408 55.8291132519218, 26.0385388382916 55.8290772118482, 26.0385580239162 55.8290681679545, 26.0386345616029 55.8290318572365, 26.0386536446325 55.829022745861, 26.0387297704247 55.8289861659369, 26.0387487501056 55.8289769874396, 26.038824461008 55.8289401397496, 26.038843336591 55.828930894493, 26.0389186296154 55.8288937804921, 26.0389374003552 55.8288844688415, 26.0390122725089 55.8288470900056, 26.0390309376644 55.8288377123288, 26.039105386016 55.8288000701222, 26.0391239448502 55.8287906267898, 26.0391979664413 55.8287527227091, 26.0392164182216 55.828743214094, 26.0392900101451 55.8287050496288, 26.039308354143 55.8286954761066, 26.0393815134769 55.828657052773, 26.0393997489681 55.8286474147219, 26.0394724728372 55.828608734031, 26.0394905991017 55.8285990318318, 26.0395628846396 55.828560095309, 26.0395809009619 55.8285503293449, 26.0396527452907 55.8285111385413, 26.0396706509596 55.8285013091981, 26.0397420512781 55.8284618656426, 26.0397598455866 55.8284519733086, 26.0398307990331 55.8284122785832, 26.0398484812788 55.8284023236492, 26.0399189850908 55.8283623793004, 26.0428765282775 55.8266824753695, 26.0428940963482 55.8266724578435, 26.0429641420664 55.8266322639254, 26.0429815966831 55.826622184591, 26.0430511872047 55.8265817442345, 26.0430685276785 55.8265716034897, 26.0431376602679 55.8265309182855, 26.0431548859142 55.826520716531, 26.0432235578179 55.8264797881006, 26.0432406679568 55.8264695257394, 26.0433088764823 55.8264283556889, 26.0433258704383 55.8264180331263, 26.0433936128942 55.8263766230811, 26.0434104899966 55.8263662407249, 26.0434777636928 55.8263245923308, 26.0434945232753 55.8263141505911, 26.0435613255736 55.8262722654827, 26.0435779669748 55.8262617647719, 26.0436442952381 55.8262196446034, 26.0436608178011 55.8262090853364, 26.043726669384 55.8261667317895, 26.0437430724567 55.8261561143833, 26.0438084448025 55.8261135291035, 26.0438247277374 55.8261028539775, 26.0438896182335 55.826060038668, 26.043905780388 55.8260493062439, 26.0439701864987 55.8260062625789, 26.0439862272349 55.8259954732806, 26.0440501463794 55.8259522029866, 26.0440660650643 55.8259413572403, 26.0441294947605 55.825897861999, 26.0441452907657 55.8258869602331, 26.044208228488 55.8258432417776, 26.0442239011903 55.8258322844227, 26.0442863444735 55.8257883444669, 26.0443018932542 55.8257773319558, 26.0443638396051 55.8257331722557, 26.0443792638506 55.8257221050234, 26.044440710847 55.8256777273075, 26.0444560099486 55.825666605791, 26.0445169551621 55.8256220118144, 26.0445321285161 55.8256108364532, 26.0445925695421 55.8255660279771, 26.0446076165497 55.8255547992125, 26.0446675509893 55.8255097780168, 26.0446824710568 55.8254984962923, 26.0447418965632 55.8254532641418, 26.0447566891018 55.8254419299031, 26.0448156033289 55.825396488585, 26.0448302677549 55.8253851022797, 26.0448886683505 55.8253394536103, 26.0449032040853 55.8253280156882, 26.0449610887914 55.8252821614343, 26.0449754952614 55.825270672347, 26.0450328617574 55.8252246143484, 26.0450471383942 55.8252130745499, 26.0451039844262 55.8251668146184, 26.0451181306665 55.8251552245643, 26.045174453997 55.8251087645226, 26.0451884692826 55.8250971246708, 26.0452442676862 55.8250504663564, 26.0452581514642 55.8250387771665, 26.0453134227277 55.8249919224324, 26.0453271744505 55.8249801843663, 26.0453819164263 55.8249331350348, 26.0453955355511 55.8249213485559, 26.0454497460469 55.8248741065133, 26.0454632320365 55.8248622720872, 26.0455169089268 55.824814839188, 26.0455302612492 55.8248029572822, 26.0455834024046 55.8247553354105, 26.0455966205331 55.8247434064941, 26.0456492238841 55.8246955975064, 26.0456623072973 55.8246836220507, 26.0457143707397 55.8246356278618, 26.0457273189213 55.8246236063397, 26.0457788404174 55.8245754288304, 26.0457916528569 55.8245633617167, 26.0458426303778 55.8245150027864, 26.0458553065696 55.8245028905577, 26.0459057380876 55.8244543521326, 26.0459182775317 55.8244421952672, 26.045968161066 55.8243934792564, 26.0459805632679 55.8243812782345, 26.0460298968559 55.824332386557, 26.0460421613265 55.8243201418605, 26.0460909430251 55.8242710764444, 26.0461030692806 55.8242587885569, 26.0461512971473 55.8242095513589, 26.0461632847095 55.8241972207656, 26.0462109568617 55.8241478137104, 26.0462228052578 55.8241354408983, 26.0462699198125 55.8240858659401, 26.0462816285752 55.8240734513979, 26.0463281836617 55.8240237105079, 26.0463397523293 55.8240112547259, 26.0463857461226 55.8239613498569, 26.0463971742389 55.823948853327, 26.0464426049268 55.8238987864483, 26.0464538920411 55.823886249664, 26.046498757826 55.8238360227596, 26.0465099034932 55.823823446216, 26.0465542026078 55.8237730612675, 26.0465652063885 55.8237604454614, 26.0466089370865 55.8237099044581, 26.0466197985468 55.8236972498875, 26.0466629591 55.8236465548301, 26.0466736778117 55.823633861995, 26.0467162665255 55.8235830148773, 26.0467268420659 55.8235702842788, 26.0467688572614 55.8235192871084, 26.0467792892136 55.8235065192493, 26.0468207292305 55.8234553740448, 26.0468310171833 55.8234425694294, 26.0468718803816 55.8233912782184, 26.0468820239294 55.8233784373522, 26.0469223087133 55.8233270021417, 26.0469323074562 55.8233141255319, 26.0469720122206 55.8232625483746, 26.0469818657645 55.8232496365298, 26.0470209889616 55.8231979194404, 26.0470306969181 55.8231849728703, 26.0470692369907 55.8231331179107, 26.0470787989772 55.8231201371268, 26.0471167544187 55.8230681463283, 26.0471261700582 55.823055131843, 26.0471635393676 55.8230030072654, 26.0471728082891 55.8229899595928, 26.0472095899843 55.8229377033079, 26.0472187118225 55.8229246229631, 26.0472549044704 55.822872237011, 26.0472638788658 55.8228591245107, 26.0472994810273 55.8228066109788, 26.0473083076263 55.8227934668408, 26.0473433179117 55.8227408277829, 26.0473519963664 55.8227276525261, 26.0473864133758 55.8226748900521, 26.0473949433444 55.8226616841969, 26.0474287657452 55.822608800354, 26.0474371468914 55.8225955644218, 26.0474703733331 55.8225425613265, 26.0474786053269 55.82252929584, 26.0475112345111 55.8224761755682, 26.0475193170281 55.8224628810513, 26.0475513476588 55.822409645718, 26.0475592803807 55.8223963226957, 26.0475907112157 55.8223429743704, 26.0475984938298 55.8223296233686, 26.0476293236052 55.822276164202, 26.0476369558051 55.822262785748, 26.0476671833217 55.8222092178251, 26.0476746648069 55.8221958124473, 26.0477042888815 55.8221421378696, 26.0477116193572 55.8221287060973, 26.0477406388009 55.8220749270252, 26.0477478179785 55.8220614693888, 26.0477762316685 55.8220075879088, 26.0477832592653 55.8219941049396, 26.0478110660766 55.8219401231908, 26.0478179418158 55.8219266154212, 26.0478451406462 55.8218725355499, 26.0478518642572 55.8218590035133, 26.0478784540467 55.8218048276333, 26.0478850252647 55.8217912718641, 26.0479110049649 55.8217370021173, 26.0479174235313 55.8217234231508, 26.04794279211 55.8216690617003, 26.0479490577721 55.8216554600726, 26.0479738142429 55.8216010090396, 26.0479799267541 55.8215873852877, 26.0480040701306 55.8215328468483, 26.0480100292504 55.8215192015102, 26.0480335585987 55.8214645777815, 26.0480393640925 55.821450911396, 26.0480622784688 55.8213962045761, 26.0480679301083 55.8213825176828, 26.0480902286222 55.8213277299056, 26.0480957261851 55.821314023045, 26.0481174079598 55.8212591564723, 26.0481227512296 55.8212454301855, 26.048143815404 55.8211904870052, 26.0481490041707 55.8211767418343, 26.0481694499258 55.8211217241908, 26.0481744839853 55.8211079606785, 26.0481943105089 55.821052870766, 26.0481991896633 55.8210390894556, 26.0482183961829 55.82098392943, 26.0482231202403 55.8209701308658, 26.0482417059925 55.8209149029292, 26.0482462747673 55.8209010876559, 26.0482642390337 55.8208457939521, 26.0482686523463 55.8208319625152, 26.0482859944105 55.8207766052592, 26.0482902520874 55.8207627582049, 26.0483069712703 55.8207073395757, 26.0483110731442 55.8206934774507, 26.0483271687905 55.8206379996318, 26.0483311147004 55.8206241229833, 26.0483465861797 55.8205685881574, 26.0483503759706 55.8205546975334, 26.0483652226684 55.8204991079195, 26.0483688561915 55.8204852038684, 26.0483830775357 55.8204295616204, 26.0483865546483 55.8204156446911, 26.0484001500697 55.820359952049, 26.0484034706354 55.8203460227911, 26.0484164396075 55.8202902819265, 26.048419603496 55.8202763408899, 26.0484319455079 55.8202205540121, 26.0484349525951 55.8202066017471, 26.0484466671635 55.8201507710557, 26.0484495173316 55.8201368081133, 26.0484606039965 55.8200809358171, 26.0484632971338 55.8200669627485, 26.0484737554623 55.820011051045, 26.0484762914633 55.8199970684019, 26.0484861210431 55.8199411195142, 26.0484884998085 55.8199271278486, 26.0484977002583 55.8198711439658, 26.048499921695 55.8198571438301, 26.048508492653 55.8198011271741, 26.0485105566742 55.8197871191211, 26.0485184978047 55.8197310719085, 26.0485204043297 55.8197170564913, 26.0485277153247 55.8196609809191, 26.0485294642791 55.8196469586908, 26.0485361448515 55.8195908569873, 26.0485377361671 55.8195768285016, 26.0485437860572 55.8195207028766, 26.048545219672 55.8195066686874, 26.0485506386442 55.8194505213582, 26.0485519145025 55.8194364820196, 26.0485567023475 55.8193803151879, 26.0485578203996 55.819366271254, 26.0485619769294 55.8193100871666, 26.0485629371322 55.8192960391918, 26.048566462188 55.8192398400414, 26.0485672645044 55.8192257885805, 26.0485701579499 55.8191695765891, 26.0485708023491 55.8191555221968, 26.0485730640724 55.8190992996135, 26.0485735505298 55.8190852428445, 26.0485751804471 55.8190290118278, 26.0485755089442 55.8190149532371, 26.0485765069926 55.8189587160764, 26.0485766775174 55.818944656219, 26.048577043662 55.8188884150832, 26.0485770562087 55.8188743545141, 26.0485767904379 55.8188181116472, 26.0485766450067 55.8188040509216, 26.0485757473347 55.8187478085382, 26.0485754439322 55.818733748211, 26.0485739143979 55.8186775085382, 26.048573453037 55.8186634491647, 26.0485712917038 55.8186072144099, 26.0485706724036 55.8185931565449, 26.0485678793598 55.8185369289234, 26.0485671021454 55.818522873122, 26.048563677506 55.8184666548807, 26.0485627424092 55.8184526016977, 26.048558686312 55.818396395038, 26.0485575933703 55.8183823450281, 26.0485529059786 55.8183261521664, 26.0485516552361 55.8183121058844, 26.0485463367389 55.8182559290474, 26.0485449282459 55.8182418870476, 26.0485389788542 55.8181857284309, 26.048537412667 55.8181716912677, 26.0485308326246 55.8181155531373, 26.048529108806 55.8181015213648, 26.0485218983681 55.8180454058702, 26.0485200169868 55.8180313800423, 26.048512176449 55.8179752894589, 26.0485101375803 55.8179612701294, 26.0485016672505 55.8179052066347, 26.0484994709756 55.8178911943569, 26.0484903711949 55.8178351601857, 26.0484880176014 55.8178211555126, 26.0484782887294 55.8177651528589, 26.0455051090879 55.8010299374867, 26.0455026013384 55.8010159408912, 26.0454922561682 55.8009599716321, 26.0454895913595 55.800945983742, 26.0454786181662 55.8008900504333, 26.0454757964044 55.8008760718007, 26.0454641956164 55.800820176608, 26.0454612170136 55.8008062077847, 26.045448989096 55.8007503529341, 26.0454458537706 55.8007363944715, 26.0454329992098 55.8006805821694, 26.0454297072865 55.8006666346184, 26.0454162265946 55.8006108670732, 26.0454127782042 55.8005969309845, 26.0453986719102 55.800541210371, 26.0453950671895 55.8005272862945, 26.0453803358595 55.8004716148368, 26.0453765749518 55.8004577033222, 26.0453612191704 55.8004020832164, 26.0453573022248 55.8003881848129, 26.0453413225972 55.800332618239, 26.0453372497692 55.8003187334951, 26.0453206469362 55.8002632226696, 26.0453164183874 55.8002493521335, 26.045299192999 55.8001938992195, 26.0452948088972 55.8001800434385, 26.0452769616398 55.8001246506357, 26.0452724221588 55.8001108101568, 26.0452539537497 55.8000554796801, 26.0452492590694 55.8000416550496, 26.0452301702246 55.7999863890344, 26.0452253205312 55.799972580798, 26.0452056120184 55.7999173814584, 26.0452006075041 55.7999035901611, 26.045180280104 55.7998484596737, 26.0451751209672 55.7998346858598, 26.0451541754774 55.7997796263794, 26.0451488619225 55.7997658705926, 26.045127299182 55.7997108843165, 26.0451218314195 55.7996971470997, 26.0450996522802 55.7996422361915, 26.0450940305268 55.799628518087, 26.0445572205629 55.7983371526785, 26.0445514454707 55.7983234541992, 26.0445280379186 55.7982687004045, 26.0445221092915 55.7982550221189, 26.0444980880648 55.7982003501762, 26.0444920061375 55.7981866926241, 26.0444673721842 55.7981321046846, 26.0444611371975 55.7981184684051, 26.0444358915041 55.7980639666474, 26.0444295037049 55.7980503521788, 26.044403647261 55.7979959387321, 26.0443971069023 55.7979823466117, 26.0321966236999 55.7726229272871, 26.0310053783176 55.7709392225215, 26.0293723603804 55.7695188165462, 26.0272940974918 55.7682938614894, 26.0248443131549 55.7673077899581, 26.0221098833164 55.7665955621821, 26.0191877581307 55.7661824284788, 26.0161815295934 55.7660830355812, 26.0131977658508 55.7663009082429, 25.9745240097854 55.7712305552325))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[25.9745240097854, 55.7712305552325], [25.9716493943847, 55.77176159735], [25.9690076961422, 55.7725872575835], [25.9666938296937, 55.7736778771573], [25.9647909524338, 55.7749942760742], [25.9633674770475, 55.7764891584729], [25.962474610093, 55.7781088097868], [25.9621445054515, 55.7797950251007], [25.9624223336419, 55.7815886722624], [25.9633352985948, 55.7833165158846], [25.9648465699639, 55.7849087018943], [25.9806047311205, 55.8013618328201], [25.9806166665655, 55.8013742362772], [25.9806646861181, 55.8014237666139], [25.9806767603313, 55.8014361282032], [25.9807253340021, 55.8014854900861], [25.9807375465073, 55.8014978093194], [25.9807866724016, 55.8015470008204], [25.9807990227173, 55.8015592772111], [25.9808486988654, 55.8016082963552], [25.9808611865042, 55.8016205294185], [25.9809114109676, 55.8016693742907], [25.9809240354371, 55.8016815635434], [25.9809748062301, 55.8017302322099], [25.9809875670323, 55.8017423771707], [25.9810388821589, 55.8017908677157], [25.9810517787904, 55.8018029679048], [25.9811036362071, 55.8018512783951], [25.981116668159, 55.8018633333345], [25.9811690658448, 55.8019114618849], [25.9811822326032, 55.8019234710986], [25.9812351684579, 55.8019714157781], [25.9812484695032, 55.8019833787918], [25.9813019414844, 55.8020311377482], [26.0086983237006, 55.8264432984855], [26.0087117764653, 55.8264552116531], [26.0087658543422, 55.8265027702065], [26.0087794403859, 55.8265146362011], [26.0088340503228, 55.826562005136], [26.0088477691095, 55.8265738234889], [26.0089029089278, 55.8266210009134], [26.0089167599162, 55.826632771158], [26.008972427452, 55.826679755219], [26.0089864100956, 55.8266914768901], [26.0090426031601, 55.826738265738], [26.0090567169072, 55.8267499383728], [26.0091134332617, 55.8267965301417], [26.0091276775554, 55.8268081532792], [26.0091849149858, 55.8268545461486], [26.0091992892641, 55.8268661193297], [26.009257045494, 55.8269123114524], [26.0092715491896, 55.8269238342199], [26.0093298219497, 55.8269698237794], [26.0093444544905, 55.8269812956782], [26.0094032414898, 55.8270270808646], [26.0094180022982, 55.8270385014416], [26.0094773011784, 55.8270840804165], [26.0094921896719, 55.8270954492206], [26.00955199815, 55.8271408202276], [26.0095670137412, 55.8271521368097], [26.0096273294042, 55.8271972980166], [26.0096424715003, 55.8272085619298], [26.0097032920097, 55.8272535115841], [26.0097185600134, 55.8272647223834], [26.0097798829243, 55.8273094586768], [26.0097952762328, 55.8273206159194], [26.0098570991781, 55.8273651371234], [26.0098726171841, 55.8273762403687], [26.0099349376864, 55.8274205446976], [26.0099505797773, 55.827431593507], [26.0100133953807, 55.8274756792136], [26.0100291609392, 55.8274866731506], [26.0100924691744, 55.8275305385006], [26.0101083575783, 55.827541477131], [26.0101721559552, 55.8275851203975], [26.0101881665774, 55.8275960032892], [26.0102524525499, 55.827639422729], [26.0102685847585, 55.8276502494522], [26.0103333558147, 55.8276934433677], [26.0103496089729, 55.8277042134946], [26.0104148625362, 55.8277471801663], [26.0104312360024, 55.8277578932716], [26.0104969695151, 55.827800631014], [26.0105134626431, 55.8278112866745], [26.0105796735128, 55.8278537938008], [26.0105962856516, 55.8278643915956], [26.0106629712404, 55.8279066664111], [26.0106797017343, 55.8279172059215], [26.0107468594292, 55.8279592467688], [26.0107637076176, 55.8279697275786], [26.0108313347641, 55.8280115327947], [26.0108482999821, 55.8280219544898], [26.0109163939164, 55.8280635224268], [26.0109334754942, 55.8280738845956], [26.0110020335156, 55.8281152136038], [26.011019230779, 55.8281255158369], [26.0110882501737, 55.8281666042796], [26.0111055624438, 55.8281768461702], [26.0111750405307, 55.82821769245], [26.011192467124, 55.8282278735934], [26.0112624010984, 55.8282684760604], [26.011279941327, 55.8282785960545], [26.0113503284701, 55.8283189531295], [26.0113679816414, 55.8283290115745], [26.0114388191852, 55.8283691216693], [26.0114565846024, 55.8283791181678], [26.0115278696941, 55.8284189796662], [26.0115457466559, 55.8284289138234], [26.0116174765462, 55.8284685251872], [26.0116354643467, 55.8284783966108], [26.0117076361682, 55.8285177562554], [26.0117257340972, 55.8285275645552], [26.0117983449874, 55.8285666709189], [26.0118165523305, 55.8285764157077], [26.0118895994557, 55.8286152672636], [26.011907915494, 55.8286249481563], [26.0119813959597, 55.8286635433639], [26.01199981997, 55.8286731599782], [26.0120737308546, 55.8287114973023], [26.0120922621094, 55.8287210492582], [26.012166600532, 55.8287591272037], [26.0121852382998, 55.8287686141239], [26.0122600012891, 55.828806431168], [26.012278744834, 55.8288158526778], [26.0123539294616, 55.8288534073386], [26.0123727780433, 55.8288627630657], [26.0124483813245, 55.8289000538517], [26.0124673341989, 55.8289093434267], [26.0125433531615, 55.8289463688712], [26.0125624095804, 55.8289555919269], [26.0126388412246, 55.8289923505682], [26.0126580004354, 55.8290015067404], [26.0127348417123, 55.8290379971115], [26.0127541029583, 55.8290470860385], [26.0128313508842, 55.8290833067219], [26.0128507134051, 55.8290923280446], [26.0129283648896, 55.8291282775906], [26.0129478279207, 55.8291372309527], [26.013025879919, 55.829172907951], [26.0130454426917, 55.8291817929988], [26.0131238921003, 55.8292171960304], [26.0131435538422, 55.8292260124129], [26.013222397585, 55.8292611400891], [26.0132421575196, 55.8292698874579], [26.0133213924806, 55.8293047383898], [26.0133412498276, 55.8293134163994], [26.01342087286, 55.8293479892024], [26.0134408268353, 55.8293565975101], [26.0135208348133, 55.8293908908265], [26.0135408846289, 55.8293994290921], [26.0136212743851, 55.8294334415638], [26.0136414192492, 55.8294419094501], [26.0137221876131, 55.8294756397351], [26.0137424267302, 55.8294840369075], [26.0138235705049, 55.8295174836704], [26.0138439030756, 55.8295258097972], [26.0139254190597, 55.829558971718], [26.0139458442811, 55.8295672264702], [26.0140277292666, 55.8296001022433], [26.0140482463321, 55.829608285295], [26.0141304970666, 55.8296408736142], [26.0141511051658, 55.8296489846419], [26.0142337183975, 55.8296812842186], [26.0142544167166, 55.829689322902], [26.0143373892102, 55.8297213324709], [26.0143581769318, 55.8297292984924], [26.0144415054014, 55.8297610167853], [26.0144623817044, 55.8297689098302], [26.0145460628422, 55.8298003355877], [26.0145670269021, 55.8298081553442], [26.0146510574149, 55.8298392873292], [26.0146721084038, 55.8298470334884], [26.0147564849596, 55.8298778704663], [26.014777622046, 55.8298855427221], [26.0148623413517, 55.829916083489], [26.0148835637009, 55.8299236815384], [26.0149686223574, 55.8299539248686], [26.0149899291311, 55.8299614484113], [26.0150753238167, 55.8299913931235], [26.0150967141734, 55.8299988418624], [26.0151824414961, 55.8300284867669], [26.015203914591, 55.8300358604076], [26.0152899711744, 55.8300652043366], [26.0153115261592, 55.8300725025879], [26.0153979086131, 55.830101544385], [26.0154195446366, 55.8301087669586], [26.015506249516, 55.8301375054653], [26.0155279657235, 55.8301446520759], [26.0156149896309, 55.8301730861661], [26.0156367851647, 55.8301801565312], [26.0157241246752, 55.8302082850855], [26.0157459986744, 55.8302152789259], [26.0158336503022, 55.8302431008214], [26.0158556019029, 55.8302500178608], [26.0159435622019, 55.8302775320036], [26.0159655905369, 55.8302843719687], [26.0160538560458, 55.8303115772759], [26.016075960245, 55.8303183398964], [26.0161645274635, 55.8303452352888], [26.0161867066538, 55.8303519202977], [26.0162755720829, 55.8303785047126], [26.0162978253882, 55.8303851118457], [26.0163869855233, 55.8304113842346], [26.0164093120646, 55.8304179132308], [26.0164987633757, 55.8304438725534], [26.016521162271, 55.8304503231549], [26.0166109012246, 55.8304759683857], [26.0166333715893, 55.8304823403376], [26.0167233946733, 55.8305076704726], [26.0167459356197, 55.8305139635232], [26.016836239228, 55.8305389775475], [26.0168588498656, 55.8305451914482], [26.0169494304442, 55.8305698883776], [26.0169721098799, 55.8305760228828], [26.0170629638966, 55.8306004017538], [26.0170857112345, 55.8306064566212], [26.0171768350377, 55.830630516454], [26.0171996493793, 55.8306364914444], [26.0172910393993, 55.8306602312964], [26.0173139198432, 55.8306661261737], [26.0174055724743, 55.8306895451081], [26.0174285181168, 55.8306953596395], [26.0175204297186, 55.8307184567261], [26.0175434396533, 55.8307241906818], [26.0176356066088, 55.8307469650116], [26.0176586799266, 55.8307526181651], [26.0177510986066, 55.8307750688411], [26.017774234396, 55.8307806409691], [26.0178669011319, 55.8308027671001], [26.017890098479, 55.8308082579824], [26.0179830096021, 55.8308300586924], [26.0180062675904, 55.8308354681121], [26.018099419433, 55.8308569425406], [26.0181227371438, 55.8308622702839], [26.0182161260779, 55.8308834175943], [26.0182395025901, 55.8308886634509], [26.0183331248352, 55.8309094827871], [26.0183565592251, 55.8309146465496], [26.0184504111635, 55.8309351371071], [26.0184739025055, 55.8309402185715], [26.0185679803824, 55.8309603795305], [26.0185915277483, 55.8309653784961], [26.0186858278652, 55.830985209064], [26.0187094303249, 55.8309901253333], [26.0188039489494, 55.8310096247251], [26.0188276055703, 55.8310144581039], [26.0189223389904, 55.8310336255538], [26.0189460488381, 55.8310383758511], [26.0190409932622, 55.831057210592], [26.0190647553998, 55.8310618776201], [26.0191599071255, 55.8310803789175], [26.0191837206143, 55.8310849624921], [26.0192790758624, 55.8311031296111], [26.0193029397616, 55.8311076295511], [26.0193984947596, 55.831125461773], [26.0194224081265, 55.8311298779006], [26.0195181591176, 55.8311473745244], [26.0195421210073, 55.831151706665], [26.0196380641954, 55.8311688669969], [26.0196620736613, 55.8311731149796], [26.0197582052528, 55.8311899383411], [26.0197822613464, 55.8311941019979], [26.0198785775513, 55.8312105877259], [26.0199026793221, 55.8312146668923], [26.0199991763273, 55.831230814334], [26.020023322823, 55.831234808849], [26.020119996827, 55.8312506173684], [26.0201441870937, 55.831254527074], [26.0202410342699, 55.8312699960453], [26.020265267352, 55.8312738207871], [26.0203622838753, 55.8312889495994], [26.0203865588152, 55.8312926892264], [26.0204837408576, 55.8313074772827], [26.0205080566963, 55.831311131647], [26.0206054004066, 55.8313255783614], [26.0206297561834, 55.8313291473187], [26.0207272577204, 55.8313432521212], [26.020751652473, 55.8313467355305], [26.0208493079908, 55.8313604978646], [26.0208737407554, 55.8313638955883], [26.0209715463932, 55.8313773149101], [26.0209960162045, 55.831380626814], [26.0210939680795, 55.8313937025908], [26.0211184739707, 55.831396928544], [26.0212165682605, 55.8314096602655], [26.0212411092634, 55.8314128001405], [26.021339342032, 55.8314251872959], [26.0213639171769, 55.8314282409688], [26.0214622845942, 55.8314402830752], [26.0214868929101, 55.8314432504252], [26.0215853910569, 55.8314549470028], [26.0216100315717, 55.8314578279128], [26.0217086565578, 55.8314691784998], [26.0217333282978, 55.831471972856], [26.0218320762544, 55.8314829770071], [26.0218567782449, 55.831485684699], [26.021955645239, 55.831496341976], [26.021980376504, 55.8314989628967], [26.0220793586482, 55.8315092728807], [26.0221041182105, 55.8315118069266], [26.0222032115953, 55.8315217692103], [26.0222279984767, 55.8315242162813], [26.0223271991604, 55.8315338304685], [26.0223520123814, 55.831536190468], [26.0224513164808, 55.8315454561825], [26.0224761550612, 55.8315477290172], [26.0225755586346, 55.8315566458911], [26.0226004215929, 55.8315588314712], [26.0226999207084, 55.831567399152], [26.0227248070622, 55.8315694973912], [26.022824397778, 55.8315777155396], [26.0228493065441, 55.831579726355], [26.0229489849699, 55.83158759465], [26.0229739151641, 55.8315895179621], [26.0230736773223, 55.8315970360896], [26.0230986279596, 55.8315988718226], [26.0231984699025, 55.8316060394853], [26.023223439997, 55.8316077875666], [26.0233233578221, 55.8316146044844], [26.0233483463872, 55.8316162648448], [26.0234483361053, 55.8316227307455], [26.0234733421537, 55.8316243033196], [26.0235733998287, 55.8316304179489], [26.0235984223724, 55.8316319026745], [26.023698544056, 55.8316376657911], [26.0237235821063, 55.8316390626095], [26.0238237638392, 55.8316444739855], [26.0238488164067, 55.8316457828417], [26.0239490542186, 55.8316508422627], [26.0239741203135, 55.8316520631049], [26.0240744102694, 55.8316567703724], [26.0240994889013, 55.8316579031523], [26.0241998270205, 55.8316622580796], [26.0242249171986, 55.8316633027525], [26.0243252995027, 55.8316673051669], [26.0243504002355, 55.8316682616916], [26.0244508228103, 55.8316719114371], [26.024475933106, 55.8316727797758], [26.0245763919035, 55.8316760767053], [26.02460151077, 55.8316768568237], [26.0247020019002, 55.8316798008098], [26.0247271283451, 55.831680492677], [26.0248276477968, 55.831683083602], [26.0248527808272, 55.8316836871908], [26.0249533246153, 55.8316859249522], [26.0249784632381, 55.8316864402387], [26.0250790274384, 55.8316883247492], [26.0251041706603, 55.8316887517132], [26.0252047512445, 55.8316902828973], [26.0252298980723, 55.8316906215218], [26.0253304911117, 55.8316917993198], [26.0253556405515, 55.8316920495915], [26.0254562420438, 55.8316928739566], [26.0254813931021, 55.8316930358655], [26.0255819990772, 55.8316935067654], [26.02560715076, 55.8316935803052], [26.0257077572558, 55.8316936977212], [26.0257329085695, 55.8316936828891], [26.0258335115981, 55.8316934468166], [26.0258586615489, 55.8316933436131], [26.0259592571329, 55.8316927540616], [26.0259844047271, 55.8316925624908], [26.0260849888916, 55.8316916194838], [26.0261101331355, 55.8316913395533], [26.0262107019252, 55.8316900431277], [26.0262358418253, 55.8316896748486], [26.0263363912499, 55.831688025056], [26.0263615258129, 55.8316875684428], [26.0264620518964, 55.8316855653485], [26.0264871801292, 55.8316850204194], [26.0265876789213, 55.8316826641021], [26.026612799831, 55.8316820308785], [26.0267132673118, 55.8316793214327], [26.0267383799058, 55.8316785999397], [26.026838812188, 55.8316755374701], [26.0268639154741, 55.8316747277363], [26.0269643085016, 55.8316713123667], [26.026989401488, 55.8316704144239], [26.0270897513436, 55.8316666462878], [26.0271148330387, 55.8316656601717], [26.0272151357603, 55.8316615394177], [26.0272402051732, 55.8316604651671], [26.0273404567724, 55.8316559919592], [26.0273655129125, 55.8316548296168], [26.0274657094308, 55.8316500041317], [26.0274907513081, 55.8316487537433], [26.0275908888264, 55.8316435761698], [26.0276159154515, 55.8316422377848], [26.0277159899548, 55.8316367083306], [26.0277410003388, 55.8316352820019], [26.0278410079024, 55.831629400884], [26.0278660010571, 55.831627886668], [26.0279659377442, 55.8316216541179], [26.0279909126822, 55.8316200520744], [26.0280907745188, 55.8316134683399], [26.0281157302533, 55.8316117785323], [26.0282155132993, 55.8316048438734], [26.0282404488442, 55.8316030663684], [26.0283401491679, 55.8315957810583], [26.0283650635379, 55.8315939159263], [26.0284646772058, 55.8315862802524], [26.0284895694166, 55.8315843275669], [26.0285890924394, 55.8315763418353], [26.0286139615075, 55.8315743016736], [26.028713390036, 55.8315659661932], [26.0287382349789, 55.8315638386359], [26.0288375650356, 55.83155515374], [26.0288623848715, 55.8315529388711], [26.0289616125229, 55.8315439049038], [26.0289864062712, 55.831541602811], [26.029085527618, 55.8315322201275], [26.0291102942991, 55.8315298309016], [26.0292093054141, 55.8315200998736], [26.0292340440496, 55.8315176236092], [26.0293329410346, 55.8315075446199], [26.0293576506469, 55.8315049814147], [26.0294564295959, 55.8314945548623], [26.0294811092089, 55.8314919048176], [26.0295797661978, 55.8314811311162], [26.0296044148362, 55.8314783943368], [26.0297029459668, 55.8314672739125], [26.0297275626568, 55.8314644505065], [26.0298259640787, 55.8314529837937], [26.0298505478478, 55.8314500738726], [26.0299488156161, 55.8314382613311], [26.029973365493, 55.8314352650101], [26.0300714957561, 55.8314231071031], [26.0300960107708, 55.8314200245004], [26.0301939996594, 55.8314075217073], [26.0302184788433, 55.8314043529447], [26.0303163224619, 55.8313915057626], [26.0303407648479, 55.8313882509655], [26.0304384593381, 55.8313750599012], [26.0304628639606, 55.8313717191981], [26.0305604054944, 55.8313581847684], [26.0305847713891, 55.8313547582913], [26.0306821560548, 55.8313408810391], [26.030706482259, 55.8313373689235], [26.030803706252, 55.8313231493911], [26.0308279918047, 55.8313195517757], [26.0309250512831, 55.8313049905251], [26.0309492952248, 55.831301307552], [26.0310461863338, 55.8312864051616], [26.0310703877067, 55.8312826369764], [26.0311671066198, 55.8312673940348], [26.0311912644677, 55.8312635407863], [26.0312878073736, 55.8312479578944], [26.0313119207421, 55.831244019735], [26.0314082838222, 55.8312280975092], [26.0314323517587, 55.8312240745945], [26.0315285312229, 55.8312078136611], [26.0315525527765, 55.83120370615], [26.0316485448148, 55.8311871071531], [26.0316725190365, 55.8311829152079], [26.0317683198149, 55.8311659788109], [26.0317922457575, 55.8311617025972], [26.0318878515622, 55.8311444294567], [26.0319117282807, 55.8311400691436], [26.0320071352943, 55.8311224599492], [26.0320309618452, 55.8311180157089], [26.0321261662951, 55.8311000711572], [26.032149941737, 55.8310955431654], [26.0322449398776, 55.8310772639625], [26.0322686632715, 55.831072652398], [26.0323634513502, 55.831054039266], [26.0323871217587, 55.8310493443111], [26.0324816960139, 55.8310303979889], [26.032505312502, 55.831025619829], [26.0325996692041, 55.831006341064], [26.0326232308388, 55.831001479888], [26.0327173662909, 55.8309818694355], [26.0327408721415, 55.8309769254354], [26.0328347825711, 55.8309569840815], [26.0328582317089, 55.8309519574527], [26.0329519134451, 55.830931685977], [26.0329753049437, 55.8309265769182], [26.0330687542814, 55.8309059761226], [26.0330920872168, 55.8309007848355], [26.0331853004447, 55.8308798555383], [26.0332085738952, 55.8308745822281], [26.0333015473395, 55.8308533252545], [26.0333247603856, 55.8308479701295], [26.0334174904035, 55.8308263863125], [26.0334406421283, 55.8308209495843], [26.0335331249961, 55.8307990397907], [26.0335562144851, 55.8307935216741], [26.0336484466088, 55.8307712867556], [26.0336714729498, 55.8307656874688], [26.0337634506503, 55.8307431283124], [26.0337864129337, 55.8307374480765], [26.033878132591, 55.8307145655705], [26.0339010299098, 55.8307088046099], [26.0339924878993, 55.8306855996585], [26.0340153193489, 55.8306797582009], [26.0341065120535, 55.8306562317223], [26.0341292767322, 55.8306503099984], [26.0342202005528, 55.8306264629213], [26.0342428975612, 55.8306204611651], [26.0343335489093, 55.8305962944308], [26.0343561773508, 55.8305902128795], [26.0344465526453, 55.830565727443], [26.0344691116262, 55.8305595663368], [26.0345592072917, 55.8305347631669], [26.034581695921, 55.8305285227493], [26.0346715083946, 55.8305034028271], [26.0346939257838, 55.8304970833447], [26.0347834515465, 55.8304716476548], [26.0348057968102, 55.8304652493571], [26.0348950322744, 55.830439498919], [26.0349173045299, 55.830433022059], [26.0350062462257, 55.8304069578742], [26.0350284445934, 55.8304004027077], [26.0351170889593, 55.8303740258203], [26.0351392125622, 55.8303673926064], [26.0352275561443, 55.8303407040443], [26.0352496041087, 55.8303339930449], [26.0353376433831, 55.8303069938731], [26.0353596148381, 55.8303002053533], [26.0354473463261, 55.8302728966388], [26.035469240404, 55.8302660308671], [26.0355566606726, 55.8302384136788], [26.0355784765085, 55.8302314709262], [26.0356655820729, 55.8302035463654], [26.0356873188051, 55.8301965269063], [26.0357741062343, 55.8301682960733], [26.0357957630043, 55.830161200185], [26.0358822288824, 55.8301326641912], [26.0359038048349, 55.830125492154], [26.0359899457292, 55.8300966521326], [26.036011440012, 55.83008940423], [26.0360972525297, 55.8300602613173], [26.0361186642939, 55.8300529378355], [26.0362041450482, 55.830023493182], [26.0362254734481, 55.8300160944105], [26.0363106190497, 55.8299863491842], [26.036331863243, 55.8299788754151], [26.0364166703387, 55.8299488307878], [26.0364378294863, 55.8299412823165], [26.0365222947445, 55.8299109394688], [26.0365433680108, 55.8299033165936], [26.0366274880555, 55.8298726767386], [26.0366484746082, 55.8298649797605], [26.0367322461446, 55.829834044099], [26.036753145155, 55.8298262733222], [26.0368365648861, 55.8297950430719], [26.0368573755286, 55.8297871988033], [26.0369404401192, 55.8297556752134], [26.0369611615721, 55.829747757763], [26.0370438677731, 55.8297159420671], [26.0370644992181, 55.8297079517476], [26.0371468437603, 55.8296758452037], [26.0371673843825, 55.8296677823309], [26.0372493640162, 55.8296353862065], [26.0372698130045, 55.8296272510987], [26.0373514244656, 55.8295945666844], [26.0373717810125, 55.8295863596632], [26.037453021126, 55.8295533882308], [26.0374732844275, 55.8295451096203], [26.0375541499364, 55.8295118524923], [26.0375743191924, 55.8295035026197], [26.0376548069225, 55.8294699611021], [26.0376748813365, 55.8294615402972], [26.0377549881279, 55.8294277157074], [26.0377749669071, 55.8294192243029], [26.0378546895619, 55.8293851179917], [26.0378745719175, 55.829376556323], [26.0379539073101, 55.8293421696284], [26.037973692457, 55.8293335380337], [26.0380526374651, 55.8292988723093], [26.0380723246219, 55.8292901711297], [26.0381508760927, 55.8292552277607], [26.0381704644821, 55.8292464573399], [26.0382486193577, 55.8292112376872], [26.0382681082062, 55.8292023983717], [26.0383458633526, 55.8291669038482], [26.0383652518907, 55.8291579959872], [26.0384426042787, 55.8291222279765], [26.0384618917408, 55.8291132519218], [26.0385388382916, 55.8290772118482], [26.0385580239162, 55.8290681679545], [26.0386345616029, 55.8290318572365], [26.0386536446325, 55.829022745861], [26.0387297704247, 55.8289861659369], [26.0387487501056, 55.8289769874396], [26.038824461008, 55.8289401397496], [26.038843336591, 55.828930894493], [26.0389186296154, 55.8288937804921], [26.0389374003552, 55.8288844688415], [26.0390122725089, 55.8288470900056], [26.0390309376644, 55.8288377123288], [26.039105386016, 55.8288000701222], [26.0391239448502, 55.8287906267898], [26.0391979664413, 55.8287527227091], [26.0392164182216, 55.828743214094], [26.0392900101451, 55.8287050496288], [26.039308354143, 55.8286954761066], [26.0393815134769, 55.828657052773], [26.0393997489681, 55.8286474147219], [26.0394724728372, 55.828608734031], [26.0394905991017, 55.8285990318318], [26.0395628846396, 55.828560095309], [26.0395809009619, 55.8285503293449], [26.0396527452907, 55.8285111385413], [26.0396706509596, 55.8285013091981], [26.0397420512781, 55.8284618656426], [26.0397598455866, 55.8284519733086], [26.0398307990331, 55.8284122785832], [26.0398484812788, 55.8284023236492], [26.0399189850908, 55.8283623793004], [26.0428765282775, 55.8266824753695], [26.0428940963482, 55.8266724578435], [26.0429641420664, 55.8266322639254], [26.0429815966831, 55.826622184591], [26.0430511872047, 55.8265817442345], [26.0430685276785, 55.8265716034897], [26.0431376602679, 55.8265309182855], [26.0431548859142, 55.826520716531], [26.0432235578179, 55.8264797881006], [26.0432406679568, 55.8264695257394], [26.0433088764823, 55.8264283556889], [26.0433258704383, 55.8264180331263], [26.0433936128942, 55.8263766230811], [26.0434104899966, 55.8263662407249], [26.0434777636928, 55.8263245923308], [26.0434945232753, 55.8263141505911], [26.0435613255736, 55.8262722654827], [26.0435779669748, 55.8262617647719], [26.0436442952381, 55.8262196446034], [26.0436608178011, 55.8262090853364], [26.043726669384, 55.8261667317895], [26.0437430724567, 55.8261561143833], [26.0438084448025, 55.8261135291035], [26.0438247277374, 55.8261028539775], [26.0438896182335, 55.826060038668], [26.043905780388, 55.8260493062439], [26.0439701864987, 55.8260062625789], [26.0439862272349, 55.8259954732806], [26.0440501463794, 55.8259522029866], [26.0440660650643, 55.8259413572403], [26.0441294947605, 55.825897861999], [26.0441452907657, 55.8258869602331], [26.044208228488, 55.8258432417776], [26.0442239011903, 55.8258322844227], [26.0442863444735, 55.8257883444669], [26.0443018932542, 55.8257773319558], [26.0443638396051, 55.8257331722557], [26.0443792638506, 55.8257221050234], [26.044440710847, 55.8256777273075], [26.0444560099486, 55.825666605791], [26.0445169551621, 55.8256220118144], [26.0445321285161, 55.8256108364532], [26.0445925695421, 55.8255660279771], [26.0446076165497, 55.8255547992125], [26.0446675509893, 55.8255097780168], [26.0446824710568, 55.8254984962923], [26.0447418965632, 55.8254532641418], [26.0447566891018, 55.8254419299031], [26.0448156033289, 55.825396488585], [26.0448302677549, 55.8253851022797], [26.0448886683505, 55.8253394536103], [26.0449032040853, 55.8253280156882], [26.0449610887914, 55.8252821614343], [26.0449754952614, 55.825270672347], [26.0450328617574, 55.8252246143484], [26.0450471383942, 55.8252130745499], [26.0451039844262, 55.8251668146184], [26.0451181306665, 55.8251552245643], [26.045174453997, 55.8251087645226], [26.0451884692826, 55.8250971246708], [26.0452442676862, 55.8250504663564], [26.0452581514642, 55.8250387771665], [26.0453134227277, 55.8249919224324], [26.0453271744505, 55.8249801843663], [26.0453819164263, 55.8249331350348], [26.0453955355511, 55.8249213485559], [26.0454497460469, 55.8248741065133], [26.0454632320365, 55.8248622720872], [26.0455169089268, 55.824814839188], [26.0455302612492, 55.8248029572822], [26.0455834024046, 55.8247553354105], [26.0455966205331, 55.8247434064941], [26.0456492238841, 55.8246955975064], [26.0456623072973, 55.8246836220507], [26.0457143707397, 55.8246356278618], [26.0457273189213, 55.8246236063397], [26.0457788404174, 55.8245754288304], [26.0457916528569, 55.8245633617167], [26.0458426303778, 55.8245150027864], [26.0458553065696, 55.8245028905577], [26.0459057380876, 55.8244543521326], [26.0459182775317, 55.8244421952672], [26.045968161066, 55.8243934792564], [26.0459805632679, 55.8243812782345], [26.0460298968559, 55.824332386557], [26.0460421613265, 55.8243201418605], [26.0460909430251, 55.8242710764444], [26.0461030692806, 55.8242587885569], [26.0461512971473, 55.8242095513589], [26.0461632847095, 55.8241972207656], [26.0462109568617, 55.8241478137104], [26.0462228052578, 55.8241354408983], [26.0462699198125, 55.8240858659401], [26.0462816285752, 55.8240734513979], [26.0463281836617, 55.8240237105079], [26.0463397523293, 55.8240112547259], [26.0463857461226, 55.8239613498569], [26.0463971742389, 55.823948853327], [26.0464426049268, 55.8238987864483], [26.0464538920411, 55.823886249664], [26.046498757826, 55.8238360227596], [26.0465099034932, 55.823823446216], [26.0465542026078, 55.8237730612675], [26.0465652063885, 55.8237604454614], [26.0466089370865, 55.8237099044581], [26.0466197985468, 55.8236972498875], [26.0466629591, 55.8236465548301], [26.0466736778117, 55.823633861995], [26.0467162665255, 55.8235830148773], [26.0467268420659, 55.8235702842788], [26.0467688572614, 55.8235192871084], [26.0467792892136, 55.8235065192493], [26.0468207292305, 55.8234553740448], [26.0468310171833, 55.8234425694294], [26.0468718803816, 55.8233912782184], [26.0468820239294, 55.8233784373522], [26.0469223087133, 55.8233270021417], [26.0469323074562, 55.8233141255319], [26.0469720122206, 55.8232625483746], [26.0469818657645, 55.8232496365298], [26.0470209889616, 55.8231979194404], [26.0470306969181, 55.8231849728703], [26.0470692369907, 55.8231331179107], [26.0470787989772, 55.8231201371268], [26.0471167544187, 55.8230681463283], [26.0471261700582, 55.823055131843], [26.0471635393676, 55.8230030072654], [26.0471728082891, 55.8229899595928], [26.0472095899843, 55.8229377033079], [26.0472187118225, 55.8229246229631], [26.0472549044704, 55.822872237011], [26.0472638788658, 55.8228591245107], [26.0472994810273, 55.8228066109788], [26.0473083076263, 55.8227934668408], [26.0473433179117, 55.8227408277829], [26.0473519963664, 55.8227276525261], [26.0473864133758, 55.8226748900521], [26.0473949433444, 55.8226616841969], [26.0474287657452, 55.822608800354], [26.0474371468914, 55.8225955644218], [26.0474703733331, 55.8225425613265], [26.0474786053269, 55.82252929584], [26.0475112345111, 55.8224761755682], [26.0475193170281, 55.8224628810513], [26.0475513476588, 55.822409645718], [26.0475592803807, 55.8223963226957], [26.0475907112157, 55.8223429743704], [26.0475984938298, 55.8223296233686], [26.0476293236052, 55.822276164202], [26.0476369558051, 55.822262785748], [26.0476671833217, 55.8222092178251], [26.0476746648069, 55.8221958124473], [26.0477042888815, 55.8221421378696], [26.0477116193572, 55.8221287060973], [26.0477406388009, 55.8220749270252], [26.0477478179785, 55.8220614693888], [26.0477762316685, 55.8220075879088], [26.0477832592653, 55.8219941049396], [26.0478110660766, 55.8219401231908], [26.0478179418158, 55.8219266154212], [26.0478451406462, 55.8218725355499], [26.0478518642572, 55.8218590035133], [26.0478784540467, 55.8218048276333], [26.0478850252647, 55.8217912718641], [26.0479110049649, 55.8217370021173], [26.0479174235313, 55.8217234231508], [26.04794279211, 55.8216690617003], [26.0479490577721, 55.8216554600726], [26.0479738142429, 55.8216010090396], [26.0479799267541, 55.8215873852877], [26.0480040701306, 55.8215328468483], [26.0480100292504, 55.8215192015102], [26.0480335585987, 55.8214645777815], [26.0480393640925, 55.821450911396], [26.0480622784688, 55.8213962045761], [26.0480679301083, 55.8213825176828], [26.0480902286222, 55.8213277299056], [26.0480957261851, 55.821314023045], [26.0481174079598, 55.8212591564723], [26.0481227512296, 55.8212454301855], [26.048143815404, 55.8211904870052], [26.0481490041707, 55.8211767418343], [26.0481694499258, 55.8211217241908], [26.0481744839853, 55.8211079606785], [26.0481943105089, 55.821052870766], [26.0481991896633, 55.8210390894556], [26.0482183961829, 55.82098392943], [26.0482231202403, 55.8209701308658], [26.0482417059925, 55.8209149029292], [26.0482462747673, 55.8209010876559], [26.0482642390337, 55.8208457939521], [26.0482686523463, 55.8208319625152], [26.0482859944105, 55.8207766052592], [26.0482902520874, 55.8207627582049], [26.0483069712703, 55.8207073395757], [26.0483110731442, 55.8206934774507], [26.0483271687905, 55.8206379996318], [26.0483311147004, 55.8206241229833], [26.0483465861797, 55.8205685881574], [26.0483503759706, 55.8205546975334], [26.0483652226684, 55.8204991079195], [26.0483688561915, 55.8204852038684], [26.0483830775357, 55.8204295616204], [26.0483865546483, 55.8204156446911], [26.0484001500697, 55.820359952049], [26.0484034706354, 55.8203460227911], [26.0484164396075, 55.8202902819265], [26.048419603496, 55.8202763408899], [26.0484319455079, 55.8202205540121], [26.0484349525951, 55.8202066017471], [26.0484466671635, 55.8201507710557], [26.0484495173316, 55.8201368081133], [26.0484606039965, 55.8200809358171], [26.0484632971338, 55.8200669627485], [26.0484737554623, 55.820011051045], [26.0484762914633, 55.8199970684019], [26.0484861210431, 55.8199411195142], [26.0484884998085, 55.8199271278486], [26.0484977002583, 55.8198711439658], [26.048499921695, 55.8198571438301], [26.048508492653, 55.8198011271741], [26.0485105566742, 55.8197871191211], [26.0485184978047, 55.8197310719085], [26.0485204043297, 55.8197170564913], [26.0485277153247, 55.8196609809191], [26.0485294642791, 55.8196469586908], [26.0485361448515, 55.8195908569873], [26.0485377361671, 55.8195768285016], [26.0485437860572, 55.8195207028766], [26.048545219672, 55.8195066686874], [26.0485506386442, 55.8194505213582], [26.0485519145025, 55.8194364820196], [26.0485567023475, 55.8193803151879], [26.0485578203996, 55.819366271254], [26.0485619769294, 55.8193100871666], [26.0485629371322, 55.8192960391918], [26.048566462188, 55.8192398400414], [26.0485672645044, 55.8192257885805], [26.0485701579499, 55.8191695765891], [26.0485708023491, 55.8191555221968], [26.0485730640724, 55.8190992996135], [26.0485735505298, 55.8190852428445], [26.0485751804471, 55.8190290118278], [26.0485755089442, 55.8190149532371], [26.0485765069926, 55.8189587160764], [26.0485766775174, 55.818944656219], [26.048577043662, 55.8188884150832], [26.0485770562087, 55.8188743545141], [26.0485767904379, 55.8188181116472], [26.0485766450067, 55.8188040509216], [26.0485757473347, 55.8187478085382], [26.0485754439322, 55.818733748211], [26.0485739143979, 55.8186775085382], [26.048573453037, 55.8186634491647], [26.0485712917038, 55.8186072144099], [26.0485706724036, 55.8185931565449], [26.0485678793598, 55.8185369289234], [26.0485671021454, 55.818522873122], [26.048563677506, 55.8184666548807], [26.0485627424092, 55.8184526016977], [26.048558686312, 55.818396395038], [26.0485575933703, 55.8183823450281], [26.0485529059786, 55.8183261521664], [26.0485516552361, 55.8183121058844], [26.0485463367389, 55.8182559290474], [26.0485449282459, 55.8182418870476], [26.0485389788542, 55.8181857284309], [26.048537412667, 55.8181716912677], [26.0485308326246, 55.8181155531373], [26.048529108806, 55.8181015213648], [26.0485218983681, 55.8180454058702], [26.0485200169868, 55.8180313800423], [26.048512176449, 55.8179752894589], [26.0485101375803, 55.8179612701294], [26.0485016672505, 55.8179052066347], [26.0484994709756, 55.8178911943569], [26.0484903711949, 55.8178351601857], [26.0484880176014, 55.8178211555126], [26.0484782887294, 55.8177651528589], [26.0455051090879, 55.8010299374867], [26.0455026013384, 55.8010159408912], [26.0454922561682, 55.8009599716321], [26.0454895913595, 55.800945983742], [26.0454786181662, 55.8008900504333], [26.0454757964044, 55.8008760718007], [26.0454641956164, 55.800820176608], [26.0454612170136, 55.8008062077847], [26.045448989096, 55.8007503529341], [26.0454458537706, 55.8007363944715], [26.0454329992098, 55.8006805821694], [26.0454297072865, 55.8006666346184], [26.0454162265946, 55.8006108670732], [26.0454127782042, 55.8005969309845], [26.0453986719102, 55.800541210371], [26.0453950671895, 55.8005272862945], [26.0453803358595, 55.8004716148368], [26.0453765749518, 55.8004577033222], [26.0453612191704, 55.8004020832164], [26.0453573022248, 55.8003881848129], [26.0453413225972, 55.800332618239], [26.0453372497692, 55.8003187334951], [26.0453206469362, 55.8002632226696], [26.0453164183874, 55.8002493521335], [26.045299192999, 55.8001938992195], [26.0452948088972, 55.8001800434385], [26.0452769616398, 55.8001246506357], [26.0452724221588, 55.8001108101568], [26.0452539537497, 55.8000554796801], [26.0452492590694, 55.8000416550496], [26.0452301702246, 55.7999863890344], [26.0452253205312, 55.799972580798], [26.0452056120184, 55.7999173814584], [26.0452006075041, 55.7999035901611], [26.045180280104, 55.7998484596737], [26.0451751209672, 55.7998346858598], [26.0451541754774, 55.7997796263794], [26.0451488619225, 55.7997658705926], [26.045127299182, 55.7997108843165], [26.0451218314195, 55.7996971470997], [26.0450996522802, 55.7996422361915], [26.0450940305268, 55.799628518087], [26.0445572205629, 55.7983371526785], [26.0445514454707, 55.7983234541992], [26.0445280379186, 55.7982687004045], [26.0445221092915, 55.7982550221189], [26.0444980880648, 55.7982003501762], [26.0444920061375, 55.7981866926241], [26.0444673721842, 55.7981321046846], [26.0444611371975, 55.7981184684051], [26.0444358915041, 55.7980639666474], [26.0444295037049, 55.7980503521788], [26.044403647261, 55.7979959387321], [26.0443971069023, 55.7979823466117], [26.0321966236999, 55.7726229272871], [26.0310053783176, 55.7709392225215], [26.0293723603804, 55.7695188165462], [26.0272940974918, 55.7682938614894], [26.0248443131549, 55.7673077899581], [26.0221098833164, 55.7665955621821], [26.0191877581307, 55.7661824284788], [26.0161815295934, 55.7660830355812], [26.0131977658508, 55.7663009082429], [25.9745240097854, 55.7712305552325]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;3b323fa6-8ad0-4df7-a016-230b7ce68818&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20231201T161332_20231201T161448_GAT_83336_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 379826364, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:37.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T07:36:10.102121Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:14:59.764445Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2023/12/01/RS02_SAR_SW_SCW_20231201T161332_20231201T161448_GAT_83336_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;2955a203f72254a6f09addf394300091&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:58.660387Z&#x27;}, {&#x27;Value&#x27;: &#x27;ffefafd20fa122f0978f65de7251af9b28e9ab653fd2b4317ab6587dfef00b57&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:59.448737Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-12-01T16:13:32.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-12-01T16:14:48.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((13.74 63.36, 16.34 58.97, 25.47 59.87, 24.25 64.32, 13.74 63.36))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[13.74, 63.36], [16.34, 58.97], [25.47, 59.87], [24.25, 64.32], [13.74, 63.36]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;05e62d2d-2dca-43d0-994d-673f96f0b7f1&#x27;, &#x27;Name&#x27;: &#x27;PH1A_PHR_BUN__3_20160816T084845_20160816T084854_TOU_1234_4685.DIMA&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 213286999, &#x27;OriginDate&#x27;: &#x27;2024-03-11T09:26:10.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-03-14T04:28:33.145124Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:13:36.534172Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2015/PHR_BUN__3_71F4/2016/08/16/PH1A_PHR_BUN__3_20160816T084845_20160816T084854_TOU_1234_4685&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;2d42c75cc7b65f713fedaeef4c9b1414&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:35.937777Z&#x27;}, {&#x27;Value&#x27;: &#x27;f00208836f4d86cf96cb6a61bea8274e67db2c215d6c9d10c00a484f1f0f99df&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:36.273069Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2016-08-16T08:48:45.000000Z&#x27;, &#x27;End&#x27;: &#x27;2016-08-16T08:48:54.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((32.623640202289 40.1073003597303, 32.6216661204475 40.1092287793998, 32.6200744544806 40.1119915180141, 32.6201578941387 40.1151788622101, 32.6218919292727 40.1178545392001, 32.6475939292727 40.1404585392183, 32.6503069570277 40.1418059578355, 32.6533307394056 40.1416248593508, 32.6558635529417 40.1399632600848, 32.6625594241987 40.13247818999, 32.6673540387995 40.132427578925, 32.6727045106634 40.1410673432776, 32.674381618488 40.1428235465047, 32.6766251684873 40.1437527525266, 32.6908301684873 40.1464077525287, 32.6919220625277 40.1462892125259, 32.691755175312 40.0590634981298, 32.6915780092268 40.0590211091908, 32.6768150092268 40.0594931091911, 32.675202051977 40.0597725498512, 32.6638642864511 40.0634184588615, 32.6268836641236 40.0605200903421, 32.6239103873266 40.0610661461612, 32.6216008440037 40.0630166746815, 32.6205648819763 40.0658566279465, 32.6179028819763 40.0953756279703, 32.6185195122645 40.0985732235405, 32.6221355122645 40.1056752235462, 32.623640202289 40.1073003597303))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[32.623640202289, 40.1073003597303], [32.6216661204475, 40.1092287793998], [32.6200744544806, 40.1119915180141], [32.6201578941387, 40.1151788622101], [32.6218919292727, 40.1178545392001], [32.6475939292727, 40.1404585392183], [32.6503069570277, 40.1418059578355], [32.6533307394056, 40.1416248593508], [32.6558635529417, 40.1399632600848], [32.6625594241987, 40.13247818999], [32.6673540387995, 40.132427578925], [32.6727045106634, 40.1410673432776], [32.674381618488, 40.1428235465047], [32.6766251684873, 40.1437527525266], [32.6908301684873, 40.1464077525287], [32.6919220625277, 40.1462892125259], [32.691755175312, 40.0590634981298], [32.6915780092268, 40.0590211091908], [32.6768150092268, 40.0594931091911], [32.675202051977, 40.0597725498512], [32.6638642864511, 40.0634184588615], [32.6268836641236, 40.0605200903421], [32.6239103873266, 40.0610661461612], [32.6216008440037, 40.0630166746815], [32.6205648819763, 40.0658566279465], [32.6179028819763, 40.0953756279703], [32.6185195122645, 40.0985732235405], [32.6221355122645, 40.1056752235462], [32.623640202289, 40.1073003597303]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;72be66f5-ad57-446c-b4ba-c4843df4ed22&#x27;, &#x27;Name&#x27;: &#x27;IE00_SAR_SC__GR_20231126T090041_20231126T090058_FFF_000000_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 794415250, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:37.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T07:45:58.801764Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:12:57.364503Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SC__GR_6F15/2023/11/26/IE00_SAR_SC__GR_20231126T090041_20231126T090058_FFF_000000_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;0a5ce7aa5a59b81168fc8d455521dc25&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:55.077806Z&#x27;}, {&#x27;Value&#x27;: &#x27;70c8bbab6978a59ab43af0af0d16de14aab1d8eb227bbbebebe37b12fb0cfd43&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:56.673300Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-11-26T09:00:41.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-11-26T09:00:58.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-67.9148984168465 76.7671320966054, -64.3053728243391 77.4219218061832, -67.5368708768276 78.2419960418227, -71.3196113946204 77.5718738975093, -67.9148984168465 76.7671320966054))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-67.9148984168465, 76.7671320966054], [-64.3053728243391, 77.4219218061832], [-67.5368708768276, 78.2419960418227], [-71.3196113946204, 77.5718738975093], [-67.9148984168465, 76.7671320966054]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;ba526d4d-0ef1-42b2-afc5-3a5a2046cfae&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230723T085514_20230723T085517_TOU_049276_0d0c.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 370527794, &#x27;OriginDate&#x27;: &#x27;2025-03-12T16:18:54.394685Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:25:30.609503Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:11:30.712444Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/23/DM02_HRS_MS2_1D_20230723T085514_20230723T085517_TOU_049276_0d0c&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;98f93e57f74c33ab40d2ef8064933298&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:29.733861Z&#x27;}, {&#x27;Value&#x27;: &#x27;803b36989dae12da4735b64a06dbea21d1024134e16b68b71677bb315eeee92e&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:30.421173Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-23T08:55:14.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-23T08:55:17.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((13.560946 43.622391, 13.601536 43.501057, 13.451612 43.475018, 13.411475 43.59639, 13.488247 43.609768, 13.560946 43.622391)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[13.560946, 43.622391], [13.601536, 43.501057], [13.451612, 43.475018], [13.411475, 43.59639], [13.488247, 43.609768], [13.560946, 43.622391]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;0a561894-0b84-414b-9a74-32eb464e1da9&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230717T091025_20230717T091027_TOU_049187_57cf.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 322291568, &#x27;OriginDate&#x27;: &#x27;2025-03-12T16:06:36.614925Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:12:18.974442Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:14:56.353412Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/17/DM02_HRS_MS2_1D_20230717T091025_20230717T091027_TOU_049187_57cf&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;08a2577b4a3d0d2b8013e76bd8458fab&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:55.442850Z&#x27;}, {&#x27;Value&#x27;: &#x27;3180f793ff3d0b5da67a0f56d9d9b3c7263d7ae6956c5377d57630082f5f58dc&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:56.006787Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-17T09:10:25.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-17T09:10:27.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((10.61263 44.417145, 10.611474 44.309624, 10.540259 44.298008, 10.537446 44.298672, 10.533875 44.30114, 10.527875 44.304825, 10.52372 44.307964, 10.519785 44.312611, 10.51859 44.319397, 10.515059 44.31427, 10.496485 44.301975, 10.488462 44.299129, 10.452588 44.411869, 10.492727 44.418434, 10.504155 44.418388, 10.606388 44.435127, 10.61263 44.417145)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[10.61263, 44.417145], [10.611474, 44.309624], [10.540259, 44.298008], [10.537446, 44.298672], [10.533875, 44.30114], [10.527875, 44.304825], [10.52372, 44.307964], [10.519785, 44.312611], [10.51859, 44.319397], [10.515059, 44.31427], [10.496485, 44.301975], [10.488462, 44.299129], [10.452588, 44.411869], [10.492727, 44.418434], [10.504155, 44.418388], [10.606388, 44.435127], [10.61263, 44.417145]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;d8b771d2-78aa-4eed-9073-9ac92baf1451&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20130604T081721_20140829T081855_ADS_000000_EFgc_aedaeae0.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 36986712, &#x27;OriginDate&#x27;: &#x27;2024-04-29T16:01:45.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-06T12:36:55.213139Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:23:54.714703Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2013/06/04/DEM1_SAR_DGE_30_20130604T081721_20140829T081855_ADS_000000_EFgc_aedaeae0&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;0b775f079073ad96e6f34238aa32bba2&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:48.256367Z&#x27;}, {&#x27;Value&#x27;: &#x27;63b146ed2fbb1251df7eaecdf9f13151fcc255c83ca2253026ec54ff1e89f35e&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:48.333074Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2013-06-04T08:17:21.000000Z&#x27;, &#x27;End&#x27;: &#x27;2014-08-29T08:18:55.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-76 -74, -75 -74, -75 -73, -76 -73, -76 -74))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-76.0, -74.0], [-75.0, -74.0], [-75.0, -73.0], [-76.0, -73.0], [-76.0, -74.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;d364dc3d-ab88-4efd-a0a1-599e2053c677&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110315T222549_20130412T222635_ADS_000000_7819_9dad2b24.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 3104063, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:49:21.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:53:03.940572Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T10:09:20.959944Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/15/DEM1_SAR_DTE_90_20110315T222549_20130412T222635_ADS_000000_7819_9dad2b24&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;7fc8cb72d92aa6d21a4e878d2d3df0dd&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:38.066457Z&#x27;}, {&#x27;Value&#x27;: &#x27;6167cb734c9ebf3163831834c7f48bf97c2d5e9b5f74d5d820636041253b60ae&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:38.093547Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-15T22:25:51.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-15T22:25:52.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-64 8, -63 8, -63 9, -64 9, -64 8))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-64.0, 8.0], [-63.0, 8.0], [-63.0, 9.0], [-64.0, 9.0], [-64.0, 8.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;111a7b88-f442-424e-aba2-d7a9c50170a6&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20130601T042352_20140801T211238_ADS_000000_8779_bf5f8c79.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 36918942, &#x27;OriginDate&#x27;: &#x27;2024-05-01T20:43:15.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-06T14:39:31.715156Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:23:50.237149Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2013/06/01/DEM1_SAR_DGE_30_20130601T042352_20140801T211238_ADS_000000_8779_bf5f8c79&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;3a552cf220f5188cacdf2e9340f1da1c&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:53.410113Z&#x27;}, {&#x27;Value&#x27;: &#x27;1d9f100f1a381606a377320495486bba94ff6f0ba4ad4f844fd1ad45f54b7840&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:53.506990Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2013-06-01T04:23:58.000000Z&#x27;, &#x27;End&#x27;: &#x27;2013-06-01T04:23:59.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-12 -73, -11 -73, -11 -72, -12 -72, -12 -73))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-12.0, -73.0], [-11.0, -73.0], [-11.0, -72.0], [-12.0, -72.0], [-12.0, -73.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;26004f49-b2f6-4478-a673-d7213ee6bcf3&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110213T165903_20140909T165150_ADS_000000_3psX_7e3eb1c.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 110199286, &#x27;OriginDate&#x27;: &#x27;2024-04-29T15:56:18.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-06T12:41:39.892017Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:23:51.847316Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/02/13/DEM1_SAR_DGE_30_20110213T165903_20140909T165150_ADS_000000_3psX_7e3eb1c&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;80d20927939068f7e316e24a7d2d120b&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:22.244784Z&#x27;}, {&#x27;Value&#x27;: &#x27;6f66de0865e6cd0330a4f8b2e49b5ccb7da532ddcb0aeb4ebd69c1b0db8a68f5&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:22.488626Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-02-13T16:59:03.000000Z&#x27;, &#x27;End&#x27;: &#x27;2014-09-09T16:51:50.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((13 46, 14 46, 14 47, 13 47, 13 46))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[13.0, 46.0], [14.0, 46.0], [14.0, 47.0], [13.0, 47.0], [13.0, 46.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;fea53481-46e1-4d53-bc0d-1cc6c15b6acd&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110314T070633_20140118T193741_ADS_000000_1884_d5ec66ff.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 1655690, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:38:15.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:58:50.876567Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:23:55.332660Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/14/DEM1_SAR_DTE_90_20110314T070633_20140118T193741_ADS_000000_1884_d5ec66ff&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;944bda7c854f0e2b1a350624d1785d19&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:39.787136Z&#x27;}, {&#x27;Value&#x27;: &#x27;0c50cc9073ff6f68c8bef92f034dcdde22fad008cd273c062bb2a11c06c7e42b&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:39.814841Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-14T07:06:43.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-14T07:06:44.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((159 58, 160 58, 160 59, 159 59, 159 58))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[159.0, 58.0], [160.0, 58.0], [160.0, 59.0], [159.0, 59.0], [159.0, 58.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;f1dff372-b663-4ace-b060-a1bd662586fd&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110315T143342_20140303T022356_ADS_000000_1169_57f834c0.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 3100521, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:35:39.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:54:10.996724Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:50:15.968444Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/15/DEM1_SAR_DTE_90_20110315T143342_20140303T022356_ADS_000000_1169_57f834c0&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;0b46bad5e2cc4af4299c1b2c3c0be9e2&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:44.417137Z&#x27;}, {&#x27;Value&#x27;: &#x27;fc0183b5dd1a450a5e906c518eba51bdd4207d1545eccc456c70c1cdb5a068e4&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:44.442695Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-15T14:33:50.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-15T14:33:51.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((52 22, 53 22, 53 23, 52 23, 52 22))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[52.0, 22.0], [53.0, 22.0], [53.0, 23.0], [52.0, 23.0], [52.0, 22.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;2f4fcc3e-18a1-48cf-b734-52dbef25bd91&#x27;, &#x27;Name&#x27;: &#x27;PH1B_PHR_MS___3_20180607T095519_20180607T095526_TOU_1234_d57a.DIMA&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 3561344804, &#x27;OriginDate&#x27;: &#x27;2024-02-25T17:18:31.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-02-26T20:24:10.187165Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:10:00.105975Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2018/PHR_MS___3_E1F0/2018/06/07/PH1B_PHR_MS___3_20180607T095519_20180607T095526_TOU_1234_d57a&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;36494af6d0edc0dc51e9c194601220c3&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:09:47.350897Z&#x27;}, {&#x27;Value&#x27;: &#x27;c10606d594964e568e4cdfc750a2342aa39d6a0dd5d050d7a543c92c4a411f32&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:09:53.164085Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2018-06-07T09:55:19.000000Z&#x27;, &#x27;End&#x27;: &#x27;2018-06-07T09:55:26.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((23.1211012228445 57.0251852558313, 23.1210026658074 56.9808230013315, 22.9178337880616 56.9825871198458, 22.7996732111075 56.9825531761356, 22.7750121826664 56.9824364576503, 22.7748316973773 57.0230485260974, 22.7746497876268 57.0651890430169, 22.7737607733655 57.2933019001261, 22.7731350650181 57.4867356740198, 22.9568775497357 57.4869433551077, 22.9614921343663 57.484061250394, 23.1222654357895 57.4143006993182, 23.1216795393212 57.2408511182203, 23.1211012228445 57.0251852558313))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[23.1211012228445, 57.0251852558313], [23.1210026658074, 56.9808230013315], [22.9178337880616, 56.9825871198458], [22.7996732111075, 56.9825531761356], [22.7750121826664, 56.9824364576503], [22.7748316973773, 57.0230485260974], [22.7746497876268, 57.0651890430169], [22.7737607733655, 57.2933019001261], [22.7731350650181, 57.4867356740198], [22.9568775497357, 57.4869433551077], [22.9614921343663, 57.484061250394], [23.1222654357895, 57.4143006993182], [23.1216795393212, 57.2408511182203], [23.1211012228445, 57.0251852558313]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;bc0c1ade-4391-4c6b-bc9c-a7a4e63b5cee&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230725T092254_20230725T092257_TOU_049306_0e0a.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 372590915, &#x27;OriginDate&#x27;: &#x27;2025-03-12T16:20:49.527688Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T16:26:32.527800Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:08:22.289002Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/07/25/DM02_HRS_MS2_1D_20230725T092254_20230725T092257_TOU_049306_0e0a&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;61baa15f5aa9e6fcd90dcb0ac0ade646&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:08:19.517396Z&#x27;}, {&#x27;Value&#x27;: &#x27;350fc14f864e81ca355444b164c96a73c4d0cda84097f425eb7fbfbdcec3242f&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:08:20.280754Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-25T09:22:54.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-25T09:22:57.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((7.424598 45.19735, 7.426305 45.191799, 7.429398 45.183201, 7.432009 45.17733, 7.432846 45.174629, 7.435168 45.168915, 7.438723 45.159084, 7.443861 45.14296, 7.446928 45.13205, 7.447258 45.130238, 7.449924 45.072105, 7.308942 45.049557, 7.269478 45.17255, 7.295279 45.176662, 7.424598 45.19735)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[7.424598, 45.19735], [7.426305, 45.191799], [7.429398, 45.183201], [7.432009, 45.17733], [7.432846, 45.174629], [7.435168, 45.168915], [7.438723, 45.159084], [7.443861, 45.14296], [7.446928, 45.13205], [7.447258, 45.130238], [7.449924, 45.072105], [7.308942, 45.049557], [7.269478, 45.17255], [7.295279, 45.176662], [7.424598, 45.19735]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;7f459eb1-f345-4491-b440-d06e27dd8f2d&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20130601T073357_20140813T015613_ADS_000000_7687_bf5f8c79.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 36919053, &#x27;OriginDate&#x27;: &#x27;2024-05-01T20:43:17.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-06T14:38:44.163352Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:23:51.781374Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2013/06/01/DEM1_SAR_DGE_30_20130601T073357_20140813T015613_ADS_000000_7687_bf5f8c79&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;5f197b007f11935b45e78949511e9058&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:30.974336Z&#x27;}, {&#x27;Value&#x27;: &#x27;4ea64c80a6f967052d5e917967291e0b4c220537863089c70720836a36af2f9d&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:31.053476Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2013-06-01T07:35:17.000000Z&#x27;, &#x27;End&#x27;: &#x27;2013-06-01T07:35:18.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-73 -75, -72 -75, -72 -74, -73 -74, -73 -75))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-73.0, -75.0], [-72.0, -75.0], [-72.0, -74.0], [-73.0, -74.0], [-73.0, -75.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;80be2e38-fac6-4ba8-b2d6-796dcbc83da4&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110315T113255_20140831T113639_ADS_000000_7640_fdf1fc4b.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 1655661, &#x27;OriginDate&#x27;: &#x27;2024-05-13T06:30:21.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:54:48.327833Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T10:09:21.283729Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/15/DEM1_SAR_DTE_90_20110315T113255_20140831T113639_ADS_000000_7640_fdf1fc4b&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;2f0f5c5e32c90e3b671506be0fc9d8b3&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:25.234998Z&#x27;}, {&#x27;Value&#x27;: &#x27;94bed30032560b2857c98c8f6506c1d5b625f4e3ed3867d6f4b1186426538f5f&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:25.266694Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-15T11:32:55.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-15T11:32:56.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((92 53, 93 53, 93 54, 92 54, 92 53))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[92.0, 53.0], [93.0, 53.0], [93.0, 54.0], [92.0, 54.0], [92.0, 53.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;d9b01bb7-7dc0-41fa-b572-239369f72088&#x27;, &#x27;Name&#x27;: &#x27;PH1A_PHR_MS__2A_20180913T095705_20180913T095710_TOU_1234_90f2.DIMA&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 917278039, &#x27;OriginDate&#x27;: &#x27;2024-02-25T17:18:26.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-02-26T19:23:08.488064Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:13:46.800478Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2018/PHR_MS__2A_E1F0/2018/09/13/PH1A_PHR_MS__2A_20180913T095705_20180913T095710_TOU_1234_90f2&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;a802d4a1861a1c51438c947540173b52&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:45.008758Z&#x27;}, {&#x27;Value&#x27;: &#x27;242d4afa8310c17d955d1735bb06f86fcfcb6cf26d88e85570539378d2eec83e&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:46.375431Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2018-09-13T09:57:05.000000Z&#x27;, &#x27;End&#x27;: &#x27;2018-09-13T09:57:10.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((18.4219535690829 42.52440772797, 18.420955142627 42.5245224359386, 18.4203242287811 42.5246149636151, 18.4170721484529 42.5254598364906, 18.2688188665075 42.5777963109021, 18.2667716667555 42.5789196036238, 18.2650798803801 42.5803322669861, 18.263817224359 42.5819727705007, 18.2630387378222 42.5837696540741, 18.2509545025373 42.6237396325009, 18.2503823199912 42.6256469881311, 18.2503172991142 42.6258778498295, 18.2502563428626 42.6261092795817, 18.2501507282463 42.6265742533739, 18.2501061059779 42.6268076390602, 18.2500332926288 42.6272758900841, 18.2500051264757 42.6275105959474, 18.2499810861135 42.6277455520495, 18.2497695884642 42.6302436405842, 18.2497533978697 42.6304875021152, 18.2497416537832 42.63073145727, 18.2497359572737 42.6312195635704, 18.2497420070798 42.6314635361508, 18.2497718943232 42.6319509631532, 18.2497957209711 42.6321942392541, 18.2498611058109 42.6326795606395, 18.2627637488521 42.7208659719231, 18.2631922976133 42.7226318954693, 18.2640853775439 42.7242973680953, 18.2654076114683 42.7257963479923, 18.2671065936079 42.7270693907222, 18.2691149647424 42.728066008356, 18.271353082845 42.7287466736927, 18.2737321832985 42.7290843896989, 18.276157902979 42.7290657615788, 18.5128392423787 42.7094202740377, 18.5139816956474 42.7092832114306, 18.516178906326 42.7087761270919, 18.5165935586861 42.7086299808862, 18.5165939587354 42.6887695769501, 18.5160957486231 42.6776813658379, 18.5142221297164 42.6655987742867, 18.5137544737168 42.6545481628931, 18.5130885168224 42.6433606210268, 18.5122501326736 42.6213734605371, 18.5122442278753 42.619741049519, 18.5107155997758 42.6090502180199, 18.5102101669418 42.6072664432009, 18.4982852626785 42.5753675620053, 18.4972744524941 42.5737696555866, 18.4958614431731 42.572351444199, 18.4549037205987 42.5356852252079, 18.4456703404742 42.5295302685858, 18.4413660774278 42.5270768861491, 18.4397697723766 42.5262672878123, 18.4385171451136 42.5257116218459, 18.4367044281424 42.5250146203848, 18.4343639562586 42.5243340940337, 18.4318812543028 42.5240282955346, 18.4301941225119 42.5239528089427, 18.4284163710764 42.5239701936288, 18.4232452304501 42.524302842243, 18.4229352954035 42.5243257453578, 18.4219535690829 42.52440772797))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[18.4219535690829, 42.52440772797], [18.420955142627, 42.5245224359386], [18.4203242287811, 42.5246149636151], [18.4170721484529, 42.5254598364906], [18.2688188665075, 42.5777963109021], [18.2667716667555, 42.5789196036238], [18.2650798803801, 42.5803322669861], [18.263817224359, 42.5819727705007], [18.2630387378222, 42.5837696540741], [18.2509545025373, 42.6237396325009], [18.2503823199912, 42.6256469881311], [18.2503172991142, 42.6258778498295], [18.2502563428626, 42.6261092795817], [18.2501507282463, 42.6265742533739], [18.2501061059779, 42.6268076390602], [18.2500332926288, 42.6272758900841], [18.2500051264757, 42.6275105959474], [18.2499810861135, 42.6277455520495], [18.2497695884642, 42.6302436405842], [18.2497533978697, 42.6304875021152], [18.2497416537832, 42.63073145727], [18.2497359572737, 42.6312195635704], [18.2497420070798, 42.6314635361508], [18.2497718943232, 42.6319509631532], [18.2497957209711, 42.6321942392541], [18.2498611058109, 42.6326795606395], [18.2627637488521, 42.7208659719231], [18.2631922976133, 42.7226318954693], [18.2640853775439, 42.7242973680953], [18.2654076114683, 42.7257963479923], [18.2671065936079, 42.7270693907222], [18.2691149647424, 42.728066008356], [18.271353082845, 42.7287466736927], [18.2737321832985, 42.7290843896989], [18.276157902979, 42.7290657615788], [18.5128392423787, 42.7094202740377], [18.5139816956474, 42.7092832114306], [18.516178906326, 42.7087761270919], [18.5165935586861, 42.7086299808862], [18.5165939587354, 42.6887695769501], [18.5160957486231, 42.6776813658379], [18.5142221297164, 42.6655987742867], [18.5137544737168, 42.6545481628931], [18.5130885168224, 42.6433606210268], [18.5122501326736, 42.6213734605371], [18.5122442278753, 42.619741049519], [18.5107155997758, 42.6090502180199], [18.5102101669418, 42.6072664432009], [18.4982852626785, 42.5753675620053], [18.4972744524941, 42.5737696555866], [18.4958614431731, 42.572351444199], [18.4549037205987, 42.5356852252079], [18.4456703404742, 42.5295302685858], [18.4413660774278, 42.5270768861491], [18.4397697723766, 42.5262672878123], [18.4385171451136, 42.5257116218459], [18.4367044281424, 42.5250146203848], [18.4343639562586, 42.5243340940337], [18.4318812543028, 42.5240282955346], [18.4301941225119, 42.5239528089427], [18.4284163710764, 42.5239701936288], [18.4232452304501, 42.524302842243], [18.4229352954035, 42.5243257453578], [18.4219535690829, 42.52440772797]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;b836f365-6f61-4a64-9bac-5d17ce1421a1&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110314T224257_20140830T224405_ADS_000000_7258_d5ec66ff.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 3104103, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:33:58.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:56:20.705099Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T10:14:59.791931Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/14/DEM1_SAR_DTE_90_20110314T224257_20140830T224405_ADS_000000_7258_d5ec66ff&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;4befb3260d5c3f02fbe356687715a92d&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:55.339564Z&#x27;}, {&#x27;Value&#x27;: &#x27;715ae99495663837b9f7f79b749ad7d55c6072b4db8e3e1552f003a913488152&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:55.366128Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-14T22:42:57.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-14T22:42:58.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-69 10, -68 10, -68 11, -69 11, -69 10))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-69.0, 10.0], [-68.0, 10.0], [-68.0, 11.0], [-69.0, 11.0], [-69.0, 10.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;7079a234-4d4c-4df8-be27-7ffefe82a5e8&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20130601T183625_20140902T181415_ADS_000000_4931_85f7b923.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 36920491, &#x27;OriginDate&#x27;: &#x27;2024-05-01T20:44:36.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-06T14:45:36.749752Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T10:09:28.078994Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2013/06/01/DEM1_SAR_DGE_30_20130601T183625_20140902T181415_ADS_000000_4931_85f7b923&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;908caf9a1a1617e10a535e78cd7a339f&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:48.360460Z&#x27;}, {&#x27;Value&#x27;: &#x27;448701a6e1e1b583ac74cfa43c6b762df50fd026edb39250b5997f0e85d3ca3e&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:48.463266Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2013-06-01T18:38:43.000000Z&#x27;, &#x27;End&#x27;: &#x27;2013-06-01T18:38:44.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((121 -77, 122 -77, 122 -76, 121 -76, 121 -77))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[121.0, -77.0], [122.0, -77.0], [122.0, -76.0], [121.0, -76.0], [121.0, -77.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;685c9266-69e0-4967-8b77-e350053d053e&#x27;, &#x27;Name&#x27;: &#x27;CS00_SAR_SCH_1B_20231110T041539_20231110T041608_MAT_0_9681.HDF5&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 18831656, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:49.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T07:51:25.119606Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T08:50:10.976148Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SCH_1B_6F15/2023/11/10/CS00_SAR_SCH_1B_20231110T041539_20231110T041608_MAT_0_9681&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;fd68bb9a260c1448fbe4ea09db10c841&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:50:07.404292Z&#x27;}, {&#x27;Value&#x27;: &#x27;fb0d108ddfc434962252b5c0cb7171ca40dbeacd45e9359952f0666bc3644f2b&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:50:07.459839Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-11-10T04:15:39.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-11-10T04:16:08.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((20.699893 65.778418, 21.182473 63.98549, 24.710754 64.116573, 24.474072 65.906148, 20.699893 65.778418))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[20.699893, 65.778418], [21.182473, 63.98549], [24.710754, 64.116573], [24.474072, 65.906148], [20.699893, 65.778418]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;18a1ba23-ab11-4af4-980a-6ade49e03f0b&#x27;, &#x27;Name&#x27;: &#x27;PH1B_PHR_MS__2A_20180812T095150_20180812T095154_TOU_1234_c7ea.DIMA&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 393658618, &#x27;OriginDate&#x27;: &#x27;2024-02-25T17:18:21.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-02-26T19:25:20.557857Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:11:03.175672Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2018/PHR_MS__2A_E1F0/2018/08/12/PH1B_PHR_MS__2A_20180812T095150_20180812T095154_TOU_1234_c7ea&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;f167223df98732ec0f72ae68b93c1743&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:02.285542Z&#x27;}, {&#x27;Value&#x27;: &#x27;d38893712f81e71494b2c32232f2bf5ccb86dff816c337d01045d88cf49b524f&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:02.883344Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2018-08-12T09:51:50.000000Z&#x27;, &#x27;End&#x27;: &#x27;2018-08-12T09:51:54.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((19.3630478362156 46.1430496901859, 19.3624529890437 46.1437407493796, 19.3616117102699 46.1453378658491, 19.3612161933398 46.1470148405392, 19.3612805657669 46.1487119514419, 19.3794525777627 46.2523874784108, 19.3799734032837 46.2540373842455, 19.3809036270325 46.2555544064013, 19.3823454465962 46.2570334505915, 19.3828375107803 46.2574197993718, 19.3829685410643 46.2575154513546, 19.3843325569664 46.2583659389119, 19.3869864286149 46.2594704183466, 19.387497195995 46.2596195902489, 19.3897442022546 46.2600782184088, 19.3905829652908 46.2601736207847, 19.3938961430921 46.2601770503408, 19.5495635179499 46.2463256788186, 19.5519963746522 46.2459398547221, 19.5542802736511 46.2452385354296, 19.5544078574308 46.2451768842206, 19.5543048154687 46.1418402741179, 19.3999174904203 46.143148636118, 19.3630478362156 46.1430496901859))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[19.3630478362156, 46.1430496901859], [19.3624529890437, 46.1437407493796], [19.3616117102699, 46.1453378658491], [19.3612161933398, 46.1470148405392], [19.3612805657669, 46.1487119514419], [19.3794525777627, 46.2523874784108], [19.3799734032837, 46.2540373842455], [19.3809036270325, 46.2555544064013], [19.3823454465962, 46.2570334505915], [19.3828375107803, 46.2574197993718], [19.3829685410643, 46.2575154513546], [19.3843325569664, 46.2583659389119], [19.3869864286149, 46.2594704183466], [19.387497195995, 46.2596195902489], [19.3897442022546, 46.2600782184088], [19.3905829652908, 46.2601736207847], [19.3938961430921, 46.2601770503408], [19.5495635179499, 46.2463256788186], [19.5519963746522, 46.2459398547221], [19.5542802736511, 46.2452385354296], [19.5544078574308, 46.2451768842206], [19.5543048154687, 46.1418402741179], [19.3999174904203, 46.143148636118], [19.3630478362156, 46.1430496901859]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;43cb3c3f-7997-4cea-923f-d971b24bff02&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110314T070633_20140409T070703_ADS_000000_8216_57f834c0.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 1655692, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:37:51.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:58:33.017840Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:50:17.665007Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/14/DEM1_SAR_DTE_90_20110314T070633_20140409T070703_ADS_000000_8216_57f834c0&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;267a60ba6abd4bcbb5e80689f8d8262c&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:41.809774Z&#x27;}, {&#x27;Value&#x27;: &#x27;16d2bdf055e2c62416d9e7d9ddb5d286350f7074fe1826043c5fe7716134f601&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:41.834667Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-14T07:06:53.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-14T07:06:54.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((159 54, 160 54, 160 55, 159 55, 159 54))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[159.0, 54.0], [160.0, 54.0], [160.0, 55.0], [159.0, 55.0], [159.0, 54.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;6f37d852-94b9-4b33-aad8-946a06fa2bd3&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110313T231237_20121022T230408_ADS_000000_9806_ef4453a5.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 1655696, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:37:51.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:59:52.416541Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:23:51.843731Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/13/DEM1_SAR_DTE_90_20110313T231237_20121022T230408_ADS_000000_9806_ef4453a5&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;b0e5163a283e07fb82ecc66a87f362b2&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:29.971222Z&#x27;}, {&#x27;Value&#x27;: &#x27;7666a96166b657e62c91fe5951bdde08fdf4290fa04bf66f4664d5099ae6cc59&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:29.993652Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-13T23:12:41.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-13T23:12:42.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-82 54, -81 54, -81 55, -82 55, -82 54))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-82.0, 54.0], [-81.0, 54.0], [-81.0, 55.0], [-82.0, 55.0], [-82.0, 54.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;8c0ca812-c930-432b-b5b7-a104b2f6c70e&#x27;, &#x27;Name&#x27;: &#x27;PH1A_PHR_MS___3_20180131T144124_20180131T144126_TOU_1234_df53.DIMA&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 542742167, &#x27;OriginDate&#x27;: &#x27;2024-02-25T17:18:40.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-02-26T20:41:00.276299Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:12:41.686143Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2018/PHR_MS___3_E1F0/2018/01/31/PH1A_PHR_MS___3_20180131T144124_20180131T144126_TOU_1234_df53&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;95da90ee9620357afbb4872bb52b72f0&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:40.614886Z&#x27;}, {&#x27;Value&#x27;: &#x27;695abdb386714b7634d4eacecf2ad6c6b0ac4e86f1ef5b5c07b211b71d77c4b6&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:41.427130Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2018-01-31T14:41:24.000000Z&#x27;, &#x27;End&#x27;: &#x27;2018-01-31T14:41:26.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-60.9246351172788 14.3813173145835, -60.9331613601344 14.3934432913387, -60.9487902093573 14.4180627305796, -60.9635111888379 14.4196778949718, -60.9635194980039 14.4464868940676, -60.9635194980039 14.4464868940676, -60.9635560283537 14.494712322219, -60.9481521478172 14.5021425177764, -60.8353578994822 14.5022028012151, -60.8112940130122 14.5018410671057, -60.809450311322 14.5018129193233, -60.7960714347562 14.5016068185669, -60.7764146830794 14.5012981227375, -60.7764274161536 14.4364580688669, -60.7820335945691 14.4241241511816, -60.7828355461066 14.422466526412, -60.7982425835877 14.3922573689811, -60.800075906941 14.3885473579159, -60.8005634342255 14.3876437854993, -60.8012497730404 14.3865784978983, -60.8013452877012 14.3864430178602, -60.8018385968211 14.38578156557, -60.8025979758602 14.3848889635768, -60.8066181900541 14.3805070131968, -60.9045989862992 14.3814223143979, -60.9246351172788 14.3813173145835))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-60.9246351172788, 14.3813173145835], [-60.9331613601344, 14.3934432913387], [-60.9487902093573, 14.4180627305796], [-60.9635111888379, 14.4196778949718], [-60.9635194980039, 14.4464868940676], [-60.9635194980039, 14.4464868940676], [-60.9635560283537, 14.494712322219], [-60.9481521478172, 14.5021425177764], [-60.8353578994822, 14.5022028012151], [-60.8112940130122, 14.5018410671057], [-60.809450311322, 14.5018129193233], [-60.7960714347562, 14.5016068185669], [-60.7764146830794, 14.5012981227375], [-60.7764274161536, 14.4364580688669], [-60.7820335945691, 14.4241241511816], [-60.7828355461066, 14.422466526412], [-60.7982425835877, 14.3922573689811], [-60.800075906941, 14.3885473579159], [-60.8005634342255, 14.3876437854993], [-60.8012497730404, 14.3865784978983], [-60.8013452877012, 14.3864430178602], [-60.8018385968211, 14.38578156557], [-60.8025979758602, 14.3848889635768], [-60.8066181900541, 14.3805070131968], [-60.9045989862992, 14.3814223143979], [-60.9246351172788, 14.3813173145835]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;7943cbfa-2ed0-4d29-80f9-f1233f2ac862&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110314T065454_20121228T064655_ADS_000000_6313_d5ec66ff.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 3100564, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:33:57.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:59:03.731443Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:28:18.399007Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/14/DEM1_SAR_DTE_90_20110314T065454_20121228T064655_ADS_000000_6313_d5ec66ff&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;c1f16d66ba3aeec01aaf78720e3ae781&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:48.884416Z&#x27;}, {&#x27;Value&#x27;: &#x27;8ce64a51466716db56434e845d841b103d90eae289615a384ebe26b957ad9148&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:48.910685Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-14T06:54:56.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-14T06:54:57.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((169 10, 170 10, 170 11, 169 11, 169 10))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[169.0, 10.0], [170.0, 10.0], [170.0, 11.0], [169.0, 11.0], [169.0, 10.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;2ccf06bc-f6ce-41fc-8e9b-dd8c4149bd37&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110628T174128_20131129T175154_ADS_000000_KmQm_7e3eb1c.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 109507208, &#x27;OriginDate&#x27;: &#x27;2024-04-29T15:56:18.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-06T12:28:31.135927Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:41:45.891966Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/06/28/DEM1_SAR_DGE_30_20110628T174128_20131129T175154_ADS_000000_KmQm_7e3eb1c&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;6db4221fee6f08552544e84749b90526&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:44:39.937350Z&#x27;}, {&#x27;Value&#x27;: &#x27;b482a761ec5bf3e7d73f71e224e55c86de28809a1815f858df65e3b4f4d478cb&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:44:40.163127Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-06-28T17:41:28.000000Z&#x27;, &#x27;End&#x27;: &#x27;2013-11-29T17:51:54.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((1 46, 2 46, 2 47, 1 47, 1 46))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[1.0, 46.0], [2.0, 46.0], [2.0, 47.0], [1.0, 47.0], [1.0, 46.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;91b44e29-c20d-4eaa-83d1-20d1b5f00fda&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20230921T055028_20230921T055144_TRS_82315_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 369329201, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:33.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T07:58:27.002850Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:08:16.851383Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2023/09/21/RS02_SAR_SW_SCW_20230921T055028_20230921T055144_TRS_82315_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;63f7adabb05491e2ab0999d0864749d4&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:08:14.440300Z&#x27;}, {&#x27;Value&#x27;: &#x27;9388175631b4b5e8ba75a61381dbf29f30bc37a2ea59ff689b0cddabade4eb5a&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:08:15.213642Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-09-21T05:50:28.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-09-21T05:51:44.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((27.63 76.04, 39.61 79.83, 12.55 81.92, 7.96 77.55, 27.63 76.04))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[27.63, 76.04], [39.61, 79.83], [12.55, 81.92], [7.96, 77.55], [27.63, 76.04]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;94499c73-0099-4a60-b457-cb3fd3fda416&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110314T215550_20140316T103434_ADS_000000_E8Ab_8303cb54.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 109721935, &#x27;OriginDate&#x27;: &#x27;2024-05-01T20:38:30.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-06T12:41:43.376575Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T13:51:30.789785Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/03/14/DEM1_SAR_DGE_30_20110314T215550_20140316T103434_ADS_000000_E8Ab_8303cb54&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;865b5593deb53b87c0693b3f2e565d79&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:18.587001Z&#x27;}, {&#x27;Value&#x27;: &#x27;1d02cccd25104687060c415def52ba762f03501a8f9d2ac571a3397c288a9edb&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:18.775662Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-14T21:55:50.000000Z&#x27;, &#x27;End&#x27;: &#x27;2014-03-16T10:34:34.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((116 -9, 117 -9, 117 -8, 116 -8, 116 -9))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[116.0, -9.0], [117.0, -9.0], [117.0, -8.0], [116.0, -8.0], [116.0, -9.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;f3ab445e-4d16-4097-bd8b-5c567a0b4249&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20230814T090420_20230814T090422_TOU_049603_3dfa.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 278328334, &#x27;OriginDate&#x27;: &#x27;2025-03-12T17:11:04.776232Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-03-12T17:16:58.087808Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T08:52:46.286786Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2023/08/14/DM02_HRS_MS2_1D_20230814T090420_20230814T090422_TOU_049603_3dfa&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;c8d155c0c021885f59a569b0b987d880&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:52:44.215628Z&#x27;}, {&#x27;Value&#x27;: &#x27;09a4729e8bfb4a8af204458b43b16b68d7f40eb3c27e51b7610ce94cbd77eb76&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:52:44.714019Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-08-14T09:04:20.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-08-14T09:04:22.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((10.916911 46.0238, 10.917604 46.022461, 10.934414 45.97472, 10.872553 45.975246, 10.871423 45.961071, 10.863234 45.958553, 10.863271 45.953625, 10.793751 45.941967, 10.788003 45.957687, 10.785672 45.957302, 10.770282 45.994026, 10.803206 45.993809, 10.77942 46.063721, 10.896171 46.083183, 10.913991 46.032688, 10.916911 46.0238)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[10.916911, 46.0238], [10.917604, 46.022461], [10.934414, 45.97472], [10.872553, 45.975246], [10.871423, 45.961071], [10.863234, 45.958553], [10.863271, 45.953625], [10.793751, 45.941967], [10.788003, 45.957687], [10.785672, 45.957302], [10.770282, 45.994026], [10.803206, 45.993809], [10.77942, 46.063721], [10.896171, 46.083183], [10.913991, 46.032688], [10.916911, 46.0238]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;91ef4cc3-6e93-4032-b751-4e317597a502&#x27;, &#x27;Name&#x27;: &#x27;PH1A_PHR_MS___3_20180831T090544_20180831T090548_TOU_1234_75c0.DIMA&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 278056486, &#x27;OriginDate&#x27;: &#x27;2024-02-25T17:18:35.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-02-26T20:07:37.322971Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:13:45.729053Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2018/PHR_MS___3_E1F0/2018/08/31/PH1A_PHR_MS___3_20180831T090544_20180831T090548_TOU_1234_75c0&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;4888a348ca9c7d532aebd5b2b8eb7e78&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:44.835848Z&#x27;}, {&#x27;Value&#x27;: &#x27;fc0ea6405c5317f3bbbd725775b27dc2a765c8b6b5678e3a5edfbd3e294160b2&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:45.391306Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2018-08-31T09:05:44.000000Z&#x27;, &#x27;End&#x27;: &#x27;2018-08-31T09:05:48.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((27.760520533889 45.9111922674374, 27.7606970014761 45.911242585363, 27.761011956613 45.9113257157387, 27.7616481172655 45.9114804143217, 27.7619691046597 45.9115519294857, 27.7626164532856 45.9116831934603, 27.7629425925562 45.9117428972637, 27.7635993536318 45.9118503666062, 27.7639297502399 45.9118980952967, 27.7645941223646 45.9119814752477, 27.7649278700723 45.91201709792, 27.7655980309397 45.9120761597976, 27.7659342143008 45.9120995787532, 27.7666083256934 45.9121341605794, 27.7669460225699 45.9121453115948, 27.7676222354176 45.9121553185415, 27.7679605195148 45.9121541710448, 27.7686369789849 45.912139575694, 27.7689749223981 45.9121261328484, 27.7696497729809 45.9120869752672, 27.7699864487456 45.9120612739626, 27.7706578393666 45.9119976615927, 27.7709923240077 45.9119597723438, 27.7716584131135 45.9118718797051, 27.7719897891831 45.9118219064576, 27.7723202738766 45.9117689275486, 27.7786134924858 45.9106997500472, 27.7789419564694 45.9106407778154, 27.7792693028187 45.9105788383817, 27.7799193018142 45.9104431362557, 27.7802417315948 45.9103694200988, 27.7808810094669 45.9102103587291, 27.7811976383793 45.9101250680603, 27.7818244418773 45.9099430837626, 27.7821344015696 45.9098464525369, 27.7827470117339 45.9096420444933, 27.7830494521875 45.9095343377665, 27.7836461890694 45.9093080666542, 27.7839402809337 45.9091895798542, 27.7845195082196 45.9089420663004, 27.7848044450895 45.9088131244148, 27.78536457458 45.9085450472963, 27.7856395752094 45.9084060039796, 27.7861790711902 45.908118098552, 27.7864433816363 45.9079693351535, 27.7869607650859 45.9076623910339, 27.7872136607777 45.9075043155498, 27.7877075134269 45.9071791745456, 27.7879483011525 45.9070122204982, 27.7884172693755 45.9066697742933, 27.7886452891825 45.9064943995395, 27.7890880876979 45.906135587251, 27.7893027147021 45.9059522727253, 27.7909746234564 45.9045239215548, 27.7909131320565 45.9046707567483, 27.790825737461 45.904902063233, 27.7907427550457 45.9051341397277, 27.7822517937851 45.9302893957245, 27.7821792333359 45.9305175141419, 27.7821109410639 45.9307462130232, 27.7819914730822 45.9312057780941, 27.7819403378053 45.9314364893153, 27.7818553340232 45.9318994579404, 27.7818214943322 45.9321315592211, 27.7817711853706 45.9325966826401, 27.7817547332158 45.9328295479253, 27.7817392561273 45.933295571523, 27.7817402365635 45.9335285726717, 27.7817596344498 45.9339942393483, 27.7817780455077 45.934226747828, 27.781832267388 45.9346908013995, 27.7818680600717 45.9349221899815, 27.781956961006 45.9353833785652, 27.7820100394185 45.9356130230173, 27.7821333808839 45.9360701024094, 27.7822036024785 45.9362973831807, 27.7823610529997 45.9367491202174, 27.7824482289576 45.93697342411, 27.7826393649855 45.9374185999903, 27.7827432607189 45.9376393218152, 27.7829675677651 45.9380767354022, 27.7830879035438 45.9382932796128, 27.7833447775495 45.9387217506614, 27.7834812292497 45.9389335329621, 27.7837699782127 45.9393519053228, 27.7839221781862 45.9395583542466, 27.7842420240112 45.9399654989762, 27.7844095620728 45.9401660574287, 27.7847596426636 45.9405608758434, 27.7849420671932 45.9407550026075, 27.7853214387718 45.9411364292528, 27.7855182579294 45.9413236004512, 27.7859258975781 45.9416906059821, 27.7861365806282 45.9418703164925, 27.7865713890372 45.9422219104485, 27.786795367778 45.9423936752692, 27.7872561722158 45.9427289087586, 27.787399818279 45.9428280569446, 27.7871864627327 45.9430201208779, 27.7869856933044 45.9432108667736, 27.7865985557249 45.9435994035849, 27.7864123202974 45.943797061409, 27.7860547716117 45.9441988850856, 27.7858835809523 45.9444029132906, 27.7855566018582 45.9448169228869, 27.7854009255608 45.9450267624513, 27.7851054130905 45.9454518235908, 27.7849656782843 45.9456668995485, 27.7847024433344 45.9461018475308, 27.7845790335084 45.9463215705458, 27.7843487986092 45.9467652135337, 27.7842420525559 45.9469889815125, 27.7840454498796 45.9474401037944, 27.7839556607604 45.9476673035355, 27.783793230376 45.9481246688546, 27.7837206449115 45.9483546777273, 27.7835928332898 45.9488170326721, 27.7835376510768 45.9490492203223, 27.7834448098559 45.9495152977521, 27.783407182813 45.9497490278287, 27.7833495678178 45.9502175503514, 27.7833295997621 45.9504521822502, 27.7833073702892 45.9509218657171, 27.7833051166438 45.9511567563361, 27.7833183350094 45.9516263133696, 27.7833338026443 45.9518608188716, 27.7833824339984 45.9523289623849, 27.7834155812039 45.9525624399626, 27.7834994936106 45.9530278866934, 27.7835502302042 45.9532596963314, 27.7836691949889 45.9537211703596, 27.7837373825549 45.9539506765898, 27.783809912031 45.9541795279543, 27.7852778866506 45.9585367400949, 27.7853590659123 45.9587641227213, 27.7854445348677 45.9589906940462, 27.7856325693885 45.9594404368299, 27.7857350706445 45.9596634541388, 27.7859569009516 45.9601054748124, 27.7860761541026 45.9603243266698, 27.7863311732146 45.9607574133454, 27.7864668518912 45.9609714997139, 27.7867543617565 45.9613944649548, 27.7869060945146 45.961603198842, 27.787225307914 45.9620148829202, 27.7873926792478 45.9622176919895, 27.7877427219462 45.9626169660739, 27.7879252734234 45.9628132942159, 27.7883051865523 45.9631990634631, 27.7885024180666 45.9633883723219, 27.7889111607531 45.9637595788904, 27.7891225318923 45.963941349342, 27.7895589840995 45.9642969752897, 27.7897839156249 45.9644707088675, 27.7902468812294 45.9648097789559, 27.7904847566619 45.9649749992195, 27.7909729667162 45.9652965835811, 27.7912231340259 45.9654528374253, 27.7917352502489 45.9657560541271, 27.7919970236421 45.9659029130261, 27.7925316420818 45.9661869304876, 27.7928043038823 45.9663239916726, 27.7933599587729 45.9665880309536, 27.7936427613908 45.9667149185191, 27.794217929162 45.9669582554537, 27.7945100971453 45.9670746213906, 27.7951032006245 45.9672965885862, 27.7954039327883 45.9674021137379, 27.796013345512 45.9676021024008, 27.7963218171382 45.9676964973402, 27.7969458678269 45.9678739589525, 27.7972612329298 45.9679569647778, 27.7978982100827 45.9681114126054, 27.7982196037328 45.968182801651, 27.798867760324 45.9683138120796, 27.7991943010248 45.9683733885421, 27.7998518593051 45.9684806022417, 27.8001826514155 45.9685282027181, 27.8008478078012 45.9686113256313, 27.801181943997 45.9686468195679, 27.8018528740229 45.968705623717, 27.8021894377911 45.9687289137684, 27.802864301129 45.9687632378825, 27.803202369287 45.9687742601787, 27.803879314806 45.9687840101369, 27.8042179600396 45.968782734459, 27.8048951308885 45.9687678835481, 27.805233424301 45.9687543134111, 27.8059089630219 45.9687149023993, 27.8062459766881 45.9686890750424, 27.8119877417151 45.9682440671856, 27.8126597853527 45.9681801677811, 27.8129945892432 45.9681421359352, 27.8136613018908 45.9680539601391, 27.8139929820404 45.9680038464281, 27.8143237669149 45.9679507276371, 27.8206226422002 45.9668788901494, 27.8209513983011 45.9668197792785, 27.821279032664 45.9667577018832, 27.8219295910799 45.9666217266391, 27.822252292077 45.9665478754193, 27.8228920950216 45.9663885471011, 27.823208977609 45.9663031246387, 27.8238362703882 45.9661208802954, 27.824146465518 45.9660241209072, 27.8247595278283 45.9658194604352, 27.8250621848362 45.9657116295288, 27.8256593354917 45.9654851142974, 27.8259536244334 45.9653665076415, 27.8265332259841 45.9651187589487, 27.826818339914 45.9649897018602, 27.8273788031371 45.9647213992272, 27.827653960324 45.9645822456767, 27.8281937485882 45.9642941249797, 27.8284581946607 45.964145256619, 27.8289758281463 45.9638381080648, 27.8292288381622 45.9636799331785, 27.8297228979162 45.9633545991356, 27.8299637783511 45.9631875515185, 27.8304329101788 45.9628449242029, 27.8306610008271 45.962669461969, 27.831103919006 45.9623104809911, 27.8313185947905 45.9621270853149, 27.8317340855903 45.9617527351011, 27.8319347582741 45.9615619088962, 27.8323216832827 45.9611732159837, 27.8325078030798 45.9609754825214, 27.8328651023177 45.9605735127398, 27.8330361593969 45.960369414213, 27.8333628542155 45.9599552697596, 27.833518380095 45.9597453657934, 27.8338135758555 45.9593201822027, 27.8339531446821 45.959105048319, 27.8342160331922 45.9586699913542, 27.8343392629046 45.9584502173918, 27.8345691246307 45.9580064798361, 27.8346756780007 45.9577826683321, 27.8348718840237 45.957331466723, 27.8349614695749 45.9571042312599, 27.8351234833041 45.9566468025484, 27.8351958561045 45.9564167660706, 27.8353232347349 45.9559543642278, 27.8353781970615 45.955722157333, 27.8354705927729 45.9552560499149, 27.8355079946466 45.9550223091249, 27.8355651555437 45.9545537737909, 27.8355848951328 45.9543191398062, 27.8356066659202 45.9538494608185, 27.8356086898123 45.9536145767618, 27.8355950122046 45.9531450414663, 27.8355793155452 45.9529105511198, 27.8355302284124 45.9524424464198, 27.8354968549109 45.9522089924607, 27.8354124941561 45.9517436012814, 27.8353615359581 45.9515118235209, 27.8352421341306 45.9510504213037, 27.8351737315583 45.9508209549341, 27.835100989396 45.9505921453241, 27.8345293178972 45.9489000364601, 27.8346363311599 45.9489281703026, 27.8352731939086 45.9490823969152, 27.8355945257533 45.9491536743985, 27.8362425496121 45.9492844599467, 27.8365690194312 45.9493439231679, 27.8372264270149 45.9494509089386, 27.8375571393618 45.9494983948053, 27.8382221274997 45.9495812873663, 27.8385561752693 45.9496166656393, 27.8392269199583 45.9496752376449, 27.8395633868801 45.949698411296, 27.8402380483023 45.9497325021124, 27.8405760114598 45.949743407591, 27.8412527390366 45.949752923737, 27.8415912714038 45.9497515311447, 27.8422682088852 45.9497364465486, 27.8426063818757 45.9497227597211, 27.843281672441 45.9496831157923, 27.8433673731113 45.9496765161099, 27.8434871454268 45.9498795313324, 27.8436230195911 45.9500935390746, 27.8439109124055 45.9505163384955, 27.8440628324928 45.9507249852451, 27.8443824120041 45.951136486714, 27.8445499619941 45.9513392003733, 27.8449003529596 45.9517382755569, 27.8450830739291 45.9519345002775, 27.8454633165258 45.9523200548804, 27.8456607079026 45.95250925259, 27.8460697603516 45.9528802293582, 27.8462812812843 45.9530618812373, 27.8467180226982 45.953417262859, 27.8469430935364 45.9535908707661, 27.8474063269934 45.9539296826699, 27.847644330875 45.9540947705091, 27.8481327866956 45.9544160835385, 27.8483830712373 45.9545721985675, 27.8488954104608 45.9548751315309, 27.8491572895467 45.9550218456045, 27.8496921076121 45.9553055677019, 27.8499648632752 45.9554424784485, 27.8505206938608 45.955706211546, 27.8508035782529 45.9558329434726, 27.8513788973131 45.9560759642479, 27.8516711347574 45.9561921697722, 27.8522643646965 45.9564138116968, 27.8525651538167 45.9565191721021, 27.8531746678263 45.9567188272758, 27.8534831837477 45.9568130535871, 27.8541073102708 45.956990174407, 27.8544227068857 45.9570730081847, 27.85505973421 45.9572271088508, 27.8553811465021 45.9572983229013, 27.8560293274642 45.9574289807517, 27.8563558738853 45.9574883797518, 27.8570134306686 45.9575952364237, 27.857344215562 45.9576426574571, 27.8580093445859 45.9577254198724, 27.8583434606471 45.9577607328778, 27.8590143375215 45.9578191740478, 27.8593508682925 45.9578422821759, 27.8600256528389 45.9578762418258, 27.8603636752277 45.9578870817058, 27.8605643377126 45.9578898645273, 27.8604195212771 45.9580073342743, 27.860204954432 45.9581907864249, 27.8597896768933 45.9585652432945, 27.8595891085508 45.9587561197493, 27.8592023877744 45.9591449071926, 27.8590163679226 45.9593426850025, 27.8586592644404 45.9597447378277, 27.8584883032572 45.9599488751163, 27.8581617965513 45.9603630917477, 27.8580063630031 45.9605730291941, 27.8577113488105 45.9609982746912, 27.8575718693627 45.961213437061, 27.8573091572188 45.9616485462161, 27.8571860146619 45.9618683439358, 27.8569563256677 45.9623121244674, 27.856849858063 45.9625359552386, 27.8566538228957 45.9629871910595, 27.8565643226427 45.9632144415082, 27.8564024798183 45.9636718960504, 27.856330192847 45.9639019434065, 27.856202987229 45.9643643630101, 27.856148112319 45.9645965768135, 27.856055893886 45.9650626941608, 27.8560185821146 45.9652964379883, 27.8559616049862 45.965764975576, 27.8559419593071 45.9659996087851, 27.8559203810327 45.9664692824254, 27.8559184559861 45.9667041619098, 27.8559323370983 45.9671736842483, 27.8559481386541 45.967408166201, 27.8559974424872 45.9678762502441, 27.8560309280206 45.9681096919215, 27.856115520796 45.9685750545701, 27.8561665991973 45.9688068160549, 27.8562862503753 45.969268181617, 27.8563547822921 45.9694976275723, 27.8564276566381 45.9697264156515, 27.8579022268497 45.9740823617568, 27.8579837518518 45.9743096751063, 27.8580695668294 45.9745361741869, 27.8582582942814 45.9749857606671, 27.8583611422092 45.9752086939711, 27.8585836657966 45.9756505350423, 27.8587032653185 45.9758692913638, 27.8589589761579 45.9763021756286, 27.8590949999543 45.9765161551917, 27.8593831980979 45.9769388957682, 27.8595352737779 45.9771475118728, 27.8598551701175 45.9775589496473, 27.8600228812347 45.9777616302792, 27.86037359966 45.9781606370931, 27.8605564868495 45.9783568264945, 27.8609370666389 45.9787423082382, 27.861134628873 45.9789314684331, 27.8615440273243 45.9793023680528, 27.8617557232833 45.9794839803246, 27.8621928185598 45.979839280719, 27.8624180681132 45.9800128470342, 27.8628816623237 45.980351573855, 27.8631198481192 45.9805166182317, 27.8636086705923 45.9808378425535, 27.8638591397478 45.9809939123684, 27.864371850521 45.981296753245, 27.864633916414 45.9814434204767, 27.8651691099023 45.9817270473575, 27.8654420540533 45.9818639097625, 27.8659982629079 45.9821275447762, 27.8662813369514 45.982254226994, 27.8668570360873 45.9824971470861, 27.8671494638259 45.9826133016706, 27.8677430746063 45.9828348405893, 27.8680440541415 45.9829401489633, 27.868653948709 45.9831396990893, 27.8689626546433 45.9832338724203, 27.8695871603972 45.9834108864389, 27.869902746101 45.9834936664326, 27.8705401502899 45.9836476588373, 27.8708617502279 45.9837188184474, 27.8715103046521 45.9838493668725, 27.871837036761 45.9839087109251, 27.872494962578 45.9840154573077, 27.8728259306909 45.9840628230372, 27.8734914233073 45.9841454746017, 27.8738257196166 45.9841807320983, 27.8744969536442 45.9842390621602, 27.8748336611971 45.984262114727, 27.8755087954752 45.9842959633159, 27.8758469906942 45.9843067477345, 27.8765241733433 45.9843160220336, 27.8768629285652 45.9843145087375, 27.8795489793457 45.9842989767126, 27.8802263529738 45.9842836339959, 27.8805647387478 45.9842698185104, 27.8812404440091 45.9842299182466, 27.8815775317963 45.9842038471542, 27.8822497152644 45.9841394988229, 27.8825845804584 45.984101243653, 27.8832513984036 45.9840126237937, 27.8835831225121 45.9839622894958, 27.8839139469921 45.9839089508783, 27.8902134948577 45.9828329305095, 27.8905422817793 45.9827736014849, 27.890869942584 45.982711306847, 27.8915205363578 45.9825749009097, 27.8918432462598 45.9825008363868, 27.8924830494526 45.9823410858427, 27.8927999233842 45.9822554546019, 27.8934271813045 45.9820727976575, 27.8937373502421 45.9819758345884, 27.8943503426795 45.981770772273, 27.8946529560314 45.9816627433419, 27.8952500019964 45.981435838126, 27.8954131748283 45.9813699550624, 27.8973540838308 45.9804132877167, 27.8990151637997 45.9792294084052, 27.9003407876989 45.9778579793603, 27.9012865767252 45.9763449424487, 27.9018208843557 45.974740978915, 27.9019258524567 45.9730998108149, 27.9015980045814 45.9714764011873, 27.8972898947237 45.9587792243321, 27.896540620955 45.9572278819613, 27.8953947620127 45.9558005871461, 27.8938907117009 45.9545451278249, 27.8920788462478 45.9535035356834, 27.8900198364953 45.9527106803485, 27.8877826172004 45.9521931033884, 27.8854420813009 45.951968130932, 27.8852546362552 45.9519621637514, 27.8845778558065 45.9519529328124, 27.8842771173723 45.9519542935863, 27.8844095634337 45.951862299839, 27.8848782799678 45.9515194402348, 27.8851061601096 45.9513438652759, 27.885548651846 45.9509846658408, 27.8857631118406 45.9508011645073, 27.8861781662199 45.9504266102663, 27.8863786184229 45.950235685761, 27.8867650982318 45.9498468038092, 27.8869509934623 45.9496489796729, 27.8873078399428 45.949246836358, 27.8874786689862 45.9490426550316, 27.8878049047318 45.9486283530268, 27.8879601997318 45.9484183743623, 27.8882549313639 45.9479930496325, 27.8883942671008 45.9477778493563, 27.8886566877003 45.9473426680513, 27.8887796827522 45.9471228361838, 27.8890090740691 45.9466789914262, 27.8891153918513 45.9464551306629, 27.8893111262556 45.9460038392856, 27.8894004759379 45.9457765633436, 27.8895620181336 45.9453190625395, 27.8896341554306 45.9450889944736, 27.889761063904 45.9446265384143, 27.8898157917384 45.9443943089085, 27.8899077199589 45.9439281652947, 27.8899448889941 45.9436944109325, 27.8900015863472 45.9432258575233, 27.8900210953896 45.9429912190419, 27.8900424078498 45.9425215401484, 27.8900442041186 45.9422866606824, 27.8900300746564 45.9418171436501, 27.8900141539206 45.9415826669688, 27.8899646226433 45.9411145986471, 27.8899310292259 45.9408811673898, 27.8898462332533 45.9404158306083, 27.8897950599022 45.9401840845235, 27.8896752329743 45.9397227545685, 27.8896066206006 45.9394933287615, 27.8895336700479 45.9392645619236, 27.888058019814 45.9349090020796, 27.8879764586397 45.9346817077821, 27.8878906126874 45.9344552286367, 27.8877018427892 45.9340056856791, 27.8875989836556 45.9337827758814, 27.8873764583097 45.9333409851015, 27.8872568684657 45.9331222554706, 27.8870011986318 45.9326894274407, 27.8868652063577 45.9324754773194, 27.8865770937433 45.9320527980155, 27.8864250722237 45.9318442136294, 27.8861053073467 45.9314328411772, 27.8859376736427 45.9312301940298, 27.8855871336565 45.9308312555365, 27.8854043475589 45.9306351008455, 27.8850239938398 45.9302496893143, 27.8848265566046 45.930060564492, 27.8844174321122 45.9296897358334, 27.8842058850846 45.9295081590163, 27.8837691114963 45.9291529291569, 27.8835440346243 45.9289793977881, 27.8830808092604 45.9286407398938, 27.8828428195048 45.9284757293624, 27.8823544120406 45.9281545711733, 27.8821041616826 45.9279985335139, 27.881591910675 45.9276957548107, 27.8813300855293 45.9275491174674, 27.88079539474 45.9272655476607, 27.8805227122759 45.9271287123179, 27.8799670468392 45.926865128186, 27.8796842542164 45.9267384696701, 27.8791091366131 45.9264955932281, 27.8788170086356 45.9263794584828, 27.8782240145413 45.9261579550155, 27.8779233515383 45.926052662153, 27.877314105499 45.9258531383903, 27.8770057311342 45.9257589758219, 27.8763819021324 45.9255819782841, 27.876066661152 45.9254992039314, 27.875429958036 45.925345217433, 27.8751087139582 45.9252740580231, 27.8744608807701 45.9251435043478, 27.8741345135241 45.9250841547936, 27.8734773247375 45.9249773915426, 27.8731467282582 45.9249300144095, 27.8724819839189 45.9248473340221, 27.8721480637033 45.9248120590842, 27.8714775845128 45.9247536880393, 27.8711412551452 45.9247306119243, 27.8704668774922 45.9246967101216, 27.8701290601448 45.9246858960466, 27.8694526310705 45.9246765563682, 27.8691142509857 45.9246780339667, 27.8684376231534 45.9246932820242, 27.8680996071157 45.9247070472652, 27.8674246337354 45.9247468413283, 27.8670879075385 45.9247728565269, 27.866416437309 45.9248370876378, 27.8660819232257 45.9248752815582, 27.8655401755929 45.9249472507678, 27.8655117838913 45.9248856446562, 27.8652894930033 45.9244437972655, 27.8651700209113 45.9242250375731, 27.864914587466 45.9237921459486, 27.8647787137474 45.9235781623159, 27.864490838804 45.9231554126069, 27.8643389363184 45.9229467913514, 27.8640194097438 45.9225353418771, 27.8638518952266 45.9223326546035, 27.8635015935215 45.9219336326825, 27.8633189264367 45.9217374347187, 27.8629388103257 45.9213519335839, 27.8627414916037 45.9211627624609, 27.8623326033936 45.9207918382666, 27.8621211740549 45.9206102122479, 27.8616846347781 45.9202548811845, 27.8614596744488 45.9200812978482, 27.8609966807841 45.919742533359, 27.8607588061056 45.9195774682367, 27.8602706270944 45.919256198354, 27.8600204900332 45.91910010363, 27.8595084636051 45.9187972084398, 27.8592467496659 45.9186505117146, 27.8587122789723 45.918366820949, 27.8584397053201 45.9182299240697, 27.8570675123971 45.9175781265108, 27.8565120764323 45.9173144094531, 27.8562293970846 45.917187683443, 27.8556545029546 45.916944670042, 27.8553624850977 45.9168284658783, 27.8547697078615 45.9166068217917, 27.8544691515231 45.916501457777, 27.8538601151374 45.9163017901216, 27.8535518436896 45.9162075548619, 27.8529282165629 45.916030410552, 27.8526130744704 45.9159475621683, 27.8519765648953 45.9157934264195, 27.8516554154056 45.9157221918416, 27.8510077668997 45.9155914868477, 27.8506814896835 45.9155320611945, 27.8500244762106 45.9154251449702, 27.8496939649563 45.9153776910156, 27.8490293860868 45.91529485642, 27.8486955460586 45.9152595041483, 27.8482148223072 45.9152175325583, 27.8485124548845 45.9148499270964, 27.8488388267112 45.9144357332501, 27.8489941972722 45.9142258054666, 27.8492890949634 45.9138005760321, 27.8494285211417 45.9135854201367, 27.849691137323 45.9131503209988, 27.8498142374474 45.9129305268903, 27.8500438533277 45.9124867509504, 27.8501502905242 45.912262921221, 27.8503462778575 45.9118116851189, 27.850435760967 45.9115844334007, 27.8505975837587 45.911126974184, 27.8506698681288 45.9108969234657, 27.8507970840953 45.9104344951875, 27.8508519722441 45.9102022761058, 27.8509442340086 45.9097361463925, 27.8509815761588 45.9095023955024, 27.85103863219 45.9090338420752, 27.8510583266723 45.9087992001048, 27.851080021959 45.9083295072781, 27.8510820154831 45.9080946173719, 27.8510682919443 45.9076250725273, 27.8510525797374 45.9073905784834, 27.8510034763659 45.9069224685485, 27.8509701021784 45.9066890130541, 27.8508857549186 45.9062236209704, 27.8508348108967 45.9059918438411, 27.8507154522576 45.9055304450512, 27.8506470786829 45.9053009814776, 27.8505743692155 45.9050721752053, 27.8491033654419 45.9007158305666, 27.8490220497031 45.9004884935309, 27.8489364513048 45.9002619700067, 27.8487481848218 45.8998123317635, 27.8486455813767 45.8995893710917, 27.8477531710126 45.8977038643442, 27.8475311828181 45.8972619624491, 27.8474118654221 45.8970431740263, 27.8471567478542 45.8966102220234, 27.8470210352086 45.8963962067632, 27.8467334884599 45.8959733909673, 27.8465817529829 45.8957647352743, 27.8462625660192 45.8953532141848, 27.8460952239881 45.8951504897583, 27.8457452723807 45.8947513908925, 27.8455627827868 45.8945551531624, 27.8451830262972 45.894169569961, 27.8449858895842 45.8939803565676, 27.8445773695387 45.8936093454153, 27.8443661262286 45.8934276747382, 27.8439299626483 45.8930722520616, 27.8437051918574 45.8928986218013, 27.8432425803905 45.8925597612942, 27.8430048982412 45.8923946471113, 27.8425171068851 45.8920732770716, 27.8422671648165 45.8919171312849, 27.8417555304362 45.8916141320714, 27.841494013419 45.8914673824217, 27.8409599380941 45.8911835840531, 27.8406875627542 45.8910466325326, 27.8401325099289 45.8907828124112, 27.8398500225853 45.890656034165, 27.839275513069 45.8904129149552, 27.8389836876904 45.8902966572553, 27.8383912954912 45.8900749049059, 27.8380909315786 45.8899694862013, 27.8374822795979 45.8897697081253, 27.8371741999968 45.8896754171724, 27.8365509555884 45.889498160586, 27.8362360042384 45.8894152556581, 27.8355998746538 45.8892610060865, 27.8352789142807 45.8891897142687, 27.8346316419921 45.8890588942162, 27.8343055517491 45.888999410784, 27.8336489096963 45.8888923785817, 27.8333185827604 45.8888448664674, 27.8326543694921 45.888761915291, 27.8323207106229 45.8887265046384, 27.8316507453898 45.888667861709, 27.8313146684569 45.8886446495175, 27.8306407862398 45.8886104754793, 27.8303032117246 45.8885995253386, 27.8296272582111 45.8885899138194, 27.8292891106917 45.8885912557357, 27.8286129372419 45.8886062330914, 27.8282751428665 45.8886198634053, 27.8276006014488 45.8886593886469, 27.8272640854047 45.8886852700429, 27.8265930235358 45.8887492349487, 27.8262587075208 45.8887872965574, 27.8255929632172 45.8888755259677, 27.8252617629209 45.888925663559, 27.8249314552479 45.8889788042728, 27.8186414282763 45.890050671781, 27.8183131207529 45.890109764024, 27.817985931091 45.8901718210272, 27.8173362471031 45.8903077505757, 27.8170139752817 45.8903815765748, 27.8163750134217 45.890540849919, 27.8160585422246 45.8906262427227, 27.8154320528081 45.8908084236454, 27.8151222491678 45.8909051493772, 27.8145099484259 45.891109738909, 27.8142076610531 45.8912175326467, 27.8008004071895 45.8961417267248, 27.8001944681366 45.8963710304278, 27.7998958947269 45.8964911965523, 27.799307961691 45.8967423877422, 27.7990188096134 45.8968733241582, 27.7984505426191 45.8971456938204, 27.7981716283216 45.897287030941, 27.7976246319867 45.8975798102617, 27.7973567430733 45.8977311491308, 27.797210424596 45.8978183417556, 27.7972886014625 45.8976542807761, 27.7974849948005 45.8972031266141, 27.7975746851586 45.8969759114315, 27.7977369306559 45.8965185163671, 27.7978094303377 45.8962884932441, 27.7979370845497 45.8958261111566, 27.7979921954821 45.8955939106546, 27.7980849098295 45.895127809044, 27.7981224816239 45.8948940676674, 27.7981800033334 45.8944255241783, 27.7981999336901 45.8941908826294, 27.798222106473 45.8937211815505, 27.7982243414548 45.8934862829732, 27.7982111059201 45.8930167117089, 27.7981956400921 45.8927821999255, 27.7981470338941 45.8923140454767, 27.7981139103309 45.8920805632234, 27.797953098612 45.8911424858179, 27.7978692607512 45.8906770307156, 27.7978185732683 45.8904452175965, 27.7976997310351 45.8899837379172, 27.7976316171503 45.8897542294719, 27.7975591680708 45.8895253761212, 27.7946274358335 45.8808107631245, 27.7945463979761 45.8805833723836, 27.7944610782927 45.8803567929153, 27.7942733723844 45.8799070338654, 27.794171050607 45.8796840083724, 27.7939496099594 45.8792419710627, 27.7938305670857 45.879023110682, 27.7935759996853 45.8785900063622, 27.7934405624965 45.8783759107958, 27.7931535670293 45.8779529262007, 27.7930021071889 45.8777441820735, 27.7926834711118 45.8773324761671, 27.7925164041421 45.8771296554213, 27.7921670015164 45.8767303562266, 27.7919847856554 45.8765340145563, 27.7846144452963 45.8688845348811, 27.7842353528127 45.8684987042012, 27.7840385474411 45.8683093629286, 27.7836306883027 45.8679380879148, 27.7834197743328 45.8677562813465, 27.7829842667544 45.8674005791523, 27.7827598224009 45.8672268053617, 27.7822978602346 45.8668876504472, 27.7820605007264 45.8667223854883, 27.7815733501925 45.8664007069587, 27.7813237260857 45.8662444035639, 27.780812722296 45.8659410826242, 27.780551517691 45.8657941689663, 27.7800180609966 45.8655100365155, 27.7797459916646 45.8653729150363, 27.7791915438217 45.865108749395, 27.7789093552443 45.8649817957055, 27.7783354354026 45.864738320483, 27.7780439007312 45.8646218823358, 27.777452081289 45.8643997644579, 27.7771519992293 45.8642941607969, 27.7765439015169 45.8640940086767, 27.7762360941434 45.8639995287648, 27.7756133840026 45.863821890645, 27.7752986945102 45.8637387932734, 27.7746630777308 45.863584155724, 27.7743423681291 45.8635126685048, 27.7736955857799 45.8633814550929, 27.773369734536 45.863321773837, 27.7727135582134 45.8632143439705, 27.7723834578508 45.8631666321522, 27.7717196848339 45.8630832800971, 27.7713862394924 45.8630476684071, 27.7707166878278 45.8629886224821, 27.7703808107928 45.8629652084703, 27.7697073143248 45.8629306304231, 27.7693699255309 45.8629194782321, 27.7686943288987 45.8629094627973, 27.7683563524159 45.8629106029866, 27.7676805059991 45.8629251776259, 27.7673428675077 45.8629386070885, 27.7666686223799 45.862977731916, 27.7663322466406 45.8630034138865, 27.7656614495097 45.8630669817767, 27.7653272578362 45.8631048459316, 27.7646617459903 45.8631926828125, 27.7643306537318 45.8632426254625, 27.7640004499823 45.8632955719303, 27.7606483280067 45.8638650523668, 27.7606038125693 45.8948138266689, 27.7604686584115 45.9047246849087, 27.760520533889 45.9111922674374))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[27.760520533889, 45.9111922674374], [27.7606970014761, 45.911242585363], [27.761011956613, 45.9113257157387], [27.7616481172655, 45.9114804143217], [27.7619691046597, 45.9115519294857], [27.7626164532856, 45.9116831934603], [27.7629425925562, 45.9117428972637], [27.7635993536318, 45.9118503666062], [27.7639297502399, 45.9118980952967], [27.7645941223646, 45.9119814752477], [27.7649278700723, 45.91201709792], [27.7655980309397, 45.9120761597976], [27.7659342143008, 45.9120995787532], [27.7666083256934, 45.9121341605794], [27.7669460225699, 45.9121453115948], [27.7676222354176, 45.9121553185415], [27.7679605195148, 45.9121541710448], [27.7686369789849, 45.912139575694], [27.7689749223981, 45.9121261328484], [27.7696497729809, 45.9120869752672], [27.7699864487456, 45.9120612739626], [27.7706578393666, 45.9119976615927], [27.7709923240077, 45.9119597723438], [27.7716584131135, 45.9118718797051], [27.7719897891831, 45.9118219064576], [27.7723202738766, 45.9117689275486], [27.7786134924858, 45.9106997500472], [27.7789419564694, 45.9106407778154], [27.7792693028187, 45.9105788383817], [27.7799193018142, 45.9104431362557], [27.7802417315948, 45.9103694200988], [27.7808810094669, 45.9102103587291], [27.7811976383793, 45.9101250680603], [27.7818244418773, 45.9099430837626], [27.7821344015696, 45.9098464525369], [27.7827470117339, 45.9096420444933], [27.7830494521875, 45.9095343377665], [27.7836461890694, 45.9093080666542], [27.7839402809337, 45.9091895798542], [27.7845195082196, 45.9089420663004], [27.7848044450895, 45.9088131244148], [27.78536457458, 45.9085450472963], [27.7856395752094, 45.9084060039796], [27.7861790711902, 45.908118098552], [27.7864433816363, 45.9079693351535], [27.7869607650859, 45.9076623910339], [27.7872136607777, 45.9075043155498], [27.7877075134269, 45.9071791745456], [27.7879483011525, 45.9070122204982], [27.7884172693755, 45.9066697742933], [27.7886452891825, 45.9064943995395], [27.7890880876979, 45.906135587251], [27.7893027147021, 45.9059522727253], [27.7909746234564, 45.9045239215548], [27.7909131320565, 45.9046707567483], [27.790825737461, 45.904902063233], [27.7907427550457, 45.9051341397277], [27.7822517937851, 45.9302893957245], [27.7821792333359, 45.9305175141419], [27.7821109410639, 45.9307462130232], [27.7819914730822, 45.9312057780941], [27.7819403378053, 45.9314364893153], [27.7818553340232, 45.9318994579404], [27.7818214943322, 45.9321315592211], [27.7817711853706, 45.9325966826401], [27.7817547332158, 45.9328295479253], [27.7817392561273, 45.933295571523], [27.7817402365635, 45.9335285726717], [27.7817596344498, 45.9339942393483], [27.7817780455077, 45.934226747828], [27.781832267388, 45.9346908013995], [27.7818680600717, 45.9349221899815], [27.781956961006, 45.9353833785652], [27.7820100394185, 45.9356130230173], [27.7821333808839, 45.9360701024094], [27.7822036024785, 45.9362973831807], [27.7823610529997, 45.9367491202174], [27.7824482289576, 45.93697342411], [27.7826393649855, 45.9374185999903], [27.7827432607189, 45.9376393218152], [27.7829675677651, 45.9380767354022], [27.7830879035438, 45.9382932796128], [27.7833447775495, 45.9387217506614], [27.7834812292497, 45.9389335329621], [27.7837699782127, 45.9393519053228], [27.7839221781862, 45.9395583542466], [27.7842420240112, 45.9399654989762], [27.7844095620728, 45.9401660574287], [27.7847596426636, 45.9405608758434], [27.7849420671932, 45.9407550026075], [27.7853214387718, 45.9411364292528], [27.7855182579294, 45.9413236004512], [27.7859258975781, 45.9416906059821], [27.7861365806282, 45.9418703164925], [27.7865713890372, 45.9422219104485], [27.786795367778, 45.9423936752692], [27.7872561722158, 45.9427289087586], [27.787399818279, 45.9428280569446], [27.7871864627327, 45.9430201208779], [27.7869856933044, 45.9432108667736], [27.7865985557249, 45.9435994035849], [27.7864123202974, 45.943797061409], [27.7860547716117, 45.9441988850856], [27.7858835809523, 45.9444029132906], [27.7855566018582, 45.9448169228869], [27.7854009255608, 45.9450267624513], [27.7851054130905, 45.9454518235908], [27.7849656782843, 45.9456668995485], [27.7847024433344, 45.9461018475308], [27.7845790335084, 45.9463215705458], [27.7843487986092, 45.9467652135337], [27.7842420525559, 45.9469889815125], [27.7840454498796, 45.9474401037944], [27.7839556607604, 45.9476673035355], [27.783793230376, 45.9481246688546], [27.7837206449115, 45.9483546777273], [27.7835928332898, 45.9488170326721], [27.7835376510768, 45.9490492203223], [27.7834448098559, 45.9495152977521], [27.783407182813, 45.9497490278287], [27.7833495678178, 45.9502175503514], [27.7833295997621, 45.9504521822502], [27.7833073702892, 45.9509218657171], [27.7833051166438, 45.9511567563361], [27.7833183350094, 45.9516263133696], [27.7833338026443, 45.9518608188716], [27.7833824339984, 45.9523289623849], [27.7834155812039, 45.9525624399626], [27.7834994936106, 45.9530278866934], [27.7835502302042, 45.9532596963314], [27.7836691949889, 45.9537211703596], [27.7837373825549, 45.9539506765898], [27.783809912031, 45.9541795279543], [27.7852778866506, 45.9585367400949], [27.7853590659123, 45.9587641227213], [27.7854445348677, 45.9589906940462], [27.7856325693885, 45.9594404368299], [27.7857350706445, 45.9596634541388], [27.7859569009516, 45.9601054748124], [27.7860761541026, 45.9603243266698], [27.7863311732146, 45.9607574133454], [27.7864668518912, 45.9609714997139], [27.7867543617565, 45.9613944649548], [27.7869060945146, 45.961603198842], [27.787225307914, 45.9620148829202], [27.7873926792478, 45.9622176919895], [27.7877427219462, 45.9626169660739], [27.7879252734234, 45.9628132942159], [27.7883051865523, 45.9631990634631], [27.7885024180666, 45.9633883723219], [27.7889111607531, 45.9637595788904], [27.7891225318923, 45.963941349342], [27.7895589840995, 45.9642969752897], [27.7897839156249, 45.9644707088675], [27.7902468812294, 45.9648097789559], [27.7904847566619, 45.9649749992195], [27.7909729667162, 45.9652965835811], [27.7912231340259, 45.9654528374253], [27.7917352502489, 45.9657560541271], [27.7919970236421, 45.9659029130261], [27.7925316420818, 45.9661869304876], [27.7928043038823, 45.9663239916726], [27.7933599587729, 45.9665880309536], [27.7936427613908, 45.9667149185191], [27.794217929162, 45.9669582554537], [27.7945100971453, 45.9670746213906], [27.7951032006245, 45.9672965885862], [27.7954039327883, 45.9674021137379], [27.796013345512, 45.9676021024008], [27.7963218171382, 45.9676964973402], [27.7969458678269, 45.9678739589525], [27.7972612329298, 45.9679569647778], [27.7978982100827, 45.9681114126054], [27.7982196037328, 45.968182801651], [27.798867760324, 45.9683138120796], [27.7991943010248, 45.9683733885421], [27.7998518593051, 45.9684806022417], [27.8001826514155, 45.9685282027181], [27.8008478078012, 45.9686113256313], [27.801181943997, 45.9686468195679], [27.8018528740229, 45.968705623717], [27.8021894377911, 45.9687289137684], [27.802864301129, 45.9687632378825], [27.803202369287, 45.9687742601787], [27.803879314806, 45.9687840101369], [27.8042179600396, 45.968782734459], [27.8048951308885, 45.9687678835481], [27.805233424301, 45.9687543134111], [27.8059089630219, 45.9687149023993], [27.8062459766881, 45.9686890750424], [27.8119877417151, 45.9682440671856], [27.8126597853527, 45.9681801677811], [27.8129945892432, 45.9681421359352], [27.8136613018908, 45.9680539601391], [27.8139929820404, 45.9680038464281], [27.8143237669149, 45.9679507276371], [27.8206226422002, 45.9668788901494], [27.8209513983011, 45.9668197792785], [27.821279032664, 45.9667577018832], [27.8219295910799, 45.9666217266391], [27.822252292077, 45.9665478754193], [27.8228920950216, 45.9663885471011], [27.823208977609, 45.9663031246387], [27.8238362703882, 45.9661208802954], [27.824146465518, 45.9660241209072], [27.8247595278283, 45.9658194604352], [27.8250621848362, 45.9657116295288], [27.8256593354917, 45.9654851142974], [27.8259536244334, 45.9653665076415], [27.8265332259841, 45.9651187589487], [27.826818339914, 45.9649897018602], [27.8273788031371, 45.9647213992272], [27.827653960324, 45.9645822456767], [27.8281937485882, 45.9642941249797], [27.8284581946607, 45.964145256619], [27.8289758281463, 45.9638381080648], [27.8292288381622, 45.9636799331785], [27.8297228979162, 45.9633545991356], [27.8299637783511, 45.9631875515185], [27.8304329101788, 45.9628449242029], [27.8306610008271, 45.962669461969], [27.831103919006, 45.9623104809911], [27.8313185947905, 45.9621270853149], [27.8317340855903, 45.9617527351011], [27.8319347582741, 45.9615619088962], [27.8323216832827, 45.9611732159837], [27.8325078030798, 45.9609754825214], [27.8328651023177, 45.9605735127398], [27.8330361593969, 45.960369414213], [27.8333628542155, 45.9599552697596], [27.833518380095, 45.9597453657934], [27.8338135758555, 45.9593201822027], [27.8339531446821, 45.959105048319], [27.8342160331922, 45.9586699913542], [27.8343392629046, 45.9584502173918], [27.8345691246307, 45.9580064798361], [27.8346756780007, 45.9577826683321], [27.8348718840237, 45.957331466723], [27.8349614695749, 45.9571042312599], [27.8351234833041, 45.9566468025484], [27.8351958561045, 45.9564167660706], [27.8353232347349, 45.9559543642278], [27.8353781970615, 45.955722157333], [27.8354705927729, 45.9552560499149], [27.8355079946466, 45.9550223091249], [27.8355651555437, 45.9545537737909], [27.8355848951328, 45.9543191398062], [27.8356066659202, 45.9538494608185], [27.8356086898123, 45.9536145767618], [27.8355950122046, 45.9531450414663], [27.8355793155452, 45.9529105511198], [27.8355302284124, 45.9524424464198], [27.8354968549109, 45.9522089924607], [27.8354124941561, 45.9517436012814], [27.8353615359581, 45.9515118235209], [27.8352421341306, 45.9510504213037], [27.8351737315583, 45.9508209549341], [27.835100989396, 45.9505921453241], [27.8345293178972, 45.9489000364601], [27.8346363311599, 45.9489281703026], [27.8352731939086, 45.9490823969152], [27.8355945257533, 45.9491536743985], [27.8362425496121, 45.9492844599467], [27.8365690194312, 45.9493439231679], [27.8372264270149, 45.9494509089386], [27.8375571393618, 45.9494983948053], [27.8382221274997, 45.9495812873663], [27.8385561752693, 45.9496166656393], [27.8392269199583, 45.9496752376449], [27.8395633868801, 45.949698411296], [27.8402380483023, 45.9497325021124], [27.8405760114598, 45.949743407591], [27.8412527390366, 45.949752923737], [27.8415912714038, 45.9497515311447], [27.8422682088852, 45.9497364465486], [27.8426063818757, 45.9497227597211], [27.843281672441, 45.9496831157923], [27.8433673731113, 45.9496765161099], [27.8434871454268, 45.9498795313324], [27.8436230195911, 45.9500935390746], [27.8439109124055, 45.9505163384955], [27.8440628324928, 45.9507249852451], [27.8443824120041, 45.951136486714], [27.8445499619941, 45.9513392003733], [27.8449003529596, 45.9517382755569], [27.8450830739291, 45.9519345002775], [27.8454633165258, 45.9523200548804], [27.8456607079026, 45.95250925259], [27.8460697603516, 45.9528802293582], [27.8462812812843, 45.9530618812373], [27.8467180226982, 45.953417262859], [27.8469430935364, 45.9535908707661], [27.8474063269934, 45.9539296826699], [27.847644330875, 45.9540947705091], [27.8481327866956, 45.9544160835385], [27.8483830712373, 45.9545721985675], [27.8488954104608, 45.9548751315309], [27.8491572895467, 45.9550218456045], [27.8496921076121, 45.9553055677019], [27.8499648632752, 45.9554424784485], [27.8505206938608, 45.955706211546], [27.8508035782529, 45.9558329434726], [27.8513788973131, 45.9560759642479], [27.8516711347574, 45.9561921697722], [27.8522643646965, 45.9564138116968], [27.8525651538167, 45.9565191721021], [27.8531746678263, 45.9567188272758], [27.8534831837477, 45.9568130535871], [27.8541073102708, 45.956990174407], [27.8544227068857, 45.9570730081847], [27.85505973421, 45.9572271088508], [27.8553811465021, 45.9572983229013], [27.8560293274642, 45.9574289807517], [27.8563558738853, 45.9574883797518], [27.8570134306686, 45.9575952364237], [27.857344215562, 45.9576426574571], [27.8580093445859, 45.9577254198724], [27.8583434606471, 45.9577607328778], [27.8590143375215, 45.9578191740478], [27.8593508682925, 45.9578422821759], [27.8600256528389, 45.9578762418258], [27.8603636752277, 45.9578870817058], [27.8605643377126, 45.9578898645273], [27.8604195212771, 45.9580073342743], [27.860204954432, 45.9581907864249], [27.8597896768933, 45.9585652432945], [27.8595891085508, 45.9587561197493], [27.8592023877744, 45.9591449071926], [27.8590163679226, 45.9593426850025], [27.8586592644404, 45.9597447378277], [27.8584883032572, 45.9599488751163], [27.8581617965513, 45.9603630917477], [27.8580063630031, 45.9605730291941], [27.8577113488105, 45.9609982746912], [27.8575718693627, 45.961213437061], [27.8573091572188, 45.9616485462161], [27.8571860146619, 45.9618683439358], [27.8569563256677, 45.9623121244674], [27.856849858063, 45.9625359552386], [27.8566538228957, 45.9629871910595], [27.8565643226427, 45.9632144415082], [27.8564024798183, 45.9636718960504], [27.856330192847, 45.9639019434065], [27.856202987229, 45.9643643630101], [27.856148112319, 45.9645965768135], [27.856055893886, 45.9650626941608], [27.8560185821146, 45.9652964379883], [27.8559616049862, 45.965764975576], [27.8559419593071, 45.9659996087851], [27.8559203810327, 45.9664692824254], [27.8559184559861, 45.9667041619098], [27.8559323370983, 45.9671736842483], [27.8559481386541, 45.967408166201], [27.8559974424872, 45.9678762502441], [27.8560309280206, 45.9681096919215], [27.856115520796, 45.9685750545701], [27.8561665991973, 45.9688068160549], [27.8562862503753, 45.969268181617], [27.8563547822921, 45.9694976275723], [27.8564276566381, 45.9697264156515], [27.8579022268497, 45.9740823617568], [27.8579837518518, 45.9743096751063], [27.8580695668294, 45.9745361741869], [27.8582582942814, 45.9749857606671], [27.8583611422092, 45.9752086939711], [27.8585836657966, 45.9756505350423], [27.8587032653185, 45.9758692913638], [27.8589589761579, 45.9763021756286], [27.8590949999543, 45.9765161551917], [27.8593831980979, 45.9769388957682], [27.8595352737779, 45.9771475118728], [27.8598551701175, 45.9775589496473], [27.8600228812347, 45.9777616302792], [27.86037359966, 45.9781606370931], [27.8605564868495, 45.9783568264945], [27.8609370666389, 45.9787423082382], [27.861134628873, 45.9789314684331], [27.8615440273243, 45.9793023680528], [27.8617557232833, 45.9794839803246], [27.8621928185598, 45.979839280719], [27.8624180681132, 45.9800128470342], [27.8628816623237, 45.980351573855], [27.8631198481192, 45.9805166182317], [27.8636086705923, 45.9808378425535], [27.8638591397478, 45.9809939123684], [27.864371850521, 45.981296753245], [27.864633916414, 45.9814434204767], [27.8651691099023, 45.9817270473575], [27.8654420540533, 45.9818639097625], [27.8659982629079, 45.9821275447762], [27.8662813369514, 45.982254226994], [27.8668570360873, 45.9824971470861], [27.8671494638259, 45.9826133016706], [27.8677430746063, 45.9828348405893], [27.8680440541415, 45.9829401489633], [27.868653948709, 45.9831396990893], [27.8689626546433, 45.9832338724203], [27.8695871603972, 45.9834108864389], [27.869902746101, 45.9834936664326], [27.8705401502899, 45.9836476588373], [27.8708617502279, 45.9837188184474], [27.8715103046521, 45.9838493668725], [27.871837036761, 45.9839087109251], [27.872494962578, 45.9840154573077], [27.8728259306909, 45.9840628230372], [27.8734914233073, 45.9841454746017], [27.8738257196166, 45.9841807320983], [27.8744969536442, 45.9842390621602], [27.8748336611971, 45.984262114727], [27.8755087954752, 45.9842959633159], [27.8758469906942, 45.9843067477345], [27.8765241733433, 45.9843160220336], [27.8768629285652, 45.9843145087375], [27.8795489793457, 45.9842989767126], [27.8802263529738, 45.9842836339959], [27.8805647387478, 45.9842698185104], [27.8812404440091, 45.9842299182466], [27.8815775317963, 45.9842038471542], [27.8822497152644, 45.9841394988229], [27.8825845804584, 45.984101243653], [27.8832513984036, 45.9840126237937], [27.8835831225121, 45.9839622894958], [27.8839139469921, 45.9839089508783], [27.8902134948577, 45.9828329305095], [27.8905422817793, 45.9827736014849], [27.890869942584, 45.982711306847], [27.8915205363578, 45.9825749009097], [27.8918432462598, 45.9825008363868], [27.8924830494526, 45.9823410858427], [27.8927999233842, 45.9822554546019], [27.8934271813045, 45.9820727976575], [27.8937373502421, 45.9819758345884], [27.8943503426795, 45.981770772273], [27.8946529560314, 45.9816627433419], [27.8952500019964, 45.981435838126], [27.8954131748283, 45.9813699550624], [27.8973540838308, 45.9804132877167], [27.8990151637997, 45.9792294084052], [27.9003407876989, 45.9778579793603], [27.9012865767252, 45.9763449424487], [27.9018208843557, 45.974740978915], [27.9019258524567, 45.9730998108149], [27.9015980045814, 45.9714764011873], [27.8972898947237, 45.9587792243321], [27.896540620955, 45.9572278819613], [27.8953947620127, 45.9558005871461], [27.8938907117009, 45.9545451278249], [27.8920788462478, 45.9535035356834], [27.8900198364953, 45.9527106803485], [27.8877826172004, 45.9521931033884], [27.8854420813009, 45.951968130932], [27.8852546362552, 45.9519621637514], [27.8845778558065, 45.9519529328124], [27.8842771173723, 45.9519542935863], [27.8844095634337, 45.951862299839], [27.8848782799678, 45.9515194402348], [27.8851061601096, 45.9513438652759], [27.885548651846, 45.9509846658408], [27.8857631118406, 45.9508011645073], [27.8861781662199, 45.9504266102663], [27.8863786184229, 45.950235685761], [27.8867650982318, 45.9498468038092], [27.8869509934623, 45.9496489796729], [27.8873078399428, 45.949246836358], [27.8874786689862, 45.9490426550316], [27.8878049047318, 45.9486283530268], [27.8879601997318, 45.9484183743623], [27.8882549313639, 45.9479930496325], [27.8883942671008, 45.9477778493563], [27.8886566877003, 45.9473426680513], [27.8887796827522, 45.9471228361838], [27.8890090740691, 45.9466789914262], [27.8891153918513, 45.9464551306629], [27.8893111262556, 45.9460038392856], [27.8894004759379, 45.9457765633436], [27.8895620181336, 45.9453190625395], [27.8896341554306, 45.9450889944736], [27.889761063904, 45.9446265384143], [27.8898157917384, 45.9443943089085], [27.8899077199589, 45.9439281652947], [27.8899448889941, 45.9436944109325], [27.8900015863472, 45.9432258575233], [27.8900210953896, 45.9429912190419], [27.8900424078498, 45.9425215401484], [27.8900442041186, 45.9422866606824], [27.8900300746564, 45.9418171436501], [27.8900141539206, 45.9415826669688], [27.8899646226433, 45.9411145986471], [27.8899310292259, 45.9408811673898], [27.8898462332533, 45.9404158306083], [27.8897950599022, 45.9401840845235], [27.8896752329743, 45.9397227545685], [27.8896066206006, 45.9394933287615], [27.8895336700479, 45.9392645619236], [27.888058019814, 45.9349090020796], [27.8879764586397, 45.9346817077821], [27.8878906126874, 45.9344552286367], [27.8877018427892, 45.9340056856791], [27.8875989836556, 45.9337827758814], [27.8873764583097, 45.9333409851015], [27.8872568684657, 45.9331222554706], [27.8870011986318, 45.9326894274407], [27.8868652063577, 45.9324754773194], [27.8865770937433, 45.9320527980155], [27.8864250722237, 45.9318442136294], [27.8861053073467, 45.9314328411772], [27.8859376736427, 45.9312301940298], [27.8855871336565, 45.9308312555365], [27.8854043475589, 45.9306351008455], [27.8850239938398, 45.9302496893143], [27.8848265566046, 45.930060564492], [27.8844174321122, 45.9296897358334], [27.8842058850846, 45.9295081590163], [27.8837691114963, 45.9291529291569], [27.8835440346243, 45.9289793977881], [27.8830808092604, 45.9286407398938], [27.8828428195048, 45.9284757293624], [27.8823544120406, 45.9281545711733], [27.8821041616826, 45.9279985335139], [27.881591910675, 45.9276957548107], [27.8813300855293, 45.9275491174674], [27.88079539474, 45.9272655476607], [27.8805227122759, 45.9271287123179], [27.8799670468392, 45.926865128186], [27.8796842542164, 45.9267384696701], [27.8791091366131, 45.9264955932281], [27.8788170086356, 45.9263794584828], [27.8782240145413, 45.9261579550155], [27.8779233515383, 45.926052662153], [27.877314105499, 45.9258531383903], [27.8770057311342, 45.9257589758219], [27.8763819021324, 45.9255819782841], [27.876066661152, 45.9254992039314], [27.875429958036, 45.925345217433], [27.8751087139582, 45.9252740580231], [27.8744608807701, 45.9251435043478], [27.8741345135241, 45.9250841547936], [27.8734773247375, 45.9249773915426], [27.8731467282582, 45.9249300144095], [27.8724819839189, 45.9248473340221], [27.8721480637033, 45.9248120590842], [27.8714775845128, 45.9247536880393], [27.8711412551452, 45.9247306119243], [27.8704668774922, 45.9246967101216], [27.8701290601448, 45.9246858960466], [27.8694526310705, 45.9246765563682], [27.8691142509857, 45.9246780339667], [27.8684376231534, 45.9246932820242], [27.8680996071157, 45.9247070472652], [27.8674246337354, 45.9247468413283], [27.8670879075385, 45.9247728565269], [27.866416437309, 45.9248370876378], [27.8660819232257, 45.9248752815582], [27.8655401755929, 45.9249472507678], [27.8655117838913, 45.9248856446562], [27.8652894930033, 45.9244437972655], [27.8651700209113, 45.9242250375731], [27.864914587466, 45.9237921459486], [27.8647787137474, 45.9235781623159], [27.864490838804, 45.9231554126069], [27.8643389363184, 45.9229467913514], [27.8640194097438, 45.9225353418771], [27.8638518952266, 45.9223326546035], [27.8635015935215, 45.9219336326825], [27.8633189264367, 45.9217374347187], [27.8629388103257, 45.9213519335839], [27.8627414916037, 45.9211627624609], [27.8623326033936, 45.9207918382666], [27.8621211740549, 45.9206102122479], [27.8616846347781, 45.9202548811845], [27.8614596744488, 45.9200812978482], [27.8609966807841, 45.919742533359], [27.8607588061056, 45.9195774682367], [27.8602706270944, 45.919256198354], [27.8600204900332, 45.91910010363], [27.8595084636051, 45.9187972084398], [27.8592467496659, 45.9186505117146], [27.8587122789723, 45.918366820949], [27.8584397053201, 45.9182299240697], [27.8570675123971, 45.9175781265108], [27.8565120764323, 45.9173144094531], [27.8562293970846, 45.917187683443], [27.8556545029546, 45.916944670042], [27.8553624850977, 45.9168284658783], [27.8547697078615, 45.9166068217917], [27.8544691515231, 45.916501457777], [27.8538601151374, 45.9163017901216], [27.8535518436896, 45.9162075548619], [27.8529282165629, 45.916030410552], [27.8526130744704, 45.9159475621683], [27.8519765648953, 45.9157934264195], [27.8516554154056, 45.9157221918416], [27.8510077668997, 45.9155914868477], [27.8506814896835, 45.9155320611945], [27.8500244762106, 45.9154251449702], [27.8496939649563, 45.9153776910156], [27.8490293860868, 45.91529485642], [27.8486955460586, 45.9152595041483], [27.8482148223072, 45.9152175325583], [27.8485124548845, 45.9148499270964], [27.8488388267112, 45.9144357332501], [27.8489941972722, 45.9142258054666], [27.8492890949634, 45.9138005760321], [27.8494285211417, 45.9135854201367], [27.849691137323, 45.9131503209988], [27.8498142374474, 45.9129305268903], [27.8500438533277, 45.9124867509504], [27.8501502905242, 45.912262921221], [27.8503462778575, 45.9118116851189], [27.850435760967, 45.9115844334007], [27.8505975837587, 45.911126974184], [27.8506698681288, 45.9108969234657], [27.8507970840953, 45.9104344951875], [27.8508519722441, 45.9102022761058], [27.8509442340086, 45.9097361463925], [27.8509815761588, 45.9095023955024], [27.85103863219, 45.9090338420752], [27.8510583266723, 45.9087992001048], [27.851080021959, 45.9083295072781], [27.8510820154831, 45.9080946173719], [27.8510682919443, 45.9076250725273], [27.8510525797374, 45.9073905784834], [27.8510034763659, 45.9069224685485], [27.8509701021784, 45.9066890130541], [27.8508857549186, 45.9062236209704], [27.8508348108967, 45.9059918438411], [27.8507154522576, 45.9055304450512], [27.8506470786829, 45.9053009814776], [27.8505743692155, 45.9050721752053], [27.8491033654419, 45.9007158305666], [27.8490220497031, 45.9004884935309], [27.8489364513048, 45.9002619700067], [27.8487481848218, 45.8998123317635], [27.8486455813767, 45.8995893710917], [27.8477531710126, 45.8977038643442], [27.8475311828181, 45.8972619624491], [27.8474118654221, 45.8970431740263], [27.8471567478542, 45.8966102220234], [27.8470210352086, 45.8963962067632], [27.8467334884599, 45.8959733909673], [27.8465817529829, 45.8957647352743], [27.8462625660192, 45.8953532141848], [27.8460952239881, 45.8951504897583], [27.8457452723807, 45.8947513908925], [27.8455627827868, 45.8945551531624], [27.8451830262972, 45.894169569961], [27.8449858895842, 45.8939803565676], [27.8445773695387, 45.8936093454153], [27.8443661262286, 45.8934276747382], [27.8439299626483, 45.8930722520616], [27.8437051918574, 45.8928986218013], [27.8432425803905, 45.8925597612942], [27.8430048982412, 45.8923946471113], [27.8425171068851, 45.8920732770716], [27.8422671648165, 45.8919171312849], [27.8417555304362, 45.8916141320714], [27.841494013419, 45.8914673824217], [27.8409599380941, 45.8911835840531], [27.8406875627542, 45.8910466325326], [27.8401325099289, 45.8907828124112], [27.8398500225853, 45.890656034165], [27.839275513069, 45.8904129149552], [27.8389836876904, 45.8902966572553], [27.8383912954912, 45.8900749049059], [27.8380909315786, 45.8899694862013], [27.8374822795979, 45.8897697081253], [27.8371741999968, 45.8896754171724], [27.8365509555884, 45.889498160586], [27.8362360042384, 45.8894152556581], [27.8355998746538, 45.8892610060865], [27.8352789142807, 45.8891897142687], [27.8346316419921, 45.8890588942162], [27.8343055517491, 45.888999410784], [27.8336489096963, 45.8888923785817], [27.8333185827604, 45.8888448664674], [27.8326543694921, 45.888761915291], [27.8323207106229, 45.8887265046384], [27.8316507453898, 45.888667861709], [27.8313146684569, 45.8886446495175], [27.8306407862398, 45.8886104754793], [27.8303032117246, 45.8885995253386], [27.8296272582111, 45.8885899138194], [27.8292891106917, 45.8885912557357], [27.8286129372419, 45.8886062330914], [27.8282751428665, 45.8886198634053], [27.8276006014488, 45.8886593886469], [27.8272640854047, 45.8886852700429], [27.8265930235358, 45.8887492349487], [27.8262587075208, 45.8887872965574], [27.8255929632172, 45.8888755259677], [27.8252617629209, 45.888925663559], [27.8249314552479, 45.8889788042728], [27.8186414282763, 45.890050671781], [27.8183131207529, 45.890109764024], [27.817985931091, 45.8901718210272], [27.8173362471031, 45.8903077505757], [27.8170139752817, 45.8903815765748], [27.8163750134217, 45.890540849919], [27.8160585422246, 45.8906262427227], [27.8154320528081, 45.8908084236454], [27.8151222491678, 45.8909051493772], [27.8145099484259, 45.891109738909], [27.8142076610531, 45.8912175326467], [27.8008004071895, 45.8961417267248], [27.8001944681366, 45.8963710304278], [27.7998958947269, 45.8964911965523], [27.799307961691, 45.8967423877422], [27.7990188096134, 45.8968733241582], [27.7984505426191, 45.8971456938204], [27.7981716283216, 45.897287030941], [27.7976246319867, 45.8975798102617], [27.7973567430733, 45.8977311491308], [27.797210424596, 45.8978183417556], [27.7972886014625, 45.8976542807761], [27.7974849948005, 45.8972031266141], [27.7975746851586, 45.8969759114315], [27.7977369306559, 45.8965185163671], [27.7978094303377, 45.8962884932441], [27.7979370845497, 45.8958261111566], [27.7979921954821, 45.8955939106546], [27.7980849098295, 45.895127809044], [27.7981224816239, 45.8948940676674], [27.7981800033334, 45.8944255241783], [27.7981999336901, 45.8941908826294], [27.798222106473, 45.8937211815505], [27.7982243414548, 45.8934862829732], [27.7982111059201, 45.8930167117089], [27.7981956400921, 45.8927821999255], [27.7981470338941, 45.8923140454767], [27.7981139103309, 45.8920805632234], [27.797953098612, 45.8911424858179], [27.7978692607512, 45.8906770307156], [27.7978185732683, 45.8904452175965], [27.7976997310351, 45.8899837379172], [27.7976316171503, 45.8897542294719], [27.7975591680708, 45.8895253761212], [27.7946274358335, 45.8808107631245], [27.7945463979761, 45.8805833723836], [27.7944610782927, 45.8803567929153], [27.7942733723844, 45.8799070338654], [27.794171050607, 45.8796840083724], [27.7939496099594, 45.8792419710627], [27.7938305670857, 45.879023110682], [27.7935759996853, 45.8785900063622], [27.7934405624965, 45.8783759107958], [27.7931535670293, 45.8779529262007], [27.7930021071889, 45.8777441820735], [27.7926834711118, 45.8773324761671], [27.7925164041421, 45.8771296554213], [27.7921670015164, 45.8767303562266], [27.7919847856554, 45.8765340145563], [27.7846144452963, 45.8688845348811], [27.7842353528127, 45.8684987042012], [27.7840385474411, 45.8683093629286], [27.7836306883027, 45.8679380879148], [27.7834197743328, 45.8677562813465], [27.7829842667544, 45.8674005791523], [27.7827598224009, 45.8672268053617], [27.7822978602346, 45.8668876504472], [27.7820605007264, 45.8667223854883], [27.7815733501925, 45.8664007069587], [27.7813237260857, 45.8662444035639], [27.780812722296, 45.8659410826242], [27.780551517691, 45.8657941689663], [27.7800180609966, 45.8655100365155], [27.7797459916646, 45.8653729150363], [27.7791915438217, 45.865108749395], [27.7789093552443, 45.8649817957055], [27.7783354354026, 45.864738320483], [27.7780439007312, 45.8646218823358], [27.777452081289, 45.8643997644579], [27.7771519992293, 45.8642941607969], [27.7765439015169, 45.8640940086767], [27.7762360941434, 45.8639995287648], [27.7756133840026, 45.863821890645], [27.7752986945102, 45.8637387932734], [27.7746630777308, 45.863584155724], [27.7743423681291, 45.8635126685048], [27.7736955857799, 45.8633814550929], [27.773369734536, 45.863321773837], [27.7727135582134, 45.8632143439705], [27.7723834578508, 45.8631666321522], [27.7717196848339, 45.8630832800971], [27.7713862394924, 45.8630476684071], [27.7707166878278, 45.8629886224821], [27.7703808107928, 45.8629652084703], [27.7697073143248, 45.8629306304231], [27.7693699255309, 45.8629194782321], [27.7686943288987, 45.8629094627973], [27.7683563524159, 45.8629106029866], [27.7676805059991, 45.8629251776259], [27.7673428675077, 45.8629386070885], [27.7666686223799, 45.862977731916], [27.7663322466406, 45.8630034138865], [27.7656614495097, 45.8630669817767], [27.7653272578362, 45.8631048459316], [27.7646617459903, 45.8631926828125], [27.7643306537318, 45.8632426254625], [27.7640004499823, 45.8632955719303], [27.7606483280067, 45.8638650523668], [27.7606038125693, 45.8948138266689], [27.7604686584115, 45.9047246849087], [27.760520533889, 45.9111922674374]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;c1e18af4-9230-4917-af03-ec3e84910572&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110106T103456_20130713T102749_ADS_000000_vauC_8303cb54.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 55012774, &#x27;OriginDate&#x27;: &#x27;2024-05-05T12:38:06.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-11T06:37:56.470977Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:28:15.730435Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/01/06/DEM1_SAR_DGE_30_20110106T103456_20130713T102749_ADS_000000_vauC_8303cb54&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;eed31bc22f03bbc3968509918d6514e4&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:53.510813Z&#x27;}, {&#x27;Value&#x27;: &#x27;05e6185b5442873883dbff7eb1a0596c956c5cceff4eeb7178595c79adfb94ac&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:53.640653Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-01-06T10:34:56.000000Z&#x27;, &#x27;End&#x27;: &#x27;2013-07-13T10:27:49.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((104 62, 105 62, 105 63, 104 63, 104 62))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[104.0, 62.0], [105.0, 62.0], [105.0, 63.0], [104.0, 63.0], [104.0, 62.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;4d18f7b2-258c-4043-8998-e6c7b71f1e18&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20130514T094036_20140604T092439_ADS_000000_2304_bf5f8c79.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 36980735, &#x27;OriginDate&#x27;: &#x27;2024-05-01T20:43:20.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-06T14:49:19.699064Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:13:53.970459Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2013/05/14/DEM1_SAR_DGE_30_20130514T094036_20140604T092439_ADS_000000_2304_bf5f8c79&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;d019e4c48e47308b297ff953b71acf6b&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:53.664719Z&#x27;}, {&#x27;Value&#x27;: &#x27;47fd5f70dea3988f81238384f6f17d56faee036bc714814cc981ca4a5c4b83ab&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:53.739845Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2013-05-14T09:40:36.000000Z&#x27;, &#x27;End&#x27;: &#x27;2013-05-14T09:40:37.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((146 -80, 147 -80, 147 -79, 146 -79, 146 -80))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[146.0, -80.0], [147.0, -80.0], [147.0, -79.0], [146.0, -79.0], [146.0, -80.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;cdc5f5cf-1cde-4729-84f8-c446863999e1&#x27;, &#x27;Name&#x27;: &#x27;PH1A_PHR_MS___3_20180722T091314_20180722T091316_TOU_1234_b175.DIMA&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 1344157311, &#x27;OriginDate&#x27;: &#x27;2024-02-25T17:18:26.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-02-26T19:39:22.851851Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T08:52:15.584858Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2018/PHR_MS___3_E1F0/2018/07/22/PH1A_PHR_MS___3_20180722T091314_20180722T091316_TOU_1234_b175&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;ba4c38c3559616fdec73ccaaf17b4cd0&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:52:06.635819Z&#x27;}, {&#x27;Value&#x27;: &#x27;ecda5e371e43459c3717d95ab9f4e477c75fafaa044278ae8add1a1c0ee80c80&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:52:08.806843Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2018-07-22T09:13:14.000000Z&#x27;, &#x27;End&#x27;: &#x27;2018-07-22T09:13:16.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((26.6739385751967 43.9772557229237, 26.6739385751967 43.9772557229237, 26.6736640255197 44.0526669109094, 26.7418269674762 44.0573944028463, 26.7834456012391 44.0599917961189, 26.797153835956 44.0605974619425, 26.8250937786226 44.0623370722022, 26.8526586618238 44.063613732505, 26.86658394264 44.0645070209156, 26.8940380690851 44.0657556563889, 26.9076633023997 44.0662127036409, 26.9347756441855 44.0676581807382, 26.9547098619914 44.0684236012821, 26.9547038668323 44.0660014651016, 26.9545564149931 44.0036426548484, 26.9545932800735 43.9457572485757, 26.9344298231973 43.9242124952794, 26.932859716291 43.922824817454, 26.930932711035 43.9216950328028, 26.9287263557455 43.920868597154, 26.9263294255534 43.9203787600698, 26.9238383537899 43.9202452287434, 26.9213533570833 43.9204733761108, 26.9170567543844 43.9211877348156, 26.917576008851 43.9204228319818, 26.9182039992465 43.9187561379231, 26.9183818149096 43.9170381871006, 26.9181029800736 43.9153319345502, 26.9107210498719 43.8907744696594, 26.9099694354533 43.8890973782393, 26.901690403494 43.8744529249005, 26.8598057933222 43.8723365652651, 26.8322431821242 43.8707537150166, 26.7355009606938 43.8648075579798, 26.674399842702 43.8602453058821, 26.6739385751967 43.9772557229237))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[26.6739385751967, 43.9772557229237], [26.6739385751967, 43.9772557229237], [26.6736640255197, 44.0526669109094], [26.7418269674762, 44.0573944028463], [26.7834456012391, 44.0599917961189], [26.797153835956, 44.0605974619425], [26.8250937786226, 44.0623370722022], [26.8526586618238, 44.063613732505], [26.86658394264, 44.0645070209156], [26.8940380690851, 44.0657556563889], [26.9076633023997, 44.0662127036409], [26.9347756441855, 44.0676581807382], [26.9547098619914, 44.0684236012821], [26.9547038668323, 44.0660014651016], [26.9545564149931, 44.0036426548484], [26.9545932800735, 43.9457572485757], [26.9344298231973, 43.9242124952794], [26.932859716291, 43.922824817454], [26.930932711035, 43.9216950328028], [26.9287263557455, 43.920868597154], [26.9263294255534, 43.9203787600698], [26.9238383537899, 43.9202452287434], [26.9213533570833, 43.9204733761108], [26.9170567543844, 43.9211877348156], [26.917576008851, 43.9204228319818], [26.9182039992465, 43.9187561379231], [26.9183818149096, 43.9170381871006], [26.9181029800736, 43.9153319345502], [26.9107210498719, 43.8907744696594], [26.9099694354533, 43.8890973782393], [26.901690403494, 43.8744529249005], [26.8598057933222, 43.8723365652651], [26.8322431821242, 43.8707537150166], [26.7355009606938, 43.8648075579798], [26.674399842702, 43.8602453058821], [26.6739385751967, 43.9772557229237]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;4afce0cb-52a8-4a40-b7c4-12e2c3d6c483&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110316T221744_20120814T222043_ADS_000000_7250_fdf1fc4b.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 3104099, &#x27;OriginDate&#x27;: &#x27;2024-05-13T06:28:38.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:50:51.527820Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:23:54.122044Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/16/DEM1_SAR_DTE_90_20110316T221744_20120814T222043_ADS_000000_7250_fdf1fc4b&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;fbf9ed6e8812a579419c6eaab5795e7b&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:54.303982Z&#x27;}, {&#x27;Value&#x27;: &#x27;35323ca0b63cdbae8b6275a20951fa23cb8c51c1c89a31917f8255d99cc6b4fa&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:54.329599Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-16T22:17:44.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-16T22:17:45.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-67 43, -66 43, -66 44, -67 44, -67 43))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-67.0, 43.0], [-66.0, 43.0], [-66.0, 44.0], [-67.0, 44.0], [-67.0, 43.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;cf79c7ca-d23a-46e4-b74a-dda4ff2d90c9&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20111002T214432_20121215T214447_ADS_000000_EgYC_9472dfba.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 109248822, &#x27;OriginDate&#x27;: &#x27;2024-04-29T15:57:41.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-06T12:28:42.174482Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:50:13.888793Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/10/02/DEM1_SAR_DGE_30_20111002T214432_20121215T214447_ADS_000000_EgYC_9472dfba&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;2ced49e4ff46549a29a77738eb748968&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:37.298714Z&#x27;}, {&#x27;Value&#x27;: &#x27;2b450965b66194f6617a7dadf046e5d76387d47bc59916abe5fb0840eb46994a&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:37.501672Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-10-02T21:44:32.000000Z&#x27;, &#x27;End&#x27;: &#x27;2012-12-15T21:44:47.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-60 47, -59 47, -59 48, -60 48, -60 47))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-60.0, 47.0], [-59.0, 47.0], [-59.0, 48.0], [-60.0, 48.0], [-60.0, 47.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;4cc8e9e4-baea-4c64-9073-13a58b0e3424&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110314T162419_20140128T161823_ADS_000000_0750_ef4453a5.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 3104065, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:34:08.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:56:50.149871Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T10:15:05.202341Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/14/DEM1_SAR_DTE_90_20110314T162419_20140128T161823_ADS_000000_0750_ef4453a5&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;40c8857d3cb619761a43932d8a8fcb70&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:38.592517Z&#x27;}, {&#x27;Value&#x27;: &#x27;bdae46520de7938186aa9adfac922624dfd17aa82d7385696e877b4b3e0a9cd1&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:38.619650Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-14T16:24:23.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-14T16:24:24.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((26 14, 27 14, 27 15, 26 15, 26 14))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[26.0, 14.0], [27.0, 14.0], [27.0, 15.0], [26.0, 15.0], [26.0, 14.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;468eb060-863a-4d4b-b439-ee2d1320670b&#x27;, &#x27;Name&#x27;: &#x27;DM02_HRS_MS2_1D_20240531T074911_20240531T074913_TOU_053929_e1c5.SAFE&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 347950138, &#x27;OriginDate&#x27;: &#x27;2025-04-11T00:47:46.633487Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2025-04-11T00:54:14.633104Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:25:26.647337Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2024/HRS_MS2_1D_0476/2024/05/31/DM02_HRS_MS2_1D_20240531T074911_20240531T074913_TOU_053929_e1c5&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;19cbf45ebded37d780f6c06c0c521109&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:19:59.871690Z&#x27;}, {&#x27;Value&#x27;: &#x27;4c3ce06cbd03bad17792b5893edfb268c5da2821631c6dc76f460f71f8a5a443&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:20:00.433830Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2024-05-31T07:49:11.000000Z&#x27;, &#x27;End&#x27;: &#x27;2024-05-31T07:49:13.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;MULTIPOLYGON (((26.34774 40.738453, 26.371185 40.662201, 26.370998 40.615864, 26.24292 40.593452, 26.206963 40.711746, 26.306677 40.72934, 26.307217 40.731361, 26.311132 40.732033, 26.34774 40.738453)))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[26.34774, 40.738453], [26.371185, 40.662201], [26.370998, 40.615864], [26.24292, 40.593452], [26.206963, 40.711746], [26.306677, 40.72934], [26.307217, 40.731361], [26.311132, 40.732033], [26.34774, 40.738453]]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;77cea291-2111-4b5f-bdf3-2246693c9bb7&#x27;, &#x27;Name&#x27;: &#x27;PH1B_PHR_MS__2A_20181030T140251_20181030T140255_TOU_1234_bf75.DIMA&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 63415575, &#x27;OriginDate&#x27;: &#x27;2024-02-25T17:18:41.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-02-26T20:40:41.393634Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:12:16.770468Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2018/PHR_MS__2A_E1F0/2018/10/30/PH1B_PHR_MS__2A_20181030T140251_20181030T140255_TOU_1234_bf75&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;00caea1fe93449da89115b0a9bd4c302&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:16.320134Z&#x27;}, {&#x27;Value&#x27;: &#x27;e45385bb60abbeb03cf3ec91f84d85880ba2818c2009b8a3b8d03f6b3aafe764&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:16.495583Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2018-10-30T14:02:51.000000Z&#x27;, &#x27;End&#x27;: &#x27;2018-10-30T14:02:55.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-52.7197917927707 4.65820708617861, -52.7230167118142 4.65543434206539, -52.7246905173687 4.65419622417135, -52.7281273820748 4.6520412149238, -52.7298732781942 4.6511350804946, -52.7316285712335 4.65031710068967, -52.7337224121752 4.6494516898741, -52.7357644409537 4.64873279542295, -52.737793536985 4.64814350334377, -52.7384565798117 4.64803456335567, -52.7384838317599 4.71690019526621, -52.7374171339492 4.71760440950278, -52.7356693289627 4.71856654043047, -52.7321429243128 4.72013145688681, -52.730382101236 4.72072635149909, -52.7269007238221 4.72152901405921, -52.7251977218402 4.72173273524645, -52.7235179189013 4.72183687480831, -52.7225914746652 4.72183914791878, -52.7209782310524 4.72174349634098, -52.7194046296471 4.72154862791817, -52.7164313948893 4.72076502840192, -52.7150466940653 4.72018023416552, -52.7125089478199 4.71863640953874, -52.711368648299 4.717685133733, -52.7093681084251 4.71544296958143, -52.70851791559 4.71416334208536, -52.7071347654534 4.71131270448553, -52.706608753916 4.70975600944569, -52.7061833008795 4.70821287808026, -52.7042548490331 4.69935006794034, -52.7041056053085 4.69856764962282, -52.7038379080221 4.6969424480535, -52.7036170418172 4.69352680413816, -52.70366486517 4.69175174198494, -52.7037918943979 4.68994698541262, -52.7039256700112 4.68875899573588, -52.7042693399483 4.68661514186237, -52.7047164566404 4.68445529566584, -52.7060177677659 4.68009794748102, -52.706864090445 4.67792677033899, -52.7078059811184 4.67576592476091, -52.709514029917 4.67222744967891, -52.7105266017232 4.67030297908088, -52.7116083951968 4.66840744522239, -52.7140373409341 4.66475078075988, -52.7153723560703 4.66300790591843, -52.7182567869846 4.65972787159818, -52.7197917927707 4.65820708617861))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-52.7197917927707, 4.65820708617861], [-52.7230167118142, 4.65543434206539], [-52.7246905173687, 4.65419622417135], [-52.7281273820748, 4.6520412149238], [-52.7298732781942, 4.6511350804946], [-52.7316285712335, 4.65031710068967], [-52.7337224121752, 4.6494516898741], [-52.7357644409537, 4.64873279542295], [-52.737793536985, 4.64814350334377], [-52.7384565798117, 4.64803456335567], [-52.7384838317599, 4.71690019526621], [-52.7374171339492, 4.71760440950278], [-52.7356693289627, 4.71856654043047], [-52.7321429243128, 4.72013145688681], [-52.730382101236, 4.72072635149909], [-52.7269007238221, 4.72152901405921], [-52.7251977218402, 4.72173273524645], [-52.7235179189013, 4.72183687480831], [-52.7225914746652, 4.72183914791878], [-52.7209782310524, 4.72174349634098], [-52.7194046296471, 4.72154862791817], [-52.7164313948893, 4.72076502840192], [-52.7150466940653, 4.72018023416552], [-52.7125089478199, 4.71863640953874], [-52.711368648299, 4.717685133733], [-52.7093681084251, 4.71544296958143], [-52.70851791559, 4.71416334208536], [-52.7071347654534, 4.71131270448553], [-52.706608753916, 4.70975600944569], [-52.7061833008795, 4.70821287808026], [-52.7042548490331, 4.69935006794034], [-52.7041056053085, 4.69856764962282], [-52.7038379080221, 4.6969424480535], [-52.7036170418172, 4.69352680413816], [-52.70366486517, 4.69175174198494], [-52.7037918943979, 4.68994698541262], [-52.7039256700112, 4.68875899573588], [-52.7042693399483, 4.68661514186237], [-52.7047164566404, 4.68445529566584], [-52.7060177677659, 4.68009794748102], [-52.706864090445, 4.67792677033899], [-52.7078059811184, 4.67576592476091], [-52.709514029917, 4.67222744967891], [-52.7105266017232, 4.67030297908088], [-52.7116083951968, 4.66840744522239], [-52.7140373409341, 4.66475078075988], [-52.7153723560703, 4.66300790591843], [-52.7182567869846, 4.65972787159818], [-52.7197917927707, 4.65820708617861]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;351a806a-bdab-4733-aa0f-ff5043d5b323&#x27;, &#x27;Name&#x27;: &#x27;SP05_HRG_THX__3_20110415T105531_20110415T105531_TOU_1234_1118.DIMA&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 2914722685, &#x27;OriginDate&#x27;: &#x27;2024-05-15T11:54:36.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-22T04:01:31.095088Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:31:25.827074Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/DWH_MG2b_CORE_03/HRG_THX__3_54FA/2011/04/15/SP05_HRG_THX__3_20110415T105531_20110415T105531_TOU_1234_1118&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;26f03c05b03c327c461897aef217c707&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:31:09.771571Z&#x27;}, {&#x27;Value&#x27;: &#x27;440ee78ac6790edf32908a29c0aeb270a9bb0478715e6656d20c608ac0fc3ddb&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:31:14.295182Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-04-15T10:55:31.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-04-15T10:55:31.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((2.37 44.973, 2.167 44.451, 2.9 44.304, 3.109 44.824, 2.37 44.973))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[2.37, 44.973], [2.167, 44.451], [2.9, 44.304], [3.109, 44.824], [2.37, 44.973]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;fb3158c2-99fc-4986-bc2d-eaf725ef6b9d&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110624T153924_20140913T154114_ADS_000000_srmb_adea2397.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 108980373, &#x27;OriginDate&#x27;: &#x27;2024-05-01T20:51:11.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-07T00:39:39.810667Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:26:17.869864Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/06/24/DEM1_SAR_DGE_30_20110624T153924_20140913T154114_ADS_000000_srmb_adea2397&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;a5901e1c494f26e2e11f310c53b1af72&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:20:33.966376Z&#x27;}, {&#x27;Value&#x27;: &#x27;d8538c987577840870128fc9d408dcd5969fbe30a79d8c7cab6259b5eb345a5e&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:20:34.153270Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-06-24T15:39:24.000000Z&#x27;, &#x27;End&#x27;: &#x27;2014-09-13T15:41:14.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((33 42, 34 42, 34 43, 33 43, 33 42))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[33.0, 42.0], [34.0, 42.0], [34.0, 43.0], [33.0, 43.0], [33.0, 42.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;178224d7-bd78-4f66-adf5-0ac270e6d2de&#x27;, &#x27;Name&#x27;: &#x27;CS00_SAR_HIM_1B_20180317T175248_20180317T175255_MAT_0_9e62.HDF5&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 445964347, &#x27;OriginDate&#x27;: &#x27;2024-06-18T13:24:41.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-06-19T15:16:29.741486Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:14:51.268757Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_HIM_1B_6F15/2018/03/17/CS00_SAR_HIM_1B_20180317T175248_20180317T175255_MAT_0_9e62&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;61db0cf58b8062b9c79b34dbcd9a7141&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:50.328361Z&#x27;}, {&#x27;Value&#x27;: &#x27;47ed6bce37d9829bf1558a9b2bd8f72c4ec69ad87aa4d9fc41c62361c6d2482f&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:51.011362Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2018-03-17T17:52:48.000000Z&#x27;, &#x27;End&#x27;: &#x27;2018-03-17T17:52:55.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((25.503075 78.985926, 26.476727 79.310015, 24.753905 79.485935, 23.817495 79.156986, 25.503075 78.985926))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[25.503075, 78.985926], [26.476727, 79.310015], [24.753905, 79.485935], [23.817495, 79.156986], [25.503075, 78.985926]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;fe5076e6-b13f-4951-994e-e04761899ba7&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20221030T234040_20221030T234155_GAT_77666_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 381010957, &#x27;OriginDate&#x27;: &#x27;2024-06-18T13:26:25.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-06-19T15:16:47.926243Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:15:30.015726Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2022/10/30/RS02_SAR_SW_SCW_20221030T234040_20221030T234155_GAT_77666_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;acd3e21e5868ed2770e8b51384764baa&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:15:28.265879Z&#x27;}, {&#x27;Value&#x27;: &#x27;21f6bf6da15d282ba35e3b4c4fc0a1a40fc9a3f82899b8256ca0962338c64257&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:15:29.091936Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2022-10-30T23:40:40.000000Z&#x27;, &#x27;End&#x27;: &#x27;2022-10-30T23:41:55.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-63.77 -62.31, -59.04 -66.39, -49.54 -63.75, -55.08 -59.98, -63.77 -62.31))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-63.77, -62.31], [-59.04, -66.39], [-49.54, -63.75], [-55.08, -59.98], [-63.77, -62.31]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;ab91ae8e-a6c0-44fe-855c-487ba4014c43&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110625T165801_20140823T165905_ADS_000000_5367_bf5f8c79.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 109305222, &#x27;OriginDate&#x27;: &#x27;2024-05-01T20:41:52.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-07T00:36:21.102719Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:26:35.701249Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/06/25/DEM1_SAR_DGE_30_20110625T165801_20140823T165905_ADS_000000_5367_bf5f8c79&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;e0dd04a8b281c393837d4568a110650e&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:20:26.000796Z&#x27;}, {&#x27;Value&#x27;: &#x27;19e39f37004622111b1bc6baa31a004e61c333d006433e2e5cd6126ddce3880e&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:20:26.219682Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-06-25T16:58:03.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-06-25T16:58:04.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((13 42, 14 42, 14 43, 13 43, 13 42))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[13.0, 42.0], [14.0, 42.0], [14.0, 43.0], [13.0, 43.0], [13.0, 42.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;4a431ecf-a3d1-4ba5-8cbc-6e81d614ff4f&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20230818T054134_20230818T054250_TRS_81829_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 295028582, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:44.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T08:05:48.368906Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:14:08.330623Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2023/08/18/RS02_SAR_SW_SCW_20230818T054134_20230818T054250_TRS_81829_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;1068b608370da20152f845359819f3b9&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:06.416641Z&#x27;}, {&#x27;Value&#x27;: &#x27;33aaa5229212332379d59722ad3e26b07bdde8851e822b00792d1b3e4c029125&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:06.856228Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-08-18T05:41:34.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-08-18T05:42:50.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((33.63 77.6, 49.02 81.16, 17.9 83.63, 11.46 79.29, 33.63 77.6))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[33.63, 77.6], [49.02, 81.16], [17.9, 83.63], [11.46, 79.29], [33.63, 77.6]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;cea261c3-6294-4d2d-a24f-d871cfdc892d&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110308T102531_20131204T230511_ADS_000000_2164_57f834c0.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 1655696, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:38:06.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T21:20:01.541569Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:25:51.492449Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/08/DEM1_SAR_DTE_90_20110308T102531_20131204T230511_ADS_000000_2164_57f834c0&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;9321559ceb3f5650f774abdf646313e2&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:20:26.109835Z&#x27;}, {&#x27;Value&#x27;: &#x27;249dc0bcaad84cd5134f4862ac5563e6f6c177eb2fed5558dac7fe7c09758239&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:20:26.133761Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-08T10:25:33.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-08T10:25:34.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((108 57, 109 57, 109 58, 108 58, 108 57))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[108.0, 57.0], [109.0, 57.0], [109.0, 58.0], [108.0, 58.0], [108.0, 57.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;94fbe4dc-7d8c-4a41-a04b-3b64c7de3237&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20230911T203738_20230911T203854_GAT_82181_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 368815248, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:32.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T08:01:22.336737Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:12:51.704428Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2023/09/11/RS02_SAR_SW_SCW_20230911T203738_20230911T203854_GAT_82181_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;4664228d023ae4e2b32ef8d08e04ec0c&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:50.875548Z&#x27;}, {&#x27;Value&#x27;: &#x27;fd5a34285ef15677d961fe4e3495c15677bd646d4da8ff99658d972a31904e02&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:12:51.428660Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-09-11T20:37:38.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-09-11T20:38:54.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-51.55 62, -49.12 57.6, -40.33 58.49, -41.5 62.95, -51.55 62))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-51.55, 62.0], [-49.12, 57.6], [-40.33, 58.49], [-41.5, 62.95], [-51.55, 62.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;e9a64006-5a83-462b-93bd-fd56feeef30d&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110313T085547_20140129T211508_ADS_000000_3282_ef4453a5.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 1655697, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:37:31.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T21:01:00.980168Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:50:15.066611Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/13/DEM1_SAR_DTE_90_20110313T085547_20140129T211508_ADS_000000_3282_ef4453a5&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;14a26df54d99d521c1814057fda94861&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:45.298000Z&#x27;}, {&#x27;Value&#x27;: &#x27;3a16d75558e6a5497bc7b0d1849a412e0f85570904f353064c62cfa252981afc&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:45.319665Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-13T08:56:17.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-13T08:56:18.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((133 50, 134 50, 134 51, 133 51, 133 50))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[133.0, 50.0], [134.0, 50.0], [134.0, 51.0], [133.0, 51.0], [133.0, 50.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;2e250986-c697-4fa6-88ca-6b337f306751&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110321T173400_20130104T172826_ADS_000000_fkuT_7e3eb1c.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 109030741, &#x27;OriginDate&#x27;: &#x27;2024-05-27T15:29:47.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-28T18:36:54.103290Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T10:10:08.207968Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/03/21/DEM1_SAR_DGE_30_20110321T173400_20130104T172826_ADS_000000_fkuT_7e3eb1c&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;1a432b7a095deeca31cb0ad719025378&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T22:47:45.711548Z&#x27;}, {&#x27;Value&#x27;: &#x27;6801f1b43eecb8f296a17b1bd303915669083b66938427f3d7971e9f0ae1162b&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T22:47:45.991017Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-21T17:34:00.000000Z&#x27;, &#x27;End&#x27;: &#x27;2013-01-04T17:28:26.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((7 19, 8 19, 8 20, 7 20, 7 19))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[7.0, 19.0], [8.0, 19.0], [8.0, 20.0], [7.0, 20.0], [7.0, 19.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;cb187539-568c-4ccb-bb6e-ef241b7c2bdc&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110120T110638_20140821T110926_ADS_000000_2bkf_8303cb54.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 109671479, &#x27;OriginDate&#x27;: &#x27;2024-05-01T20:38:32.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-06T13:04:41.942838Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T10:15:11.009092Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/01/20/DEM1_SAR_DGE_30_20110120T110638_20140821T110926_ADS_000000_2bkf_8303cb54&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;cae8b96d8759fe6720b281fa0de6700d&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:41.523055Z&#x27;}, {&#x27;Value&#x27;: &#x27;aeaa717475ea59b9c868e9504d460b7dbdc85c7e3a1147b4cace8a1f455e1f02&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:41.712184Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-01-20T11:06:38.000000Z&#x27;, &#x27;End&#x27;: &#x27;2014-08-21T11:09:26.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((104 25, 105 25, 105 26, 104 26, 104 25))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[104.0, 25.0], [105.0, 25.0], [105.0, 26.0], [104.0, 26.0], [104.0, 25.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;0072cf57-0734-40ce-afa5-856b39a67a52&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20221113T154528_20221113T154644_GAT_77862_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 385526229, &#x27;OriginDate&#x27;: &#x27;2024-06-18T13:26:26.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-06-19T15:14:27.835703Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:13:40.129556Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2022/11/13/RS02_SAR_SW_SCW_20221113T154528_20221113T154644_GAT_77862_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;e68283148901069d12e3748d30997ae5&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:39.044124Z&#x27;}, {&#x27;Value&#x27;: &#x27;d130c513bd394564dea095f1c67c78c0c72cd74ac01e0f621b13147eb2dc4dc4&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:39.849987Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2022-11-13T15:45:28.000000Z&#x27;, &#x27;End&#x27;: &#x27;2022-11-13T15:46:44.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((18.18 67.25, 21.44 62.9, 31.79 63.85, 30.39 68.3, 18.18 67.25))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[18.18, 67.25], [21.44, 62.9], [31.79, 63.85], [30.39, 68.3], [18.18, 67.25]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;3a6c5c45-c07f-4883-8ba2-99cc12a9f7c8&#x27;, &#x27;Name&#x27;: &#x27;CS00_SAR_HIM_1C_20230902T203101_20230902T203107_MAT_0_213e.HDF5&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 288730008, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:45.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T08:01:57.060406Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T08:56:25.322178Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_HIM_1C_6F15/2023/09/02/CS00_SAR_HIM_1C_20230902T203101_20230902T203107_MAT_0_213e&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;750e2fc7f2f91ae798163c04f44eac77&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:56:21.119851Z&#x27;}, {&#x27;Value&#x27;: &#x27;a0b7f7bfd387a6fc98c88846534de1b3a1dfc52d565c74c564681041dbc07a30&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T08:56:21.570661Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-09-02T20:31:01.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-09-02T20:31:07.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-43.06756335 59.91516245, -43.04604166 60.28055977, -43.63455478 60.28791324, -43.64960022 59.9224087, -43.06756335 59.91516245))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-43.06756335, 59.91516245], [-43.04604166, 60.28055977], [-43.63455478, 60.28791324], [-43.64960022, 59.9224087], [-43.06756335, 59.91516245]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;d60dedc8-9c5a-407e-9329-8061503e3631&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20230707T210653_20230707T210809_GAT_81238_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 367344769, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:26.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T07:33:21.564256Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:02:45.012097Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2023/07/07/RS02_SAR_SW_SCW_20230707T210653_20230707T210809_GAT_81238_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;c5de1435a72da94856c4e84ae44323c3&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:00:32.263271Z&#x27;}, {&#x27;Value&#x27;: &#x27;a2e5131c27a5111c993bff62acb9f9d9f19a0e8c981e57e358b84f1e06b82a5e&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:00:32.976277Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-07T21:06:53.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-07T21:08:09.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-72.52 75.58, -65.82 71.42, -50.94 72.62, -53.4 77.06, -72.52 75.58))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-72.52, 75.58], [-65.82, 71.42], [-50.94, 72.62], [-53.4, 77.06], [-72.52, 75.58]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;b4219018-ad36-4da7-b9a9-c0e420ef477f&#x27;, &#x27;Name&#x27;: &#x27;PH1B_PHR_MS___3_20180812T113331_20180812T113334_TOU_1234_e178.DIMA&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 49966717, &#x27;OriginDate&#x27;: &#x27;2024-02-25T17:18:53.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-02-26T21:44:05.820287Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:13:48.181987Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/VHR_IMAGE_2018/PHR_MS___3_E1F0/2018/08/12/PH1B_PHR_MS___3_20180812T113331_20180812T113334_TOU_1234_e178&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;26152fb7c5e3b46f7af5636c6d89abc9&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:47.599188Z&#x27;}, {&#x27;Value&#x27;: &#x27;7a2993b80e4feee50c2574865a17d290a207fb906f0017b5dc1244bc9f079778&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:47.694011Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2018-08-12T11:33:31.000000Z&#x27;, &#x27;End&#x27;: &#x27;2018-08-12T11:33:34.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-5.96081861073569 36.2392914038261, -5.96291089692373 36.2390142169188, -5.96501202191078 36.2388192329396, -5.9692304227323 36.2387591491634, -5.97132847401917 36.2388943227566, -5.97199707851664 36.2389910668113, -5.9719922843956 36.2441351815075, -5.97153459626847 36.2639335711674, -5.97154736645911 36.2738094449701, -5.90899537169506 36.2756293310282, -5.9089752925789 36.2752779477903, -5.90899019370184 36.2707906412585, -5.90910432612045 36.2689967627137, -5.90932606759764 36.2672096903389, -5.91019672456487 36.2636801862119, -5.91084136132057 36.2619550138789, -5.91253659332352 36.2586175675972, -5.91357888120218 36.2570216105326, -5.91603237723156 36.2540064325999, -5.91743157620751 36.2526019501705, -5.92054748925027 36.2500266523581, -5.92224896257851 36.2488684230285, -5.92590566367548 36.2468334392287, -5.92784301421234 36.2459666286555, -5.93189784156438 36.244551307579, -5.93399550129576 36.2440097121027, -5.93612322926672 36.2435526656492, -5.96081861073569 36.2392914038261))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-5.96081861073569, 36.2392914038261], [-5.96291089692373, 36.2390142169188], [-5.96501202191078, 36.2388192329396], [-5.9692304227323, 36.2387591491634], [-5.97132847401917, 36.2388943227566], [-5.97199707851664, 36.2389910668113], [-5.9719922843956, 36.2441351815075], [-5.97153459626847, 36.2639335711674], [-5.97154736645911, 36.2738094449701], [-5.90899537169506, 36.2756293310282], [-5.9089752925789, 36.2752779477903], [-5.90899019370184, 36.2707906412585], [-5.90910432612045, 36.2689967627137], [-5.90932606759764, 36.2672096903389], [-5.91019672456487, 36.2636801862119], [-5.91084136132057, 36.2619550138789], [-5.91253659332352, 36.2586175675972], [-5.91357888120218, 36.2570216105326], [-5.91603237723156, 36.2540064325999], [-5.91743157620751, 36.2526019501705], [-5.92054748925027, 36.2500266523581], [-5.92224896257851, 36.2488684230285], [-5.92590566367548, 36.2468334392287], [-5.92784301421234, 36.2459666286555], [-5.93189784156438, 36.244551307579], [-5.93399550129576, 36.2440097121027], [-5.93612322926672, 36.2435526656492], [-5.96081861073569, 36.2392914038261]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;06293a05-43a5-4f71-b114-803d135747cc&#x27;, &#x27;Name&#x27;: &#x27;TX01_SAR_SC_GEC_20230901T103209_20230901T103231_NSG_089912_6695.TSX&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 353117202, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:45.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T08:01:53.857148Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:16:36.864440Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SC_GEC_6F15/2023/09/01/TX01_SAR_SC_GEC_20230901T103209_20230901T103231_NSG_089912_6695&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;cf360ebdab865de3cce42a247175ce45&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:16:35.802818Z&#x27;}, {&#x27;Value&#x27;: &#x27;06772be42bd5f16635b445d343a5a3c45f4b2fcd5865e7a485c74dc91661b101&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:16:36.581727Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-09-01T10:32:09.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-09-01T10:32:31.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-52.0901837912001 69.4243580287935, -50.7058215243225 70.7441142926136, -53.5428221605178 71.0500749827858, -54.7271752231284 69.7102565963619, -52.0901837912001 69.4243580287935))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-52.0901837912001, 69.4243580287935], [-50.7058215243225, 70.7441142926136], [-53.5428221605178, 71.0500749827858], [-54.7271752231284, 69.7102565963619], [-52.0901837912001, 69.4243580287935]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;61015b32-0e40-4e38-9bcf-82e47eb5ed86&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110315T161729_20121120T161902_ADS_000000_2324_ef4453a5.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 1652117, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:37:52.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:40:42.306940Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:48:44.180622Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/15/DEM1_SAR_DTE_90_20110315T161729_20121120T161902_ADS_000000_2324_ef4453a5&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;e8ed2d35792e50700e7c5b5c263e5724&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:57:17.801867Z&#x27;}, {&#x27;Value&#x27;: &#x27;0f63c10f63bc71b2a1fff7807ecf99182ca6a362b5e18002b86dae9db27c28c6&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:57:17.822941Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-15T16:17:31.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-15T16:17:32.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((20 55, 21 55, 21 56, 20 56, 20 55))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[20.0, 55.0], [21.0, 55.0], [21.0, 56.0], [20.0, 56.0], [20.0, 55.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;874608ba-e542-4eaf-936f-ae50a1620ad5&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20130522T182445_20140522T175052_ADS_000000_9255_85f7b923.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 11551505, &#x27;OriginDate&#x27;: &#x27;2024-05-01T20:44:55.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-06T14:49:29.365968Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:07:11.952066Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2013/05/22/DEM1_SAR_DGE_30_20130522T182445_20140522T175052_ADS_000000_9255_85f7b923&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;cc7b2cd2b3d5c57b477e274ba51e5f67&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:07:09.761141Z&#x27;}, {&#x27;Value&#x27;: &#x27;79ce2bbf13e1db1458a858b90f0e48e34dc69e0f21aaac24d7f4ba06ae5b1218&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:07:09.804475Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2013-05-22T18:24:57.000000Z&#x27;, &#x27;End&#x27;: &#x27;2013-05-22T18:24:58.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((6 -90, 7 -90, 7 -89, 6 -89, 6 -90))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[6.0, -90.0], [7.0, -90.0], [7.0, -89.0], [6.0, -89.0], [6.0, -90.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;6b6dbfd0-568a-4141-ab5e-21d8660ac011&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20230818T203737_20230818T203853_GAT_81838_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 361639603, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:43.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T08:04:53.022537Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:11:31.844878Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2023/08/18/RS02_SAR_SW_SCW_20230818T203737_20230818T203853_GAT_81838_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;b95dac3b43c38abb3d9f6f87d54e0a09&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:31.011473Z&#x27;}, {&#x27;Value&#x27;: &#x27;1543331bda4ba6458ff8974c578f2dd4707e3a634c536c4189b108f8721ea22b&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:31.544450Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-08-18T20:37:37.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-08-18T20:38:53.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-51.51 61.95, -49.09 57.55, -40.31 58.44, -41.48 62.9, -51.51 61.95))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-51.51, 61.95], [-49.09, 57.55], [-40.31, 58.44], [-41.48, 62.9], [-51.51, 61.95]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;bbd9eca5-2ce0-47be-a465-ad89d512c27e&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110701T164857_20140829T164916_ADS_000000_icbH_adea2397.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 109587554, &#x27;OriginDate&#x27;: &#x27;2024-05-01T20:48:54.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-07T00:26:49.767184Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:25:56.498723Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/07/01/DEM1_SAR_DGE_30_20110701T164857_20140829T164916_ADS_000000_icbH_adea2397&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;f3df8b5f123d28f734cfc20fca0452c7&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:20:08.624239Z&#x27;}, {&#x27;Value&#x27;: &#x27;1f9b85c625548ff078d74d93f166cbedef70ec2ae82dae815ad498d8cbae177a&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:20:08.813866Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-07-01T16:48:57.000000Z&#x27;, &#x27;End&#x27;: &#x27;2014-08-29T16:49:16.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((16 38, 17 38, 17 39, 16 39, 16 38))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[16.0, 38.0], [17.0, 38.0], [17.0, 39.0], [16.0, 39.0], [16.0, 38.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;d46cb96f-a2e0-4f0c-924f-e519d2e24883&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20230901T053315_20230901T053432_TRS_82029_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 303993397, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:45.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T08:02:06.424434Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:13:41.081655Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2023/09/01/RS02_SAR_SW_SCW_20230901T053315_20230901T053432_TRS_82029_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;582de5d1279f6c41320ed83624b121ee&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:40.196916Z&#x27;}, {&#x27;Value&#x27;: &#x27;605704b10933140265a90878ad69c54f917fac636b2677ecc64624afec4dd517&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:13:40.811660Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-09-01T05:33:15.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-09-01T05:34:32.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((34.91 77.32, 49.74 80.95, 19.33 83.35, 13.26 78.97, 34.91 77.32))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[34.91, 77.32], [49.74, 80.95], [19.33, 83.35], [13.26, 78.97], [34.91, 77.32]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;288aeb04-01c5-48a9-8acc-79eca94aa3bb&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110626T180632_20140808T180334_ADS_000000_bSYK_adea2397.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 109867673, &#x27;OriginDate&#x27;: &#x27;2024-05-01T20:50:12.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-07T00:35:10.151765Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:25:25.246327Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/06/26/DEM1_SAR_DGE_30_20110626T180632_20140808T180334_ADS_000000_bSYK_adea2397&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;b73961ed2f533282fe140cf34b93b190&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:19:49.758487Z&#x27;}, {&#x27;Value&#x27;: &#x27;f0cff11668f9e62da912a39976e3d16517d8473cf4ac200b5b006f24badbd74f&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:19:49.951521Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-06-26T18:06:32.000000Z&#x27;, &#x27;End&#x27;: &#x27;2014-08-08T18:03:34.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-3 24, -2 24, -2 25, -3 25, -3 24))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-3.0, 24.0], [-2.0, 24.0], [-2.0, 25.0], [-3.0, 25.0], [-3.0, 24.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;7de7e203-9a9a-4deb-b4d7-e7e7a356ef58&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110308T120022_20161024T120326_ADS_000000_9579_d5ec66ff.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 1655658, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:45:59.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T21:19:15.688413Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:25:31.800674Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/08/DEM1_SAR_DTE_90_20110308T120022_20161024T120326_ADS_000000_9579_d5ec66ff&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;100afaaa87f95659a56ddafd3ebdbfd9&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:20:09.428830Z&#x27;}, {&#x27;Value&#x27;: &#x27;8eab323b369914c49f8fac1243061641a553fd776cbe49225747c09184fc4d36&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:20:09.454195Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-08T12:00:22.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-08T12:00:23.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((84 58, 85 58, 85 59, 84 59, 84 58))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[84.0, 58.0], [85.0, 58.0], [85.0, 59.0], [84.0, 59.0], [84.0, 58.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;270844d4-580c-4b4c-ad78-8a8646228a84&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20231103T050018_20231103T050134_TRS_82929_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 378458995, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:34.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T07:52:48.680969Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:11:14.249982Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2023/11/03/RS02_SAR_SW_SCW_20231103T050018_20231103T050134_TRS_82929_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;7408dccbcf1998c220317748ed1e2af6&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:13.394575Z&#x27;}, {&#x27;Value&#x27;: &#x27;5ee04080d85e786a0b83e3482a3d291e2a95d1a2d18dbcff3a366e72b1217bfd&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:13.993812Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-11-03T05:00:18.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-11-03T05:01:34.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((25.25 61.26, 28.18 65.6, 16.75 66.61, 15.45 62.19, 25.25 61.26))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[25.25, 61.26], [28.18, 65.6], [16.75, 66.61], [15.45, 62.19], [25.25, 61.26]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;5e5afb5d-9a40-4231-86af-9a4e8305f145&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110316T234418_20140309T234427_ADS_000000_1759_9dad2b24.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 3104095, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:49:01.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T20:50:37.779208Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:50:15.443759Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/16/DEM1_SAR_DTE_90_20110316T234418_20140309T234427_ADS_000000_1759_9dad2b24&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;23acd484cf53cf6b01019b1cd4f33c71&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:45.506412Z&#x27;}, {&#x27;Value&#x27;: &#x27;feb3328c7218dd790ec832d9a11b0de0e47cba2e9942edbbd2d0318ede942da0&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:36:45.531674Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-16T23:44:22.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-16T23:44:23.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-84 11, -83 11, -83 12, -84 12, -84 11))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-84.0, 11.0], [-83.0, 11.0], [-83.0, 12.0], [-84.0, 12.0], [-84.0, 11.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;043b63c8-23e5-41fd-8958-1d53f46c0d54&#x27;, &#x27;Name&#x27;: &#x27;TX01_SAR_SC_GEC_20230829T094925_20230829T094947_NSG_089866_4361.TSX&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 280256536, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:32.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T08:02:25.271154Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:11:25.088566Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SC_GEC_6F15/2023/08/29/TX01_SAR_SC_GEC_20230829T094925_20230829T094947_NSG_089866_4361&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;5dc85a66e7c0161633ab03f7b7fd1d2d&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:24.201125Z&#x27;}, {&#x27;Value&#x27;: &#x27;10e03ea3cc307471a5aad4f5032a2474de2a70899bdaee097f8372cb2b10e66d&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:11:24.772724Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-08-29T09:49:25.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-08-29T09:49:47.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-50.0791422080899 68.7391678597253, -49.3422886306117 70.0979666319395, -51.9474148779057 70.2495539242079, -52.509465447228 68.8848312226412, -50.0791422080899 68.7391678597253))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-50.0791422080899, 68.7391678597253], [-49.3422886306117, 70.0979666319395], [-51.9474148779057, 70.2495539242079], [-52.509465447228, 68.8848312226412], [-50.0791422080899, 68.7391678597253]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;2a6a1e6a-c3d2-4a6d-a2b3-15a6b537ff32&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110309T131152_20140911T130534_ADS_000000_6870_fdf1fc4b.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 3104067, &#x27;OriginDate&#x27;: &#x27;2024-05-13T06:29:08.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T21:15:25.865844Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:25:44.539140Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/09/DEM1_SAR_DTE_90_20110309T131152_20140911T130534_ADS_000000_6870_fdf1fc4b&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;f08e947b92627658b0d5d8ac3733c210&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:20:19.057086Z&#x27;}, {&#x27;Value&#x27;: &#x27;06dabfa50abfc194464c8337832f9be3b2ecb2bd21e56417e5902ebf21bba97d&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:20:19.081513Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-09T13:12:00.000000Z&#x27;, &#x27;End&#x27;: &#x27;2011-03-09T13:12:01.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((71 39, 72 39, 72 40, 71 40, 71 39))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[71.0, 39.0], [72.0, 39.0], [72.0, 40.0], [71.0, 40.0], [71.0, 39.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;8ac43a77-1e32-4d8c-a061-2f2992e13624&#x27;, &#x27;Name&#x27;: &#x27;CS00_SAR_HIM_1C_20230816T203100_20230816T203107_MAT_0_ec93.HDF5&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 271879061, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:44.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T08:06:00.980061Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:15:14.613761Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_HIM_1C_6F15/2023/08/16/CS00_SAR_HIM_1C_20230816T203100_20230816T203107_MAT_0_ec93&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;aaf61ab395a6ed425d5439d4a6fa2264&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:15:13.821910Z&#x27;}, {&#x27;Value&#x27;: &#x27;91d2ecc566a673ad2f8f1e9bd935f11b913859f7f86063e867fa83c826672706&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:15:14.264299Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-08-16T20:31:00.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-08-16T20:31:07.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-43.06336493 59.93349131, -43.04158174 60.30220694, -43.63066393 60.30958272, -43.64590081 59.94075855, -43.06336493 59.93349131))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-43.06336493, 59.93349131], [-43.04158174, 60.30220694], [-43.63066393, 60.30958272], [-43.64590081, 59.94075855], [-43.06336493, 59.93349131]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;ce516705-b1ba-4ace-bb31-0accb3690cf9&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20230901T185119_20230901T185235_TRS_82037_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 373888320, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:30.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T08:02:35.530007Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:06:10.397461Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2023/09/01/RS02_SAR_SW_SCW_20230901T185119_20230901T185235_TRS_82037_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;b304582386bf30777fa10ac1c6bc2b68&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:06:08.141853Z&#x27;}, {&#x27;Value&#x27;: &#x27;4a71085993cf823a2f60254a731db943553f90ce526bbdebe65bf7a6ae962f25&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:06:08.995789Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-09-01T18:51:19.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-09-01T18:52:35.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-32.53 71.61, -28.02 67.34, -15.75 68.39, -17.52 72.83, -32.53 71.61))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-32.53, 71.61], [-28.02, 67.34], [-15.75, 68.39], [-17.52, 72.83], [-32.53, 71.61]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;d22198a9-f41e-4a87-97ba-f243d88dd95f&#x27;, &#x27;Name&#x27;: &#x27;CS00_SAR_HIM_1C_20230703T081414_20230703T081421_MAT_0_d38b.HDF5&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 444427873, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:40.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T08:06:04.995930Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:14:36.835062Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_HIM_1C_6F15/2023/07/03/CS00_SAR_HIM_1C_20230703T081414_20230703T081421_MAT_0_d38b&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;eea2dece1ea51dbc204ce0a064adfbf3&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:35.852882Z&#x27;}, {&#x27;Value&#x27;: &#x27;0e42bd9f8cd1e4e2d7b4a161254aab52071a79e682f99ed0d92a15938d184911&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:36.543440Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2023-07-03T08:14:14.000000Z&#x27;, &#x27;End&#x27;: &#x27;2023-07-03T08:14:21.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-52.1897285 69.33836706, -52.16441315 68.86754945, -50.80827875 68.87142385, -50.80410941 69.34233792, -52.1897285 69.33836706))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-52.1897285, 69.33836706], [-52.16441315, 68.86754945], [-50.80827875, 68.87142385], [-50.80410941, 69.34233792], [-52.1897285, 69.33836706]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;1793f3dc-7486-4f79-8e47-759b7f356253&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_30_20130609T210253_20140717T204022_ADS_000000_6LkO_b428c981.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 6721101, &#x27;OriginDate&#x27;: &#x27;2024-08-07T14:19:34.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-08-08T18:05:56.464294Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:31:26.085287Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DTED/SAR_DTE_30_615C/2013/06/09/DEM1_SAR_DTE_30_20130609T210253_20140717T204022_ADS_000000_6LkO_b428c981&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;dc4aa3f5ec92496ad1caed60eaaa78c3&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:31:15.388120Z&#x27;}, {&#x27;Value&#x27;: &#x27;a5cae4cf5e8482c06aefe9ead44be6c0271c1708316568915350fa0d4fee7543&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:31:15.419733Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2013-06-09T21:02:53.000000Z&#x27;, &#x27;End&#x27;: &#x27;2014-07-17T20:40:22.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((88 -76, 89 -76, 89 -75, 88 -75, 88 -76))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[88.0, -76.0], [89.0, -76.0], [89.0, -75.0], [88.0, -75.0], [88.0, -76.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;b291cdcf-9e69-4e64-9f6b-e0c8cf858e66&#x27;, &#x27;Name&#x27;: &#x27;IE00_SAR_SC__GR_20240213T112352_20240213T112411_FFF_000000_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 915865086, &#x27;OriginDate&#x27;: &#x27;2024-07-21T07:10:52.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-07-22T07:39:44.512735Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:16:58.603930Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SC__GR_6F15/2024/02/13/IE00_SAR_SC__GR_20240213T112352_20240213T112411_FFF_000000_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;52a9361134c2e699885c215d01b0b1d2&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:16:56.993001Z&#x27;}, {&#x27;Value&#x27;: &#x27;aa829def0cf4586f5ad39a57c74b3f836377f440f648c676c82824a1084cb33c&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:16:58.358561Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2024-02-13T11:23:52.000000Z&#x27;, &#x27;End&#x27;: &#x27;2024-02-13T11:24:11.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((18.8795316722735 62.4917789671099, 21.2737080195257 62.7579817386565, 20.7088242480888 63.8719889038916, 18.2358648891094 63.6001970892155, 18.8795316722735 62.4917789671099))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[18.8795316722735, 62.4917789671099], [21.2737080195257, 62.7579817386565], [20.7088242480888, 63.8719889038916], [18.2358648891094, 63.6001970892155], [18.8795316722735, 62.4917789671099]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;69d3259a-752f-4120-b08a-ba68b430ef43&#x27;, &#x27;Name&#x27;: &#x27;RS02_SAR_SW_SCW_20150417T073656_20150417T073812_TRS_38312_0000&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 350173590, &#x27;OriginDate&#x27;: &#x27;2024-06-18T13:23:08.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-06-19T15:15:57.625824Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:14:50.646452Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/SAR_SEA_ICE/SAR_SW_SCW_6F15/2015/04/17/RS02_SAR_SW_SCW_20150417T073656_20150417T073812_TRS_38312_0000&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;9a3c700544733508ab886f6c1f10ba35&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:49.637825Z&#x27;}, {&#x27;Value&#x27;: &#x27;7455f06f971b81ad2516fbc75528447fddd529a77d057fbbdfb06bceeb00d7df&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:14:50.292650Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2015-04-17T07:36:56.000000Z&#x27;, &#x27;End&#x27;: &#x27;2015-04-17T07:38:12.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-0.98 85.84, 35.14 82.65, 11.44 79.58, -15.03 81.55, -0.98 85.84))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-0.98, 85.84], [35.14, 82.65], [11.44, 79.58], [-15.03, 81.55], [-0.98, 85.84]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;ae28682b-e6c3-4c72-9a1e-54941ea0a5ab&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DGE_30_20110130T223504_20131025T105546_ADS_000000_sBSg_e27ef905.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 110262412, &#x27;OriginDate&#x27;: &#x27;2024-08-07T14:14:31.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-08-08T17:59:44.981367Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-17T09:31:26.105465Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-30-DGED/SAR_DGE_30_A4AD/2011/01/30/DEM1_SAR_DGE_30_20110130T223504_20131025T105546_ADS_000000_sBSg_e27ef905&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;3ae3432fc6b1339670a3c4e7638150b6&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:31:18.907781Z&#x27;}, {&#x27;Value&#x27;: &#x27;06f7b071bbad099fadd9880e112958859a3451446faa1db4684853470dcbb447&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-17T09:31:19.140144Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-01-30T22:35:04.000000Z&#x27;, &#x27;End&#x27;: &#x27;2013-10-25T10:55:46.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-71 43, -70 43, -70 44, -71 44, -71 43))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-71.0, 43.0], [-70.0, 43.0], [-70.0, 44.0], [-71.0, 44.0], [-71.0, 43.0]]]}}, {&#x27;@odata.mediaContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;Id&#x27;: &#x27;17d890bf-858c-4068-8338-a4f7a9934fbd&#x27;, &#x27;Name&#x27;: &#x27;DEM1_SAR_DTE_90_20110310T235855_20130704T235958_ADS_000000_5004_57f834c0.DEM&#x27;, &#x27;ContentType&#x27;: &#x27;application/octet-stream&#x27;, &#x27;ContentLength&#x27;: 3101157, &#x27;OriginDate&#x27;: &#x27;2024-05-13T08:35:51.000000Z&#x27;, &#x27;PublicationDate&#x27;: &#x27;2024-05-14T21:08:56.491641Z&#x27;, &#x27;ModificationDate&#x27;: &#x27;2025-04-22T09:45:27.125729Z&#x27;, &#x27;Online&#x27;: True, &#x27;EvictionDate&#x27;: &#x27;9999-12-31T23:59:59.999999Z&#x27;, &#x27;S3Path&#x27;: &#x27;/eodata/CCM/COP-DEM_GLO-90-DTED/SAR_DTE_90_61F6/2011/03/10/DEM1_SAR_DTE_90_20110310T235855_20130704T235958_ADS_000000_5004_57f834c0&#x27;, &#x27;Checksum&#x27;: [{&#x27;Value&#x27;: &#x27;64423e70f60b760b2c9afe5611b407f4&#x27;, &#x27;Algorithm&#x27;: &#x27;MD5&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:35:49.108937Z&#x27;}, {&#x27;Value&#x27;: &#x27;868e743cbea473b7d3f52719ba6ac9470436625ce147e23f07c19812123d3ae9&#x27;, &#x27;Algorithm&#x27;: &#x27;BLAKE3&#x27;, &#x27;ChecksumDate&#x27;: &#x27;2025-04-20T23:35:49.136409Z&#x27;}], &#x27;ContentDate&#x27;: {&#x27;Start&#x27;: &#x27;2011-03-10T23:58:55.000000Z&#x27;, &#x27;End&#x27;: &#x27;2013-07-04T23:59:58.000000Z&#x27;}, &#x27;Footprint&#x27;: &quot;geography&#x27;SRID=4326;POLYGON ((-91 37, -90 37, -90 38, -91 38, -91 37))&#x27;&quot;, &#x27;GeoFootprint&#x27;: {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-91.0, 37.0], [-90.0, 37.0], [-90.0, 38.0], [-91.0, 38.0], [-91.0, 37.0]]]}}], &#x27;@odata.nextLink&#x27;: &#x27;https://catalogue.dataspace.copernicus.eu/odata/v1/Products?%24filter=Collection%2FName+eq+%27CCM%27+and+Attributes%2FOData.CSC.StringAttribute%2Fany%28att%3Aatt%2FName+eq+%27productType%27%29&amp;%24top=100&amp;%24skip=100&#x27;}"}, {"fullname": "cpom.dems.get_cop90_dem.df", "modulename": "cpom.dems.get_cop90_dem", "qualname": "df", "kind": "variable", "doc": "<p></p>\n", "default_value": "     @odata.mediaContentType  ...                                       GeoFootprint\n0   application/octet-stream  ...  {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[12...\n1   application/octet-stream  ...  {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[4.0, 12....\n2   application/octet-stream  ...  {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-68.0, 1...\n3   application/octet-stream  ...  {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[46.02152...\n4   application/octet-stream  ...  {&#x27;type&#x27;: &#x27;MultiPolygon&#x27;, &#x27;coordinates&#x27;: [[[[7....\n..                       ...  ...                                                ...\n95  application/octet-stream  ...  {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[88.0, -7...\n96  application/octet-stream  ...  {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[18.87953...\n97  application/octet-stream  ...  {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-0.98, 8...\n98  application/octet-stream  ...  {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-71.0, 4...\n99  application/octet-stream  ...  {&#x27;type&#x27;: &#x27;Polygon&#x27;, &#x27;coordinates&#x27;: [[[-91.0, 3...\n\n[100 rows x 15 columns]"}, {"fullname": "cpom.dems.tests", "modulename": "cpom.dems.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.dems.tests.test_dems", "modulename": "cpom.dems.tests.test_dems", "kind": "module", "doc": "<p>pytests for Dem class</p>\n"}, {"fullname": "cpom.dems.tests.test_dems.pytestmark", "modulename": "cpom.dems.tests.test_dems", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;requires_external_data&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.dems.tests.test_dems.log", "modulename": "cpom.dems.tests.test_dems", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.dems.tests.test_dems (WARNING)&gt;"}, {"fullname": "cpom.dems.tests.test_dems.test_dems_all", "modulename": "cpom.dems.tests.test_dems", "qualname": "test_dems_all", "kind": "function", "doc": "<p>load DEMs and test interpolated elevations to tolerance of 1m</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dem_name (str):</strong>  _description_</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>elevs (np.ndarray:</strong>  expected elevation values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dem_name</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">elevs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.tests.test_dems.test_dems_zarr", "modulename": "cpom.dems.tests.test_dems", "qualname": "test_dems_zarr", "kind": "function", "doc": "<p>load Zarr format DEMs and test interpolated elevations to tolerance of 1m</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dem_name_zarr (str):</strong>  _description_</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>elevs (np.ndarray:</strong>  expected elevation values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dem_name_zarr</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">elevs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.tests.test_dems.test_compare_dems_zarr_and_tiff", "modulename": "cpom.dems.tests.test_dems", "qualname": "test_compare_dems_zarr_and_tiff", "kind": "function", "doc": "<p>Compare zarr and tiff DEMs to a tolerance of 0.001m</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dem_name (str):</strong>  name of Dem object using Tiff format</li>\n<li><strong>dem_name_zarr (str):</strong>  name of Dem object using Zarr format</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>elevs (np.ndarray:</strong>  expected elevation values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dem_name</span>, </span><span class=\"param\"><span class=\"n\">dem_name_zarr</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.dems.tests.test_dems.test_grn_dems_zarr", "modulename": "cpom.dems.tests.test_dems", "qualname": "test_grn_dems_zarr", "kind": "function", "doc": "<p>load Zarr format DEMs and test interpolated elevations to tolerance of 1m</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dem_name_zarr (str):</strong>  _description_</li>\n<li><strong>lats (np.ndarray):</strong>  latitude values</li>\n<li><strong>lons (np.ndarray):</strong>  longitude values</li>\n<li><strong>elevs (np.ndarray:</strong>  expected elevation values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dem_name_zarr</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">elevs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.gridding", "modulename": "cpom.gridding", "kind": "module", "doc": "<h1 id=\"modules-to-support-gridding\">Modules to Support Gridding</h1>\n\n<p>gridareas.py: provides class GridArea: class to define and use named grid areas for polar regions</p>\n\n<p>gridding.py: provides function griddata() to bin irregular data (x,y,vals) in to a \n             2d rectangular grid of cell size: binsize in meters</p>\n"}, {"fullname": "cpom.gridding.gridareas", "modulename": "cpom.gridding.gridareas", "kind": "module", "doc": "<p>Class to define rectangular polar stereo grid areas for processing output. Does not define the\ngrids internal spacing.</p>\n\n<p>Each area is defined by projection, bottom left corner x,y coordinates in m, width and height in m</p>\n\n<p>Author: Alan Muir (CPOM/UCL)\nDate: 2019\nCopyright: UCL/MSSL/CPOM. Not to be used outside CPOM/MSSL without permission of author </p>\n\n<p>History:\nUpdated 24/09/21 by Lin Gilbert to use pyproj CRS rather than Proj</p>\n"}, {"fullname": "cpom.gridding.gridareas.all_grid_areas", "modulename": "cpom.gridding.gridareas", "qualname": "all_grid_areas", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;antarctica&#x27;, &#x27;greenland&#x27;, &#x27;antarctic_ocean&#x27;, &#x27;greenland_wider_area&#x27;, &#x27;greenland_centre&#x27;, &#x27;amundsen_sea_area&#x27;, &#x27;spirit_all&#x27;, &#x27;ross_1600km&#x27;, &#x27;filchner_1300km&#x27;, &#x27;arctic_russia&#x27;, &#x27;svalbard&#x27;, &#x27;novaya_zemlya&#x27;, &#x27;franz_josef_land&#x27;, &#x27;severnaya_zemlya&#x27;, &#x27;arctic&#x27;, &#x27;chongtar&#x27;]"}, {"fullname": "cpom.gridding.gridareas.GridArea", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea", "kind": "class", "doc": "<p>class to define and use named grid areas for polar regions</p>\n"}, {"fullname": "cpom.gridding.gridareas.GridArea.__init__", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.__init__", "kind": "function", "doc": "<p>initialization function for GridArea class</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  GridArea area name</li>\n<li><strong>binsize (int):</strong>  bin size of grid to use in m</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">binsize</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "cpom.gridding.gridareas.GridArea.name", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.gridding.gridareas.GridArea.binsize", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.binsize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.gridding.gridareas.GridArea.halfbinsize", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.halfbinsize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.gridding.gridareas.GridArea.crs_wgs", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.crs_wgs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.gridding.gridareas.GridArea.maxxm", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.maxxm", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.gridding.gridareas.GridArea.maxym", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.maxym", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.gridding.gridareas.GridArea.cell_x_centres", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.cell_x_centres", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.gridding.gridareas.GridArea.cell_y_centres", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.cell_y_centres", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.gridding.gridareas.GridArea.crs_bng", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.crs_bng", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.gridding.gridareas.GridArea.xy_to_lonlat_transformer", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.xy_to_lonlat_transformer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.gridding.gridareas.GridArea.lonlat_to_xy_transformer", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.lonlat_to_xy_transformer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.gridding.gridareas.GridArea.info", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.info", "kind": "function", "doc": "<p>print info on the class instance</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.gridding.gridareas.GridArea.get_ncols_nrows", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.get_ncols_nrows", "kind": "function", "doc": "<p>returns the number of grid columns (x) and rows (y) for a given bin size in m</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.gridding.gridareas.GridArea.get_col_row_from_x_y", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.get_col_row_from_x_y", "kind": "function", "doc": "<p>returns the grid column and row for a given x,y and bin size in m</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.gridding.gridareas.GridArea.get_cellcentre_x_y_from_col_row", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.get_cellcentre_x_y_from_col_row", "kind": "function", "doc": "<p>returns cell centre x,y in (m) from the grid column and row indices and bin size</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">col</span>, </span><span class=\"param\"><span class=\"n\">row</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.gridding.gridareas.GridArea.get_cellcentre_lat_lon_from_col_row", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.get_cellcentre_lat_lon_from_col_row", "kind": "function", "doc": "<p>returns latitude and longitude E of cell centre from the grid column and row indices\nand bin size</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">col</span>, </span><span class=\"param\"><span class=\"n\">row</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.gridding.gridareas.GridArea.get_xy_relative_to_cellcentre", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.get_xy_relative_to_cellcentre", "kind": "function", "doc": "<p>returns  the offset in x and y from grid cell (ncol,nrow) centre</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">col</span>, </span><span class=\"param\"><span class=\"n\">row</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.gridding.gridareas.GridArea.transform_x_y_to_lat_lon", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.transform_x_y_to_lat_lon", "kind": "function", "doc": "<p>returns latitude and longitude E of cell centre from the arrays of x,y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.gridding.gridareas.GridArea.transform_lat_lon_to_x_y", "modulename": "cpom.gridding.gridareas", "qualname": "GridArea.transform_lat_lon_to_x_y", "kind": "function", "doc": "<p>returns x,y in grid projection of latitude and longitude E</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.gridding.gridding", "modulename": "cpom.gridding.gridding", "kind": "module", "doc": "<p>Module for irregular data gridding functions optimised for typical satellite data uses</p>\n\n<p>Author: Alan Muir (CPOM/UCL)\nDate: 2019\nCopyright: UCL/MSSL/CPOM. Not to be used outside CPOM/MSSL without permission of author</p>\n"}, {"fullname": "cpom.gridding.gridding.griddata", "modulename": "cpom.gridding.gridding", "qualname": "griddata", "kind": "function", "doc": "<p>bin irregular data (x,y,vals) in to a 2d rectangular grid of cell size: binsize in meters.\ngrid coordinates defined by x,y extrema : origin xmin-binsize/2., ymin - binsize/2.\nie xmin,ymin is in center of 1st bin (not edge).\nCalculates median (or mean or %value) of binned values.\nNans are allowed but excluded from calculation.\nEmpty bins are set to np.nan</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>x : ndarray (1D)\n    float, x values (in meters).\ny : ndarray (1D)\n    float, y values (in meters).\nz : ndarray (1D)\n    corresponding data values.\nbinsize : scalar, optional, units meters\n    The full width and height of each bin on the grid.  If each\n    bin is a cube, then this is the x and y dimension.  This is\n    the step in both directions, x and y. Defaults to 10000 (ie 10km)\ncalc_median : boolean, default=False. Calculate the median value in each bin\nas return grid value\ncalc_mean : boolean, default=False. Calculate the mean value in each bin\nas return grid value\ncalc_percent_of_value : a scalar value or boolean False, default=False.\nCalculate the % of this value in each bin as return grid value</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>grid : ndarray (2D)\n    The evenly gridded data.  The value of each cell is the median,\n    mean or %failure value of\n    the contents of the bin.\ndensity_grid : ndarray (2D) of int, optional\n    xi, yi: the mesh of x,y coordinates for new grid\n     grid of measurement density (number of measurements in each cell)\n     only returned if return_density==True</p>\n\n<h2 id=\"revisions\">Revisions</h2>\n\n<p>2019-11-04  Initial version</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">z</span>,</span><span class=\"param\">\t<span class=\"n\">binsize</span><span class=\"o\">=</span><span class=\"mi\">10000</span>,</span><span class=\"param\">\t<span class=\"n\">calc_median</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">calc_mean</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">calc_percent_of_value</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">return_density</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks", "modulename": "cpom.masks", "kind": "module", "doc": "<p>cpom.masks</p>\n\n<h1 id=\"class-to-support-area-masks\">class to support area Masks</h1>\n"}, {"fullname": "cpom.masks.masks", "modulename": "cpom.masks.masks", "kind": "module", "doc": "<p>Class for area masking</p>\n"}, {"fullname": "cpom.masks.masks.log", "modulename": "cpom.masks.masks", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.masks.masks (WARNING)&gt;"}, {"fullname": "cpom.masks.masks.mask_list", "modulename": "cpom.masks.masks", "qualname": "mask_list", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;ase_xylimits_mask&#x27;, &#x27;ronne_filchner_xylimits_mask&#x27;, &#x27;greenland_area_xylimits_mask&#x27;, &#x27;antarctica_bedmachine_v2_grid_mask&#x27;, &#x27;greenland_bedmachine_v3_grid_mask&#x27;, &#x27;antarctica_iceandland_dilated_10km_grid_mask&#x27;, &#x27;greenland_iceandland_dilated_10km_grid_mask&#x27;, &#x27;antarctic_grounded_and_floating_2km_grid_mask&#x27;, &#x27;greenland_icesheet_2km_grid_mask&#x27;, &#x27;antarctic_icesheet_2km_grid_mask_rignot2016&#x27;, &#x27;greenland_icesheet_2km_grid_mask_rignot2016&#x27;, &#x27;greenland_icesheet_2km_grid_mask_mouginot2019&#x27;]"}, {"fullname": "cpom.masks.masks.Mask", "modulename": "cpom.masks.masks", "qualname": "Mask", "kind": "class", "doc": "<p>class to handle area masking</p>\n"}, {"fullname": "cpom.masks.masks.Mask.__init__", "modulename": "cpom.masks.masks", "qualname": "Mask.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_name (str):</strong>  mask name, must be in global mask_list</li>\n<li><strong>basin_numbers (list[int], optional):</strong>  list of grid values to select from grid masks\ndef=None</li>\n<li><strong>mask_path (str, optional):</strong>  override default path of mask data file</li>\n<li><strong>store_in_shared_memory (bool, optional):</strong>  stores/access mask array in SharedMemory</li>\n<li><strong>thislog (logging.Logger|None, optional):</strong>  attach to a different log instance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mask_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mask_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">store_in_shared_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.masks.masks.Mask.nomask", "modulename": "cpom.masks.masks", "qualname": "Mask.nomask", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.mask_name", "modulename": "cpom.masks.masks", "qualname": "Mask.mask_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.mask_long_name", "modulename": "cpom.masks.masks", "qualname": "Mask.mask_long_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.mask_grid", "modulename": "cpom.masks.masks", "qualname": "Mask.mask_grid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cpom.masks.masks.Mask.basin_numbers", "modulename": "cpom.masks.masks", "qualname": "Mask.basin_numbers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.store_in_shared_memory", "modulename": "cpom.masks.masks", "qualname": "Mask.store_in_shared_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.shared_mem", "modulename": "cpom.masks.masks", "qualname": "Mask.shared_mem", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cpom.masks.masks.Mask.shared_mem_child", "modulename": "cpom.masks.masks", "qualname": "Mask.shared_mem_child", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.polygons", "modulename": "cpom.masks.masks", "qualname": "Mask.polygons", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.polygons_lon", "modulename": "cpom.masks.masks", "qualname": "Mask.polygons_lon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.polygons_lat", "modulename": "cpom.masks.masks", "qualname": "Mask.polygons_lat", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.polygon", "modulename": "cpom.masks.masks", "qualname": "Mask.polygon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.polygon_lon", "modulename": "cpom.masks.masks", "qualname": "Mask.polygon_lon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.polygon_lat", "modulename": "cpom.masks.masks", "qualname": "Mask.polygon_lat", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.mask_type", "modulename": "cpom.masks.masks", "qualname": "Mask.mask_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.crs_wgs", "modulename": "cpom.masks.masks", "qualname": "Mask.crs_wgs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.xy_to_lonlat_transformer", "modulename": "cpom.masks.masks", "qualname": "Mask.xy_to_lonlat_transformer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.lonlat_to_xy_transformer", "modulename": "cpom.masks.masks", "qualname": "Mask.lonlat_to_xy_transformer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.masks.Mask.load_netcdf_mask", "modulename": "cpom.masks.masks", "qualname": "Mask.load_netcdf_mask", "kind": "function", "doc": "<p>load mask array from netcdf grid masks</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_file (str) :</strong>  path of netcdf mask file</li>\n<li><strong>flip (bool, optional):</strong>  _description_. Defaults to True.</li>\n<li><strong>nc_mask_var (str):</strong>  variable name in netcdf file containing mask data, def='mask'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">flip</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">nc_mask_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mask&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.masks.Mask.load_npz_mask", "modulename": "cpom.masks.masks", "qualname": "Mask.load_npz_mask", "kind": "function", "doc": "<p>load mask array from npz grid masks</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_file (str) :</strong>  path of npz mask file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.masks.Mask.points_inside", "modulename": "cpom.masks.masks", "qualname": "Mask.points_inside", "kind": "function", "doc": "<p>Given a list of lat,lon or x,y points, find the points that are inside the current mask</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray|list[float]):</strong>  list of latitude points</li>\n<li><strong>lons (np.ndarray|list[float]):</strong>  list of longitude points</li>\n<li><strong>basin_numbers (list[int,], optional):</strong>  list of basin numbers. Defaults to None.</li>\n<li><strong>inputs_are_xy (bool, optional):</strong>  lats, lons are already transformed to x,y.\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>inmask(np.ndarray) : boolean array same size as input list, indicating whether\n  inputs points are inside (True) or outside (False) mask\n  n_inside (int) : number inside mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.masks.Mask.grid_mask_values", "modulename": "cpom.masks.masks", "qualname": "Mask.grid_mask_values", "kind": "function", "doc": "<p>Return the grid mask value at each input lats, lons interpolated grid location</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  array of latitude (N) values in degrees</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude (E) values in degrees</li>\n<li><strong>inputs_are_xy (bool):</strong>  inputs are x,y values (m) instead of latitude, longitude values</li>\n<li><strong>unknown_value (int):</strong>  value returned for locations outside mask, or where mask\ngrid includes an unclassified value (unknown_value will be\nsubstituted)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>mask_values (np.ndarray): grid mask value at each input lats, lons interpolated\n                       grid location or np.NaN if outside area</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">unknown_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.masks.Mask.latlon_to_xy", "modulename": "cpom.masks.masks", "qualname": "Mask.latlon_to_xy", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lats</strong>:  latitude points in degs</li>\n<li><strong>lons</strong>:  longitude points in degrees E</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>x,y in polar stereo projection of mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.masks.Mask.clean_up", "modulename": "cpom.masks.masks", "qualname": "Mask.clean_up", "kind": "function", "doc": "<p>Free up, close or release any shared memory or other resources associated\nwith mask</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.tests", "modulename": "cpom.masks.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cpom.masks.tests.test_masks", "modulename": "cpom.masks.tests.test_masks", "kind": "module", "doc": "<p>pytests for masks.py: Mask class</p>\n"}, {"fullname": "cpom.masks.tests.test_masks.pytestmark", "modulename": "cpom.masks.tests.test_masks", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;requires_external_data&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.masks.tests.test_masks.test_mask_points_inside", "modulename": "cpom.masks.tests.test_masks", "qualname": "test_mask_points_inside", "kind": "function", "doc": "<p>test of Mask.points_inside()</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_name (str):</strong>  name of Mask</li>\n<li><strong>indices_inside (list[int]):</strong>  list of indices inside mask, or empty list []</li>\n<li><strong>num_inside (int):</strong>  number of points inside mask</li>\n<li><strong>lats (_type_):</strong>  _description_</li>\n<li><strong>lons (_type_):</strong>  _description_</li>\n<li><strong>grid_values (_type_):</strong>  _description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask_name</span>, </span><span class=\"param\"><span class=\"n\">indices_inside</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">grid_values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.tests.test_masks.test_mask_grid_mask_values", "modulename": "cpom.masks.tests.test_masks", "qualname": "test_mask_grid_mask_values", "kind": "function", "doc": "<p>test of Mask.grid_mask_values()</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_name (str):</strong>  mask name</li>\n<li><strong>lats (np.ndarray):</strong>  array of latitude N values in degs</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude E values in degs</li>\n<li><strong>expected_surface_type (list[int or nan]):</strong>  list of expected surface type values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask_name</span>, </span><span class=\"param\"><span class=\"n\">lats</span>, </span><span class=\"param\"><span class=\"n\">lons</span>, </span><span class=\"param\"><span class=\"n\">expected_surface_type</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.masks.tests.test_masks.test_mask_loading", "modulename": "cpom.masks.tests.test_masks", "qualname": "test_mask_loading", "kind": "function", "doc": "<p>test loading mask file using non-default path</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness", "modulename": "cpom.roughness", "kind": "module", "doc": "<p>cpom.roughness</p>\n\n<h1 id=\"class-to-readinterpolate-roughness-data\">Class to read/interpolate roughness data</h1>\n\n<h2 id=\"supported-roughness-data-sets\">Supported Roughness Data Sets</h2>\n\n<ul>\n<li>rema_100m_900ws_roughness_zarr \n(Roughness calculated from REMA 100m, J.Phillips 2024)</li>\n<li>arcticdem_100m_900ws_roughness_zarr \n(Roughness calculated from ArcticDEM 100m, J.Phillips 2024)</li>\n</ul>\n"}, {"fullname": "cpom.roughness.roughness", "modulename": "cpom.roughness.roughness", "kind": "module", "doc": "<p>cpom.roughness.roughness</p>\n\n<p>Roughness class to read and interpolate surface Roughness files</p>\n"}, {"fullname": "cpom.roughness.roughness.log", "modulename": "cpom.roughness.roughness", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.roughness.roughness (WARNING)&gt;"}, {"fullname": "cpom.roughness.roughness.roughness_list", "modulename": "cpom.roughness.roughness", "qualname": "roughness_list", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;rema_100m_900ws_roughness_zarr&#x27;, &#x27;arcticdem_100m_900ws_roughness_zarr&#x27;]"}, {"fullname": "cpom.roughness.roughness.Roughness", "modulename": "cpom.roughness.roughness", "qualname": "Roughness", "kind": "class", "doc": "<p>class to load and interpolate Polar roughness</p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.__init__", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.__init__", "kind": "function", "doc": "<p>class initialization function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  roughness name id, must be in global roughness_list</li>\n<li><strong>filled (bool, optional):</strong>  Use filled version of roughness if True. Defaults to True.</li>\n<li><strong>config (dict, optional):</strong>  configuration dictionary, defaults to None</li>\n<li><strong>roughness_dir (str, optional):</strong>  path of directory containing roughness. Defaults to None</li>\n<li><strong>store_in_shared_memory (bool, optional):</strong>  stores/accesses zroughness array in</li>\n<li>SharedMemory</li>\n<li><strong>thislog (logging.Logger|None, optional):</strong>  attach to a different log instance</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  when name not in global roughness_list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">roughness_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">store_in_shared_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.roughness.roughness.Roughness.name", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.crs_wgs", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.crs_wgs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.config", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.roughness_dir", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.roughness_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.filled", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.filled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.reference_year", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.reference_year", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.xroughness", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.xroughness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.yroughness", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.yroughness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.zroughness", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.zroughness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.zroughness_flip", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.zroughness_flip", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.minroughnessx", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.minroughnessx", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.minroughnessy", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.minroughnessy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.binsize", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.binsize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.store_in_shared_memory", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.store_in_shared_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.shape", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.dtype", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.dtype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.shared_mem", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.shared_mem", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cpom.roughness.roughness.Roughness.shared_mem_child", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.shared_mem_child", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.npz_type", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.npz_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.zarr_type", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.zarr_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.nc_type", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.nc_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.roughness.roughness.Roughness.get_geotiff_extent", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.get_geotiff_extent", "kind": "function", "doc": "<p>Get info from GeoTIFF on its extent</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path of GeoTIFF file</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  _description_</li>\n<li><strong>IOError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(int,int,int,int,int,int,int): width,height,top_left,top_right,bottom_left,\n  bottom_right,pixel_width</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.roughness.Roughness.get_filename", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.get_filename", "kind": "function", "doc": "<p>Find the path of the roughness file from dir and file names :\nFor the directory, it is chosen in order of preference:\na) self.config[\"roughness_dirs\"][self.name], or\nb) supplied self.roughness_dir, or\nc) default_dir\nThe file name is:\nfilename: is self.filled use filled_filename</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>default_dir (str):</strong>  default dir to find roughness file names</li>\n<li><strong>filename (str):</strong>  file name of roughness (not filled)</li>\n<li><strong>filled_filename (str):</strong>  file name of roughness (not filled)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str : path of roughness file</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>OSError :</strong>  directory or file not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filled_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.roughness.Roughness.clean_up", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.clean_up", "kind": "function", "doc": "<p>Free up, close or release any shared memory or other resources associated\nwith roughness</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.roughness.Roughness.load_npz", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.load_npz", "kind": "function", "doc": "<p>Load roughness from npz format file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>npz_file (str):</strong>  path of npz file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">npz_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.roughness.Roughness.load_zarr", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.load_zarr", "kind": "function", "doc": "<p>Load a .zarr file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>roughnessfile (str):</strong>  path of .zarr file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">roughnessfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.roughness.Roughness.load_geotiff", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.load_geotiff", "kind": "function", "doc": "<p>Load a GeoTIFF file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>roughnessfile (str):</strong>  path of GeoTIFF</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">roughnessfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.roughness.Roughness.load", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.load", "kind": "function", "doc": "<p>load the roughness</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: roughness loaded ok (True), failed (False)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.roughness.Roughness.get_segment", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.get_segment", "kind": "function", "doc": "<p>return a cropped segment of the roughness, flattened or as a grid</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>segment_bounds (List):</strong>  [(minx,maxx),(miny,maxy)]</li>\n<li><strong>grid_xy (bool, optional):</strong>  return segment as a grid. Defaults to True.</li>\n<li><strong>flatten (bool, optional):</strong>  return segment as flattened list. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[np.ndarray, np.ndarray, np.ndarray]: (xroughness,yroughness,zroughness)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">segment_bounds</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">grid_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flatten</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.roughness.Roughness.chunked_interpolation", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.chunked_interpolation", "kind": "function", "doc": "<p>Interpolate roughness in chunks to handle large datasets efficiently.</p>\n\n<p>This function performs interpolation on a roughness stored in a Zarr array by\nextracting relevant chunks and creating a sub-grid for interpolation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Array of x coordinates in the roughness's projection (in meters).</li>\n<li><strong>y (np.ndarray):</strong>  Array of y coordinates in the roughness's projection (in meters).</li>\n<li><strong>myyroughness (np.ndarray):</strong>  Flipped y coordinates corresponding to the roughness grid.</li>\n<li><strong>xroughness (np.ndarray):</strong>  x coordinates corresponding to the roughness grid.</li>\n<li><strong>method (str):</strong>  Interpolation method to use ('linear', 'nearest', etc.).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Interpolated roughness elevation values at the specified coordinates.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">myyroughness</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xroughness</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.roughness.Roughness.interp_roughness", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.interp_roughness", "kind": "function", "doc": "<p>Interpolate roughness to return elevation values corresponding to\n   cartesian x,y in roughness's projection or lat,lon values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x cartesian coordinates in the roughness's projection in m, or lat vals</li>\n<li><strong>y (np.ndarray):</strong>  x cartesian coordinates in the roughness's projection in m, or lon vals</li>\n<li><strong>method (str, optional):</strong>  linear, nearest, splinef2d. Defaults to \"linear\".</li>\n<li><strong>xy_is_latlon (bool, optional):</strong>  if True, x,y are lat, lon values. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: interpolated roughness elevation values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;linear&#39;</span>, </span><span class=\"param\"><span class=\"n\">xy_is_latlon</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.roughness.Roughness.gaussian_smooth", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.gaussian_smooth", "kind": "function", "doc": "<p>perform a gaussian smooth on the current loaded roughness\nsigma : degree of smoothing, def=1.0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.roughness.Roughness.hillshade", "modulename": "cpom.roughness.roughness", "qualname": "Roughness.hillshade", "kind": "function", "doc": "<p>Convert the roughness 'z_roughness' values to a hillshade value between 0..255\nazimuth: angle in degrees (0..360)\npitch : angle in degrees (0..90)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">azimuth</span><span class=\"o\">=</span><span class=\"mi\">225</span>, </span><span class=\"param\"><span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"mi\">45</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.tests", "modulename": "cpom.roughness.tests", "kind": "module", "doc": "<p>pytests for cpom.roughness.roughness.py</p>\n"}, {"fullname": "cpom.roughness.tests.test_roughness", "modulename": "cpom.roughness.tests.test_roughness", "kind": "module", "doc": "<p>test of cpom.roughness.roughness</p>\n"}, {"fullname": "cpom.roughness.tests.test_roughness.pytestmark", "modulename": "cpom.roughness.tests.test_roughness", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;requires_external_data&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.roughness.tests.test_roughness.test_roughness", "modulename": "cpom.roughness.tests.test_roughness", "qualname": "test_roughness", "kind": "function", "doc": "<p>test loading all roughness scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.tests.test_roughness.test_roughness_ant", "modulename": "cpom.roughness.tests.test_roughness", "qualname": "test_roughness_ant", "kind": "function", "doc": "<p>test Antarctic roughness scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.tests.test_roughness.test_roughness_grn", "modulename": "cpom.roughness.tests.test_roughness", "qualname": "test_roughness_grn", "kind": "function", "doc": "<p>test Greenland roughness scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.tests.test_roughness.test_slope_map_vostok", "modulename": "cpom.roughness.tests.test_roughness", "qualname": "test_slope_map_vostok", "kind": "function", "doc": "<p>test Antarctic roughness scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.tests.test_roughness.test_slope_map_ant", "modulename": "cpom.roughness.tests.test_roughness", "qualname": "test_slope_map_ant", "kind": "function", "doc": "<p>test Antarctic roughness scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.tests.test_roughness.test_slope_map_spirit", "modulename": "cpom.roughness.tests.test_roughness", "qualname": "test_slope_map_spirit", "kind": "function", "doc": "<p>test Antarctic roughness scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.roughness.tests.test_roughness.test_slope_map_arctic", "modulename": "cpom.roughness.tests.test_roughness", "qualname": "test_slope_map_arctic", "kind": "function", "doc": "<p>test Antarctic slop scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes", "modulename": "cpom.slopes", "kind": "module", "doc": "<p>cpom.slopes</p>\n\n<h1 id=\"classes-to-readinterpolate-ice-sheet-slope-data\">Classes to read/interpolate ice sheet slope data</h1>\n"}, {"fullname": "cpom.slopes.slopes", "modulename": "cpom.slopes.slopes", "kind": "module", "doc": "<p>cpom.slopes.slopes</p>\n\n<p>Slope class to read and interpolate surface slope files</p>\n"}, {"fullname": "cpom.slopes.slopes.log", "modulename": "cpom.slopes.slopes", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cpom.slopes.slopes (WARNING)&gt;"}, {"fullname": "cpom.slopes.slopes.slope_list", "modulename": "cpom.slopes.slopes", "qualname": "slope_list", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;rema_100m_900ws_slopes_zarr&#x27;, &#x27;arcticdem_100m_900ws_slopes_zarr&#x27;, &#x27;awi_grn_2013_1km_slopes&#x27;, &#x27;cpom_ant_2018_1km_slopes&#x27;]"}, {"fullname": "cpom.slopes.slopes.Slopes", "modulename": "cpom.slopes.slopes", "qualname": "Slopes", "kind": "class", "doc": "<p>class to load and interpolate Polar slopes</p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.__init__", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.__init__", "kind": "function", "doc": "<p>class initialization function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  slopes name id, must be in global slope_list</li>\n<li><strong>filled (bool, optional):</strong>  Use filled version of slopes if True. Defaults to True.</li>\n<li><strong>config (dict, optional):</strong>  configuration dictionary, defaults to None</li>\n<li><strong>slopes_dir (str, optional):</strong>  path of directory containing slopes. Defaults to None</li>\n<li><strong>store_in_shared_memory (bool, optional):</strong>  stores/accesses zslopes array in SharedMemory</li>\n<li><strong>thislog (logging.Logger|None, optional):</strong>  attach to a different log instance</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  when name not in global slope_list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">slopes_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">store_in_shared_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cpom.slopes.slopes.Slopes.name", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.crs_wgs", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.crs_wgs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.config", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.slopes_dir", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.slopes_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.filled", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.filled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.reference_year", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.reference_year", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.xslopes", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.xslopes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.yslopes", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.yslopes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.zslopes", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.zslopes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.zslopes_flip", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.zslopes_flip", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.minslopesx", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.minslopesx", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.minslopesy", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.minslopesy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.binsize", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.binsize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.store_in_shared_memory", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.store_in_shared_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.shape", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.dtype", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.dtype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.shared_mem", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.shared_mem", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cpom.slopes.slopes.Slopes.shared_mem_child", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.shared_mem_child", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.npz_type", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.npz_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.zarr_type", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.zarr_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.nc_type", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.nc_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cpom.slopes.slopes.Slopes.get_geotiff_extent", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.get_geotiff_extent", "kind": "function", "doc": "<p>Get info from GeoTIFF on its extent</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path of GeoTIFF file</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  _description_</li>\n<li><strong>IOError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(int,int,int,int,int,int,int): width,height,top_left,top_right,bottom_left,\n  bottom_right,pixel_width</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.slopes.Slopes.get_filename", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.get_filename", "kind": "function", "doc": "<p>Find the path of the slopes file from dir and file names :\nFor the directory, it is chosen in order of preference:\na) self.config[\"slopes_dirs\"][self.name], or\nb) supplied self.slopes_dir, or\nc) default_dir\nThe file name is:\nfilename: is self.filled use filled_filename</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>default_dir (str):</strong>  default dir to find slopes file names</li>\n<li><strong>filename (str):</strong>  file name of slopes (not filled)</li>\n<li><strong>filled_filename (str):</strong>  file name of slopes (not filled)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str : path of slopes file</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>OSError :</strong>  directory or file not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filled_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.slopes.Slopes.clean_up", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.clean_up", "kind": "function", "doc": "<p>Free up, close or release any shared memory or other resources associated\nwith slopes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.slopes.Slopes.load_npz", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.load_npz", "kind": "function", "doc": "<p>Load slopes from npz format file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>npz_file (str):</strong>  path of npz file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">npz_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.slopes.Slopes.load_zarr", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.load_zarr", "kind": "function", "doc": "<p>Load a .zarr file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slopesfile (str):</strong>  path of .zarr file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">slopesfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.slopes.Slopes.load_nc", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.load_nc", "kind": "function", "doc": "<p>load NetCDF slope files</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slopesfile (str):</strong>  path of netcdf slope file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">slopesfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.slopes.Slopes.load_geotiff", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.load_geotiff", "kind": "function", "doc": "<p>Load a GeoTIFF file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slopesfile (str):</strong>  path of GeoTIFF</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">slopesfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.slopes.Slopes.load", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.load", "kind": "function", "doc": "<p>load the slopes</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: slopes loaded ok (True), failed (False)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.slopes.Slopes.get_segment", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.get_segment", "kind": "function", "doc": "<p>return a cropped segment of the slopes, flattened or as a grid</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>segment_bounds (List):</strong>  [(minx,maxx),(miny,maxy)]</li>\n<li><strong>grid_xy (bool, optional):</strong>  return segment as a grid. Defaults to True.</li>\n<li><strong>flatten (bool, optional):</strong>  return segment as flattened list. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[np.ndarray, np.ndarray, np.ndarray]: (xslopes,yslopes,zslopes)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">segment_bounds</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">grid_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flatten</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.slopes.Slopes.chunked_interpolation", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.chunked_interpolation", "kind": "function", "doc": "<p>Interpolate slopes in chunks to handle large datasets efficiently.</p>\n\n<p>This function performs interpolation on a slopes stored in a Zarr array by\nextracting relevant chunks and creating a sub-grid for interpolation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Array of x coordinates in the slopes's projection (in meters).</li>\n<li><strong>y (np.ndarray):</strong>  Array of y coordinates in the slopes's projection (in meters).</li>\n<li><strong>myyslopes (np.ndarray):</strong>  Flipped y coordinates corresponding to the slopes grid.</li>\n<li><strong>xslopes (np.ndarray):</strong>  x coordinates corresponding to the slopes grid.</li>\n<li><strong>method (str):</strong>  Interpolation method to use ('linear', 'nearest', etc.).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Interpolated slopes elevation values at the specified coordinates.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">myyslopes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xslopes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.slopes.Slopes.interp_slopes", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.interp_slopes", "kind": "function", "doc": "<p>Interpolate slopes to return elevation values corresponding to\n   cartesian x,y in slopes's projection or lat,lon values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x cartesian coordinates in the slopes's projection in m, or lat values</li>\n<li><strong>y (np.ndarray):</strong>  x cartesian coordinates in the slopes's projection in m, or lon values</li>\n<li><strong>method (str, optional):</strong>  linear, nearest, splinef2d. Defaults to \"linear\".</li>\n<li><strong>xy_is_latlon (bool, optional):</strong>  if True, x,y are lat, lon values. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: interpolated slopes elevation values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;linear&#39;</span>, </span><span class=\"param\"><span class=\"n\">xy_is_latlon</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.slopes.Slopes.gaussian_smooth", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.gaussian_smooth", "kind": "function", "doc": "<p>perform a gaussian smooth on the current loaded slopes\nsigma : degree of smoothing, def=1.0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.slopes.Slopes.hillshade", "modulename": "cpom.slopes.slopes", "qualname": "Slopes.hillshade", "kind": "function", "doc": "<p>Convert the slopes 'z_slopes' values to a hillshade value between 0..255\nazimuth: angle in degrees (0..360)\npitch : angle in degrees (0..90)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">azimuth</span><span class=\"o\">=</span><span class=\"mi\">225</span>, </span><span class=\"param\"><span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"mi\">45</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.tests", "modulename": "cpom.slopes.tests", "kind": "module", "doc": "<p>pytests for cpom.slopes.slopes.py</p>\n"}, {"fullname": "cpom.slopes.tests.test_slopes", "modulename": "cpom.slopes.tests.test_slopes", "kind": "module", "doc": "<p>test of cpom.slopes.slopes</p>\n"}, {"fullname": "cpom.slopes.tests.test_slopes.pytestmark", "modulename": "cpom.slopes.tests.test_slopes", "qualname": "pytestmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "MarkDecorator(mark=Mark(name=&#x27;requires_external_data&#x27;, args=(), kwargs={}))"}, {"fullname": "cpom.slopes.tests.test_slopes.test_slopes", "modulename": "cpom.slopes.tests.test_slopes", "qualname": "test_slopes", "kind": "function", "doc": "<p>test loading all slope scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.tests.test_slopes.test_slopes_ant", "modulename": "cpom.slopes.tests.test_slopes", "qualname": "test_slopes_ant", "kind": "function", "doc": "<p>test Antarctic slop scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.tests.test_slopes.test_slopes_grn", "modulename": "cpom.slopes.tests.test_slopes", "qualname": "test_slopes_grn", "kind": "function", "doc": "<p>test Greenland slope scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.tests.test_slopes.test_slope_map_vostok", "modulename": "cpom.slopes.tests.test_slopes", "qualname": "test_slope_map_vostok", "kind": "function", "doc": "<p>test Antarctic slope scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.tests.test_slopes.test_slope_map_ant", "modulename": "cpom.slopes.tests.test_slopes", "qualname": "test_slope_map_ant", "kind": "function", "doc": "<p>test Antarctic slope scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.tests.test_slopes.test_slope_map_spirit", "modulename": "cpom.slopes.tests.test_slopes", "qualname": "test_slope_map_spirit", "kind": "function", "doc": "<p>test Antarctic slope scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cpom.slopes.tests.test_slopes.test_slope_map_arctic", "modulename": "cpom.slopes.tests.test_slopes", "qualname": "test_slope_map_arctic", "kind": "function", "doc": "<p>test Antarctic slop scenarios</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();